<?xml version="1.0"?>
<!-- Test Modbus related information -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
		 ddfid="zenith_ztg_ats" ddfname="Zenith ZTG ATS" ddfversion="1" canremove="no">
		 
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="zenith_ztg_ats">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

		<setProductData ruleid="vendordata" field="vendor">Zenith</setProductData>
		<setProductData ruleid="modeldata" field="model">ZTG</setProductData>
		<setProductData ruleid="typedata" field="type">Transfer Switch</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		
        <valueMap ruleid="inactive_active-vm">
            <valueIn>0</valueIn> <valueOut>0</valueOut>
            <valueIn>*</valueIn> <valueOut>1</valueOut>
        </valueMap>
		
        <enumMap ruleid="inactive_active-em">
            <label>Inactive</label>
            <label>Active</label>
        </enumMap>

 		<valueMap ruleid="zerobased2onebased-vm">
			<valueIn>0</valueIn><valueOut>1</valueOut>
			<valueIn>1</valueIn><valueOut>2</valueOut>
			<valueIn>2</valueIn><valueOut>3</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>

		<valueMap ruleid="linetoline_phase-vm">
			<valueIn>0</valueIn><valueOut>12</valueOut>
			<valueIn>1</valueIn><valueOut>23</valueOut>
			<valueIn>2</valueIn><valueOut>31</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>

		<stateSensor ruleid="auto_transfer_relay">
            <type>state</type>
            <sensorId>AUTOMATIC_TRANSFER_RELAY</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>0</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Automatic Transfer Relay</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <valueMap ruleid="reverse_bit_value-vm">
            <valueIn>0</valueIn> <valueOut>1</valueOut>
            <valueIn>*</valueIn> <valueOut>0</valueOut>
        </valueMap>
		
        <stateSensor ruleid="auto_mode_status">
            <type>state</type>
            <sensorId>AUTO_MODE_STATUS</sensorId>
            <value>
                <mapValue mapid="reverse_bit_value-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>1</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Auto Mode Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="general_purpose_alarm">
            <type>state</type>
            <sensorId>GENERAL_PURPOSE_ALARM</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>2</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>General Purpose Alarm</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="load_test">
            <type>state</type>
            <sensorId>LOAD_TEST</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>4</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Load Test or Fast Load Test Running</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="load_test_status">
            <type>state</type>
            <sensorId>LOAD_TEST_STATUS</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>5</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Load, No Load, Fast Load Test Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s2_available">
            <type>state</type>
            <sensorId>S2_AVAILABLE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>6</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S2 Available</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s1_available">
            <type>state</type>
            <sensorId>S1_AVAILABLE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40001</getOid></op>
                                    <op>7</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S1 Available</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="sn_limit_switch">
            <type>state</type>
            <sensorId>SN_LIMIT_SWITCH</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>0</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>SN Limit Switch</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="se_limit_switch">
            <type>state</type>
            <sensorId>SE_LIMIT_SWITCH</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>1</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>SE Limit Switch</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="sno_limit_switch">
            <type>state</type>
            <sensorId>SNO_LIMIT_SWITCH</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>2</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>SNO Limit Switch</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="seo_limit_switch">
            <type>state</type>
            <sensorId>SEO_LIMIT_SWITCH</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>3</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>SEO Limit Switch</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <valueMap ruleid="false_true-vm">
            <valueIn>0</valueIn> <valueOut>[false]</valueOut>
            <valueIn>*</valueIn> <valueOut>[true]</valueOut>
        </valueMap>
		
        <valueMap ruleid="ccw_cw-vm">
            <valueIn>0</valueIn> <valueOut>0</valueOut>
            <valueIn>*</valueIn> <valueOut>1</valueOut>
        </valueMap>
		
        <enumMap ruleid="ccw_cw-em">
            <label>CCW</label>
            <label>CW</label>
        </enumMap>

        <stateSensor ruleid="s2_phase_rotation">
            <type>state</type>
            <sensorId>S2_PHASE_ROTATION</sensorId>
			<rowTest> <!-- valid only if 3ph and S2 Available -->
				<and>
					<op>
						<mapValue mapid="false_true-vm"> <!-- is S2 Available -->
							<formatNumber>
								<bitwise_and>
									<op>
										<right_shift>
											<op><getOid>register40001</getOid></op>
											<op>6</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</formatNumber>
						</mapValue>
					</op>
					<op>
						<mapValue mapid="false_true-vm"> <!-- is S2 3 phase -->
							<formatNumber>
								<bitwise_and>
									<op>
										<right_shift>
											<op><getOid>register40002</getOid></op>
											<op>6</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</formatNumber>
						</mapValue>
					</op>
				</and>
			</rowTest>
            <value>
                <mapValue mapid="ccw_cw-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>4</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S2 Phase Rotation</label>
            <enum>ccw_cw-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s1_phase_rotation">
            <type>state</type>
            <sensorId>S1_PHASE_ROTATION</sensorId>
			<rowTest> <!-- valid only if 3ph and S1 Available -->
				<and>
					<op>
						<mapValue mapid="false_true-vm"> <!-- is S1 Available -->
							<formatNumber>
								<bitwise_and>
									<op>
										<right_shift>
											<op><getOid>register40001</getOid></op>
											<op>7</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</formatNumber>
						</mapValue>
					</op>
					<op>
						<mapValue mapid="false_true-vm"> <!-- is S1 3 phase -->
							<formatNumber>
								<bitwise_and>
									<op>
										<right_shift>
											<op><getOid>register40002</getOid></op>
											<op>7</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</formatNumber>
						</mapValue>
					</op>
				</and>
			</rowTest>
            <value>
                <mapValue mapid="ccw_cw-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>5</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S1 Phase Rotation</label>
            <enum>ccw_cw-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <valueMap ruleid="phase_count-vm">
            <valueIn>0</valueIn> <valueOut>One</valueOut>
            <valueIn>*</valueIn> <valueOut>Three</valueOut>
        </valueMap>

        <stateSensor ruleid="s2_phase_count">
            <type>state</type>
            <sensorId>S2_PHASE_COUNT</sensorId>
            <value>
                <mapValue mapid="phase_count-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>6</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S2 Phase Count</label>
            <enum>phase_count-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s1_phase_count">
            <type>state</type>
            <sensorId>S1_PHASE_COUNT</sensorId>
            <value>
                <mapValue mapid="phase_count-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40002</getOid></op>
                                    <op>7</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S1 Phase Count</label>
            <enum>phase_count-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s5_active">
            <type>state</type>
            <sensorId>S5_ACTIVE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>1</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S5 Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s12_active">
            <type>state</type>
            <sensorId>S12_ACTIVE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>2</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S12 Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="load_shed_active">
            <type>state</type>
            <sensorId>LOAD_SHED_ACTIVE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>3</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Load Shed Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="q7_active">
            <type>state</type>
            <sensorId>Q7_ACTIVE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>4</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Q7 Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="q3_active">
            <type>state</type>
            <sensorId>Q3_ACTIVE</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>5</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Q3 Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="closed_transfer_relay">
            <type>state</type>
            <sensorId>CLOSED_TRANSFER_RELAY</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>6</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Closed Transfer Relay Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="transfer_mode_select">
            <type>state</type>
            <sensorId>TRANFER_MODE_SELECT</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40003</getOid></op>
                                    <op>7</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Transfer Mode Select Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="timer_status">
            <type>state</type>
            <sensorId>TIMER_STATUS</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40004</getOid></op>
                                    <op>8</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>Timer Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s1_position_status">
            <type>state</type>
            <sensorId>S1_POSITION_STATUS</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40004</getOid></op>
                                    <op>9</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S1 Position Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="s2_position_status">
            <type>state</type>
            <sensorId>S2_POSITION_STATUS</sensorId>
            <value>
                <mapValue mapid="inactive_active-vm">
                    <formatNumber>
                        <bitwise_and>
                            <op>
                                <right_shift>
                                    <op><getOid>register40004</getOid></op>
                                    <op>10</op>
                                </right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
                </mapValue>
            </value>
            <label>S2 Position Status</label>
            <enum>inactive_active-em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		
		<numSensor ruleid="s1_voltage_phase_ab">
			<type>voltage</type>
			<sensorId>S1_VOLTAGE_PHASE_AB</sensorId>
			<value>
				<getOid>register40006</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S1 Voltage Phase A-B</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s1_voltage_phase_bc">
			<type>voltage</type>
			<sensorId>S1_VOLTAGE_PHASE_BC</sensorId>
			<value>
				<getOid>register40007</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S1 Voltage Phase B-C</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s1_voltage_phase_ca">
			<type>voltage</type>
			<sensorId>S1_VOLTAGE_PHASE_CA</sensorId>
			<value>
				<getOid>register40008</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S1 Voltage Phase C-A</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s2_voltage_phase_ab">
			<type>voltage</type>
			<sensorId>S21_VOLTAGE_PHASE_AB</sensorId>
			<value>
				<getOid>register40009</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S2 Voltage Phase A-B</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s2_voltage_phase_bc">
			<type>voltage</type>
			<sensorId>S2_VOLTAGE_PHASE_BC</sensorId>
			<value>
				<getOid>register40010</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S2 Voltage Phase B-C</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s2_voltage_phase_ca">
			<type>voltage</type>
			<sensorId>S2_VOLTAGE_PHASE_CA</sensorId>
			<value>
				<getOid>register40011</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>S2 Voltage Phase C-A</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s1_frequency">
			<type>frequency</type>
			<sensorId>S1_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>0.1</op>
					<op><getOid>register40013</getOid></op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>S1 Frequency</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s2_frequency">
			<type>frequency</type>
			<sensorId>S2_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>0.1</op>
					<op><getOid>register40015</getOid></op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>S2 Frequency</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="s1_transfer_count">
			<type>num</type>
			<sensorId>S1_TRANSFER_COUNT</sensorId>
			<value>
				<getOid>register40017</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Total Transfer to S1</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<numSensor ruleid="nominal_full_scale_voltage">
			<type>voltage</type>
			<sensorId>NOMINAL_FULL_SCALE_VOLTAGE</sensorId>
			<value>
				<getOid>register40021</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Nominal Full-Scale Voltage</label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
				
	</device>

	<protocol>
		<modbus>
			<value_ref_id valid="register40001"> <!-- AUTOMATIC_TRANSFER_RELAY, ATS_NOT_IN_AUTOMODE, GENERAL_PURPOSE_ALARM, LOAD_TEST, LOAD_TEST_STATUS, S2_AVAILABLE, S1_AVAILABLE -->
				<function>3</function>
				<start_addr>0</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40002"> <!-- SN_LIMIT_SWITCH, SE_LIMIT_SWITCH, SNO_LIMIT_SWITCH, SEO_LIMIT_SWITCH, S2_PHASE_ROTATION, S1_PHASE_ROTATION, S2_PHASE_COUNT, S1_PHASE_COUNT -->
				<function>3</function>
				<start_addr>1</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40003"> <!-- S5_ACTIVE, S12_ACTIVE, LOAD_SHED_ACTIVE, Q7_ACTIVE, Q3_ACTIVE, CLOSED_TRANSFER_RELAY, TRANFER_MODE_SELECT -->
				<function>3</function>
				<start_addr>2</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40004"> <!-- TIMER_STATUS, S1_POSITION_STATUS, S2_POSITION_STATUS -->
				<function>3</function>
				<start_addr>3</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40006"> <!-- S1_VOLTAGE_PHASE_AB -->
				<function>3</function>
				<start_addr>5</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40007"> <!-- S1_VOLTAGE_PHASE_BC -->
				<function>3</function>
				<start_addr>6</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40008"> <!-- S1_VOLTAGE_PHASE_CA -->
				<function>3</function>
				<start_addr>7</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40009"> <!-- S21_VOLTAGE_PHASE_AB -->
				<function>3</function>
				<start_addr>8</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40010"> <!-- S2_VOLTAGE_PHASE_BC -->
				<function>3</function>
				<start_addr>9</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40011"> <!-- S2_VOLTAGE_PHASE_CA -->
				<function>3</function>
				<start_addr>10</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40013"> <!-- S1_FREQUENCY -->
				<function>3</function>
				<start_addr>12</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40015"> <!-- S2_FREQUENCY -->
				<function>3</function>
				<start_addr>14</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40017"> <!-- S1_TRANSFER_COUNT -->
				<function>3</function>
				<start_addr>16</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register40021"> <!-- NOMINAL_FULL_SCALE_VOLTAGE -->
				<function>3</function>
				<start_addr>20</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			
			<packet>
				<function>3</function>
				<start_addr>0</start_addr>
				<quantity>21</quantity>
			</packet>
		</modbus>
	</protocol>
</APC_DDF>
