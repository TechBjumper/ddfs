<?xml version="1.0"?>
  <!-- Test Modbus related information -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
  ddfid="caterpillar_ats_mx150_mx250" ddfname="Caterpillar ATS (MX150-MX250)"
  ddfversion="1" canremove="yes">
  <schemaVersion>1.6</schemaVersion>

  <device deviceid="caterpillar_ats">
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

    <setProductData ruleid="vendordata" field="vendor">Caterpillar</setProductData>

    <!-- MX150/200/250 used to monitor ATS -->
    <setProductData ruleid="modeldata" field="model">
        <mapValue mapid="controller_type_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_network_config</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
    </setProductData>

    <!-- Generator -->
    <setProductData ruleid="typedata" field="type">Transfer Switch</setProductData>

    <setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>

    <!-- ATS Sensors -->
    <stateSensor ruleid="mx_0_automatic_transfer_relay">
      <type>state</type>
      <sensorId>MX_0_AUTOMATIC_TRANSFER_RELAY_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 0 -->
            <bitwise_and>
              <op>
                <getOid>mx_0_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Automatic Transfer Relay</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_ats_not_in_auto_mode">
      <type>state</type>
      <sensorId>MX_0_ATS_NOT_IN_AUTO_MODE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>ATS Not in Auto Mode</label>
      <enum>notinauto_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_general_purpose_alarm">
      <type>state</type>
      <sensorId>MX_0_GENERAL_PURPOSE_ALARM</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 2 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>General Purpose Alarm</label>
      <enum>alarm_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_load_test_running_status">
      <type>state</type>
      <sensorId>MX_0_LOAD_TEST_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 4 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Load Test or Fast Load Test Running</label>
      <enum>running_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_load_test_status">
      <type>state</type>
      <sensorId>MX_0_LOAD_TEST_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 5 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Load, No Load, Fast Load Test Status</label>
      <enum>running_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_s2_available_status">
      <type>state</type>
      <sensorId>MX_0_S2_AVAILABLE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 6 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S2 Available Status</label>
      <enum>available_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_0_s1_available_status">
      <type>state</type>
      <sensorId>MX_0_S1_AVAILABLE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_status</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S1 Available Status</label>
      <enum>available_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_sn_limit_switch">
      <type>state</type>
      <sensorId>MX_1_SN_LIMIT_SWITCH_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 0 -->
            <bitwise_and>
              <op>
                <getOid>mx_1_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>SN Limit Switch</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_se_limit_switch">
      <type>state</type>
      <sensorId>MX_1_SE_LIMIT_SWITCH_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>SE Limit Switch</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_sno_limit_switch">
      <type>state</type>
      <sensorId>MX_1_SNO_LIMIT_SWITCH_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 2 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>SNO Limit Switch</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_seo_limit_switch">
      <type>state</type>
      <sensorId>MX_1_SEO_LIMIT_SWITCH_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 3 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>SEO Limit Switch</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_s2_phase_rotation">
      <type>state</type>
      <sensorId>MX_1_S2_PHASE_ROTATION_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 4 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S2 Phase Rotation</label>
      <enum>rotation_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_s1_phase_rotation">
      <type>state</type>
      <sensorId>MX_1_S1_PHASE_ROTATION_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 5 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S1 Phase Rotation</label>
      <enum>rotation_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_s2_num_phases">
      <type>state</type>
      <sensorId>MX_1_S2_NUM_PHASES</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 6 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S2 Num Phases</label>
      <enum>phase_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_1_s1_num_phases">
      <type>state</type>
      <sensorId>MX_0_S1_NUM_PHASES</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_1_status</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S1 Num Phases</label>
      <enum>phase_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_s5_active">
      <type>state</type>
      <sensorId>MX_2_S5_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S5 Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_s12_active">
      <type>state</type>
      <sensorId>MX_2_S12_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 2 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S12 Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_load_shed_active">
      <type>state</type>
      <sensorId>MX_2_LOAD_SHED_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 3 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Load Shed (LS) Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_q7_active">
      <type>state</type>
      <sensorId>MX_2_Q7_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 4 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Q7 Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_q3_active">
      <type>state</type>
      <sensorId>MX_2_Q3_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 5 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Q3 Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_closed_transfer_relay_active">
      <type>state</type>
      <sensorId>MX_2_CLOSED_TRANSFER_RELAY_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 6 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Closed Transfer Relay (CTR) Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_2_transfer_mode_select_active">
      <type>state</type>
      <sensorId>MX_2_TRANSFER_MODE_SELECT_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_2_status</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Transfer Mode Select Active</label>
      <enum>onoff_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_id_0_type">
      <type>state</type>
      <sensorId>TIMER_ID_0_TYPE</sensorId>
      <value>
        <mapValue mapid="timer_type_vm">
          <formatNumber>
            <!-- Determined by bits 2,1,0 -->
            <bitwise_and>
              <op>
                <getOid>timer_id_0</getOid>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Timer</label>
      <enum>timer_type_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_id_0_active">
      <type>state</type>
      <sensorId>TIMER_ID_0_ACTIVE_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 8 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_0</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Timer Active</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_id_0_s1_position">
      <type>state</type>
      <sensorId>TIMER_ID_0_S1_POSITION_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 9 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_0</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S1 Position Status</label>
      <enum>position_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_id_0_s2_position">
      <type>state</type>
      <sensorId>TIMER_ID_0_S2_POSITION_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 10 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_0</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>S2 Position Status</label>
      <enum>position_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <numSensor ruleid="timer_countdown_value">
      <type>timeinsec</type>
      <sensorId>TIMER_COUNTDOWN_VALUE_SEC</sensorId>
      <value>
        <getOid>timer_countdown_value</getOid>
      </value>
      <label>Timer Countdown Value</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s1_voltage_phase_ab">
      <type>voltage</type>
      <sensorId>S1_VOLTAGE_L2L_1</sensorId>
      <value>
        <getOid>s1_voltage_phase_a_b</getOid>
      </value>
      <label>S1 Voltage Phase A-B</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s1_voltage_phase_bc">
      <type>voltage</type>
      <sensorId>S1_VOLTAGE_L2L_2</sensorId>
      <value>
        <getOid>s1_voltage_phase_b_c</getOid>
      </value>
      <label>S1 Voltage Phase B-C</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s1_voltage_phase_ca">
      <type>voltage</type>
      <sensorId>S1_VOLTAGE_L2L_3</sensorId>
      <value>
        <getOid>s1_voltage_phase_c_a</getOid>
      </value>
      <label>S1 Voltage Phase C-A</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s2_voltage_phase_ab">
      <type>voltage</type>
      <sensorId>S2_VOLTAGE_L2L_1</sensorId>
      <value>
        <getOid>s2_voltage_phase_a_b</getOid>
      </value>
      <label>S2 Voltage Phase A-B</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s2_voltage_phase_bc">
      <type>voltage</type>
      <sensorId>S2_VOLTAGE_L2L_2</sensorId>
      <value>
        <getOid>s2_voltage_phase_b_c</getOid>
      </value>
      <label>S2 Voltage Phase B-C</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s2_voltage_phase_ca">
      <type>voltage</type>
      <sensorId>S2_VOLTAGE_L2L_3</sensorId>
      <value>
        <getOid>s2_voltage_phase_c_a</getOid>
      </value>
      <label>S2 Voltage Phase C-A</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s1_frequency">
      <type>frequency</type>
      <sensorId>S1_FREQ</sensorId>
      <value>
            <mult>
                <op><getOid>s1_frequency</getOid></op>
                <op>0.1</op>
            </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>S1 Frequency</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s2_frequency">
      <type>frequency</type>
      <sensorId>S2_FREQ</sensorId>
      <value>
            <mult>
                <op><getOid>s2_frequency</getOid></op>
                <op>0.1</op>
            </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>S2 Frequency</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s1_total_transfers">
      <type>num</type>
      <sensorId>S1_TOTAL_TRANSFERS</sensorId>
      <value>
          <getOid>s1_total_transfers</getOid>
      </value>
      <label>Total Transfers to S1</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <stateSensor ruleid="mx_0_ats_type">
      <type>state</type>
      <sensorId>MX_0_ATS_TYPE</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_0_network_config</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>ATS Type</label>
      <enum>ats_type_em</enum>
      <sensorSet>MX Network Configuration Sensors</sensorSet>
    </stateSensor>

    <numSensor ruleid="s1_total_fails">
      <type>num</type>
      <sensorId>S1_TOTAL_FAILS_COUNT</sensorId>
      <value>
          <getOid>s1_total_fails</getOid>
      </value>
      <label>S1 Total Fails</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="s2_total_transfers">
      <type>num</type>
      <sensorId>S2_TOTAL_TRANSFERS</sensorId>
      <value>
          <getOid>s2_total_transfers</getOid>
      </value>
      <label>Total Transfers to S2</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="days_powered_up">
      <type>timeindays</type>
      <sensorId>DAYS_POWERED_UP</sensorId>
      <value>
          <getOid>days_powered_up</getOid>
      </value>
      <label>Days Powered Up</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="time_s1_available">
      <type>timeinhours</type>
      <sensorId>TIME_S1_AVAILABLE_HOURS</sensorId>
      <value>
          <getOid>time_s1_available</getOid>
      </value>
      <label>Time S1 Available</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="time_s2_available">
      <type>timeinhours</type>
      <sensorId>TIME_S2_AVAILABLE_HOURS</sensorId>
      <value>
          <getOid>time_s2_available</getOid>
      </value>
      <label>Time S2 Available</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <stateSensor ruleid="exerciser_schedule_status_type">
      <type>state</type>
      <sensorId>EXERCISER_SCHEDULE_STATUS_TYPE</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 0 -->
            <bitwise_and>
              <op>
                <getOid>exerciser_schedule_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Exerciser Type</label>
      <enum>exerciser_type_em</enum>
      <sensorSet>Exerciser Schedule Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="exerciser_schedule_status_load">
      <type>state</type>
      <sensorId>EXERCISER_SCHEDULE_STATUS_LOAD</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>exerciser_schedule_status</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Load/No Load Exerciser</label>
      <enum>exerciser_load_type_em</enum>
      <sensorSet>Exerciser Schedule Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="exerciser_schedule_status_user_permission">
      <type>state</type>
      <sensorId>EXERCISER_SCHEDULE_STATUS_USER_PERMISSION</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 2 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>exerciser_schedule_status</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>User Can Set Load Exercises</label>
      <enum>yesno_em</enum>
      <sensorSet>Exerciser Schedule Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_3_status_exerciser_pending">
      <type>state</type>
      <sensorId>MX_3_EXERCISER_PENDING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 0 -->
            <bitwise_and>
              <op>
                <getOid>mx_3_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Exerciser Pending</label>
      <enum>yesno_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mx_3_status_exerciser_bypasses">
      <type>state</type>
      <sensorId>MX_3_EXERCISER_BYPASSED_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>mx_3_status</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Exerciser Bypassed</label>
      <enum>yesno_em</enum>
      <sensorSet>MX Status Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_A6_running_status">
      <type>state</type>
      <sensorId>TIMER_1_A6_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 2 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>A6/A62 Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_T_running_status">
      <type>state</type>
      <sensorId>TIMER_1_T_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 3 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>T Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_DT_running_status">
      <type>state</type>
      <sensorId>TIMER_1_DT_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 4 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>DT Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_T3_running_status">
      <type>state</type>
      <sensorId>TIMER_1_T3_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 5 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>T3/W3 Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_W_running_status">
      <type>state</type>
      <sensorId>TIMER_1_W_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 6 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>W Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="timer_1_DW_running_status">
      <type>state</type>
      <sensorId>TIMER_1_DW_RUNNING_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 7 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>timer_id_1</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>DW Timer Runnning</label>
      <enum>running_em</enum>
      <sensorSet>Timer Sensors</sensorSet>
    </stateSensor>

    <numSensor ruleid="t_timer_countdown">
      <type>timeinsecs</type>
      <sensorId>T_TIMER_COUNTDOWN_SECS</sensorId>
      <value>
          <getOid>t_timer_countdown</getOid>
      </value>
      <label>T/W Timer Countdown</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="t3_timer_countdown">
      <type>timeinsecs</type>
      <sensorId>T3_TIMER_COUNTDOWN_SECS</sensorId>
      <value>
          <getOid>t3_timer_countdown</getOid>
      </value>
      <label>T3/W3 Timer Countdown</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="a6_timer_countdown">
      <type>timeinsecs</type>
      <sensorId>A6_TIMER_COUNTDOWN_SECS</sensorId>
      <value>
          <getOid>a6_timer_countdown</getOid>
      </value>
      <label>A6/A62 Timer Countdown</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <stateSensor ruleid="r50_system_busy_status">
      <type>state</type>
      <sensorId>R50_SYSTEM_BUSY_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 0 -->
            <bitwise_and>
              <op>
                <getOid>system_busy_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>System Busy Due to R50</label>
      <enum>yesno_em</enum>
      <sensorSet>System Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="r50_system_ready_confirm_bypass_status">
      <type>state</type>
      <sensorId>R50_SYSTEM_READY_CONFIRM_BYPASS_STATUS</sensorId>
      <value>
        <mapValue mapid="bit_status_vm">
          <formatNumber>
            <!-- Determined by bit 1 -->
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>system_busy_status</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ready to Confirm Bypass R50</label>
      <enum>yesno_em</enum>
      <sensorSet>System Sensors</sensorSet>
    </stateSensor>

    <!-- Timer Type value map (Register Map Appendix A Table 1) -->
    <valueMap ruleid="timer_type_vm">
      <valueIn>0</valueIn><valueOut>1</valueOut>
      <valueIn>2</valueIn><valueOut>2</valueOut>
      <valueIn>3</valueIn><valueOut>3</valueOut>
      <valueIn>5</valueIn><valueOut>4</valueOut>
      <valueIn>6</valueIn><valueOut>5</valueOut>
      <valueIn>7</valueIn><valueOut>6</valueOut>
      <valueIn>*</valueIn><valueOut>0</valueOut>
    </valueMap>

    <!-- Timer Type Enums (Register Map Appendix A Table 1) -->
    <enumMap ruleid="timer_type_em">
      <label>Unknown</label>
      <label>U</label>
      <label>Y-T3,YN Bypassed</label>
      <label>T-T3,Unbypassed</label>
      <label>W-W3,YE Bypassed</label>
      <label>W-W3,Unbypassed</label>
      <label>P</label>
    </enumMap>

    <!-- Bit Status (0/1) value map -->
    <valueMap ruleid="bit_status_vm">
      <valueIn>0</valueIn><valueOut>0</valueOut>
      <valueIn>1</valueIn><valueOut>1</valueOut>
      <valueIn>*</valueIn><valueOut>0</valueOut>
    </valueMap>

    <!-- Controller Type value map -->
    <valueMap ruleid="controller_type_vm">
      <valueIn>0</valueIn><valueOut>MX200</valueOut>
      <valueIn>1</valueIn><valueOut>MX150/MX250</valueOut>
      <valueIn>*</valueIn><valueOut>MX150/MX250</valueOut>
    </valueMap>

    <!-- On/Off Enums -->
    <enumMap ruleid="onoff_em">
      <label>Off</label>
      <label>On</label>
    </enumMap>

    <!-- NotInAutoMode Enums -->
    <enumMap ruleid="notinauto_em">
      <label>Auto</label>
      <label>Not in Auto</label>
    </enumMap>

    <!-- Alarm Enums -->
    <enumMap ruleid="alarm_em">
      <label>Ok</label>
      <label>Alarm</label>
    </enumMap>

    <!-- Running Enums -->
    <enumMap ruleid="running_em">
      <label>Not Running</label>
      <label>Running</label>
    </enumMap>

    <!-- Available Enums -->
    <enumMap ruleid="available_em">
      <label>Not Available</label>
      <label>Available</label>
    </enumMap>

    <!-- Rotation Enums -->
    <enumMap ruleid="rotation_em">
      <label>Counter Clockwise</label>
      <label>Clockwise</label>
    </enumMap>

    <!-- Phase Enums -->
    <enumMap ruleid="phase_em">
      <label>One</label>
      <label>Three</label>
    </enumMap>

    <!-- In Position Enums -->
    <enumMap ruleid="position_em">
      <label>Not In Position</label>
      <label>In Position</label>
    </enumMap>

    <!-- ATS Type Enums -->
    <enumMap ruleid="ats_type_em">
      <label>Standard</label>
      <label>Delay</label>
    </enumMap>

    <!-- Exercisor Type -->
    <enumMap ruleid="exerciser_type_em">
      <label>Timer</label>
      <label>Clock</label>
    </enumMap>

    <!-- Exercisor Load Type -->
    <enumMap ruleid="exerciser_load_type_em">
      <label>No Load</label>
      <label>Load</label>
    </enumMap>

  </device>

  <protocol>
    <modbus>

      <value_ref_id valid="mx_0_status">
        <function>3</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="mx_1_status">
        <function>3</function>
        <start_addr>1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="mx_2_status">
        <function>3</function>
        <start_addr>2</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="timer_id_0">
        <function>3</function>
        <start_addr>3</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="timer_countdown_value">
        <function>3</function>
        <start_addr>4</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_voltage_phase_a_b">
        <function>3</function>
        <start_addr>5</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_voltage_phase_b_c">
        <function>3</function>
        <start_addr>6</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_voltage_phase_c_a">
        <function>3</function>
        <start_addr>7</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s2_voltage_phase_a_b">
        <function>3</function>
        <start_addr>8</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s2_voltage_phase_b_c">
        <function>3</function>
        <start_addr>9</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s2_voltage_phase_c_a">
        <function>3</function>
        <start_addr>10</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_frequency">
        <function>3</function>
        <start_addr>12</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s2_frequency">
        <function>3</function>
        <start_addr>14</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_total_transfers">
        <function>3</function>
        <start_addr>16</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="mx_0_network_config">
        <function>3</function>
        <start_addr>21</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="mx_2_network_config">
        <function>3</function>
        <start_addr>23</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s1_total_fails">
        <function>3</function>
        <start_addr>48</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="s2_total_transfers">
        <function>3</function>
        <start_addr>49</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="days_powered_up">
        <function>3</function>
        <start_addr>50</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="time_s1_available">
        <function>3</function>
        <start_addr>51</start_addr>
        <quantity>2</quantity>
        <type>uint_32</type>
      </value_ref_id>
      <value_ref_id valid="time_s2_available">
        <function>3</function>
        <start_addr>53</start_addr>
        <quantity>2</quantity>
        <type>uint_32</type>
      </value_ref_id>
      <value_ref_id valid="exerciser_schedule_status">
        <function>3</function>
        <start_addr>62</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="mx_3_status">
        <function>3</function>
        <start_addr>63</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="timer_id_1">
        <function>3</function>
        <start_addr>67</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="t_timer_countdown">
        <function>3</function>
        <start_addr>68</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="t3_timer_countdown">
        <function>3</function>
        <start_addr>69</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>      
      <value_ref_id valid="a6_timer_countdown">
        <function>3</function>
        <start_addr>70</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="system_busy_status">
        <function>3</function>
        <start_addr>110</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <!-- Buld read for performance   -->
      <packet>
        <function>3</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
      </packet>
      <packet>
        <function>3</function>
        <start_addr>48</start_addr>
        <quantity>7</quantity>
      </packet>
      <packet>
        <function>3</function>
        <start_addr>62</start_addr>
        <quantity>2</quantity>
      </packet>
      <packet>
        <function>3</function>
        <start_addr>67</start_addr>
        <quantity>4</quantity>
      </packet>
    </modbus>
  </protocol>
</APC_DDF>


