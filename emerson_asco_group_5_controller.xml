<?xml version="1.0" encoding="UTF-8"?>
<!-- Oleksiy O. Loktev spezialist@email.ua Date: 14.05.2014 -->

<!-- Test Modbus related information -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="emerson_asco_group_5_controller" ddfname="Emerson ASCO Group 5 Controller" ddfversion="6" canremove="no">
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="emerson_asco_group_5_controller">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

		<setDefaultLabel ruleid="labeldata">ASCO ATS<commSetting field="slaveaddress"/>(<sysHostname/>)</setDefaultLabel>

		<setProductData ruleid="vendordata" field="vendor">Emerson Electric</setProductData>
		<setProductData ruleid="modeldata" field="model">ASCO 4000 Series Automatic Transfer Switch</setProductData>
		<setProductData ruleid="typedata" field="type">Transfer Switch</setProductData>
		<!--		<setProductData ruleid="mac_addrdata" field="mac_addr">xx:xx:xx:xx:xx:xx</setProductData> -->
		<!--		<setProductData ruleid="appversiondata" field="appversion">myVersion</setProductData> -->
		<!--		<setProductData ruleid="serial_numdata" field="serial_num">myS/N</setProductData> -->

		<!--		<setLocationData ruleid="namedata" field="SYSNAME">myName</setLocationData> -->
		<!--		<setLocationData ruleid="locationdata" field="LOCATION">myLocation</setLocationData> -->
		<!--		<setLocationData ruleid="contactdata" field="CONTACT">myContact</setLocationData> -->
		<!--		<setLocationData ruleid="descdata" field="NOTES">myNotes</setLocationData> -->

		<normalCondition>
			<name>Online: No Alarms Present</name>
			<description>The device is operating normally.</description>
			<normalRecommendedActions>
				<recommendedActionId>No action required.</recommendedActionId>
			</normalRecommendedActions>
		</normalCondition>

		<valueMap ruleid="skip_missing_sensor">
			<valueIn>32767</valueIn>
			<valueOut>[false]</valueOut>
			<valueIn>*</valueIn>
			<valueOut>[true]</valueOut>
		</valueMap>

		<!-- Data Protocol 40001 for controller -->
		<numSensor ruleid="sensor_register_11">
			<type>num/phaseangle</type>
			<units>degreesAngle</units>
			<sensorId>id_register_11</sensorId>
			<value>
				<mult>
					<op>
						<getOid>register_11</getOid>
					</op>
					<op>.1</op>
				</mult>
			</value>
			<label>Phase shift between Normal and Emergency</label>
			<sensorSet>Operation Status</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_12">
			<type>frequency</type>
			<sensorId>id_register_12</sensorId>
			<value>
				<mult>
					<op>
						<getOid>register_12</getOid>
					</op>
					<op>.01</op>
				</mult>
			</value>
			<valueInc>.01</valueInc>
			<label>Normal frequency</label>
			<sensorSet>Normal source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_13">
			<type>frequency</type>
			<sensorId>id_register_13</sensorId>
			<value>
				<mult>
					<op>
						<getOid>register_13</getOid>
					</op>
					<op>.01</op>
				</mult>
			</value>
			<valueInc>.01</valueInc>
			<label>Emergency frequency</label>
			<sensorSet>Emergency source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_16">
			<type>voltage</type>
			<sensorId>id_register_16</sensorId>
			<value>
				<getOid>register_16</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Normal phase to phase voltage, U12</label>
			<sensorSet>Normal source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_17">
			<type>voltage</type>
			<sensorId>id_register_17</sensorId>
			<value>
				<getOid>register_17</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Normal phase to phase voltage, U23</label>
			<sensorSet>Normal source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_18">
			<type>voltage</type>
			<sensorId>id_register_18</sensorId>
			<value>
				<getOid>register_18</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Normal phase to phase voltage, U31</label>
			<sensorSet>Normal source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_19">
			<type>num</type>
			<units>percent</units>
			<sensorId>id_register_19</sensorId>
			<value>
				<getOid>register_19</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Normal voltage unbalance</label>
			<sensorSet>Normal source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_20">
			<type>voltage</type>
			<sensorId>id_register_20</sensorId>
			<value>
				<getOid>register_20</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Emergency phase to phase voltage, U12</label>
			<sensorSet>Emergency source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_21">
			<type>voltage</type>
			<sensorId>id_register_21</sensorId>
			<value>
				<getOid>register_21</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Emergency phase to phase voltage, U23</label>
			<sensorSet>Emergency source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_22">
			<type>voltage</type>
			<sensorId>id_register_22</sensorId>
			<value>
				<getOid>register_22</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Emergency phase to phase voltage, U31</label>
			<sensorSet>Emergency source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_23">
			<type>num</type>
			<units>percent</units>
			<sensorId>id_register_23</sensorId>
			<value>
				<getOid>register_23</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Emergency voltage unbalance</label>
			<sensorSet>Emergency source</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_41">
			<type>num</type>
			<sensorId>id_register_41</sensorId>
			<value>
				<getOid>register_41</getOid>
			</value>
			<valueInc>1</valueInc>
			<label>Control panel status state data</label>
			<sensorSet>Operation Status</sensorSet>
		</numSensor>

		<valueMap ruleid="inactive_active-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>*</valueIn>
			<valueOut>1</valueOut>
		</valueMap>
		<enumMap ruleid="inactive_active-em">
			<label>Not Activated</label>
			<label>Activated</label>
		</enumMap>
		<enumMap ruleid="deenergiz_energiz-em">
			<label>Not Energized</label>
			<label>Energized</label>
		</enumMap>
		<enumMap ruleid="no_yes-em">
			<label>No</label>
			<label>Yes</label>
		</enumMap>

		<!-- Data Protocol 40001 for controller -->
		<stateSensor ruleid="sensor_register_14_0">
			<type>state</type>
			<sensorId>id_register_14_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit0 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Main on Normal</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_14_1">
			<type>state</type>
			<sensorId>id_register_14_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit1 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Main on Emergency</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_14_2">
			<type>state</type>
			<sensorId>id_register_14_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit2 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Auxiliary on Normal</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_14_3">
			<type>state</type>
			<sensorId>id_register_14_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit3 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Auxiliary on Emergency</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_14_4">
			<type>state</type>
			<sensorId>id_register_14_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit4-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Normal source available</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_14_5">
			<type>state</type>
			<sensorId>id_register_14_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit5-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_14</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Emergency source available</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_15_0">
			<type>state</type>
			<sensorId>id_register_15_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit0-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_15</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Normal phase rotation is ABC</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_15_1">
			<type>state</type>
			<sensorId>id_register_15_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit1-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_15</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Normal phase rotation is CBA</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_15_2">
			<type>state</type>
			<sensorId>id_register_15_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit2-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_15</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Emergency phase rotation is ABC</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_15_3">
			<type>state</type>
			<sensorId>id_register_15_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit3-->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_15</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Emergency phase rotation is CBA</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_24">
			<type>state</type>
			<sensorId>id_register_24</sensorId>
			<value>
				<mapValue mapid="register_24-vm">
					<formatNumber>
						<getOid>register_24</getOid>
					</formatNumber>
				</mapValue>
			</value>
			<enum>register_24-em</enum>
			<label>Nominal voltage, V</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_24-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
		</valueMap>
		<enumMap ruleid="register_24-em">
			<label>115</label>
			<label>120</label>
			<label>208</label>
			<label>220</label>
			<label>230</label>
			<label>240</label>
			<label>277</label>
			<label>380</label>
			<label>400</label>
			<label>415</label>
			<label>440</label>
			<label>460</label>
			<label>480</label>
			<label>550</label>
			<label>575</label>
			<label>600</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_25_0">
			<type>state</type>
			<sensorId>id_register_25_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit0 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_25</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>nominal_frequency-em</enum>
			<label>Nominal frequency, Hz</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<enumMap ruleid="nominal_frequency-em">
			<label>50</label>
			<label>60</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_25_1">
			<type>state</type>
			<sensorId>id_register_25_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit1 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_25</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Normal source 3 phase sensing</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_25_2">
			<type>state</type>
			<sensorId>id_register_25_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit2 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_25</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Emergency source 3 phase sensing</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_25_34">
			<type>state</type>
			<sensorId>id_register_25_34</sensorId>
			<value>
				<mapValue mapid="transfer_switch_type-vm">
					<if>
						<op>
							<eq>
								<op>
									<mapValue mapid="inactive_active-vm">
										<formatNumber>
											<!-- Determined by bit3 -->
											<bitwise_and>
												<op>
													<right_shift>
														<op>
															<getOid>register_25</getOid>
														</op>
														<op>3</op>
													</right_shift>
												</op>
												<op>1</op>
											</bitwise_and>
										</formatNumber>
									</mapValue>
								</op>
								<op>0</op>
							</eq>
						</op>
						<op>
							<if>
								<op>
									<eq>
										<op>
											<mapValue mapid="inactive_active-vm">
												<formatNumber>
													<!-- Determined by bit4 -->
													<bitwise_and>
														<op>
															<right_shift>
																<op>
																	<getOid>register_25</getOid>
																</op>
																<op>4</op>
															</right_shift>
														</op>
														<op>1</op>
													</bitwise_and>
												</formatNumber>
											</mapValue>
										</op>
										<op>0</op>
									</eq>
								</op>
								<op>0</op>
								<op>1</op>
							</if>
						</op>
						<op>
							<if>
								<op>
									<eq>
										<op>
											<mapValue mapid="inactive_active-vm">
												<formatNumber>
													<!-- Determined by bit4 -->
													<bitwise_and>
														<op>
															<right_shift>
																<op>
																	<getOid>register_25</getOid>
																</op>
																<op>4</op>
															</right_shift>
														</op>
														<op>1</op>
													</bitwise_and>
												</formatNumber>
											</mapValue>
										</op>
										<op>0</op>
									</eq>
								</op>
								<op>2</op>
								<op>3</op>
							</if>
						</op>
					</if>
				</mapValue>
			</value>
			<enum>transfer_switch_type-em</enum>
			<label>Transfer switch type</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<valueMap ruleid="transfer_switch_type-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
		</valueMap>
		<enumMap ruleid="transfer_switch_type-em">
			<label>OTTS</label>
			<label>DTTS</label>
			<label>CTTS</label>
			<label>OTTS</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_25_5">
			<type>state</type>
			<sensorId>id_register_25_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit5 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_25</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Transfer switch bypass or not</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_25_6">
			<type>state</type>
			<sensorId>id_register_25_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit6 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_25</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Dual breaker or transfer switch</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_26">
			<type>state</type>
			<sensorId>id_register_26</sensorId>
			<value>
				<mapValue mapid="register_26-vm">
					<formatNumber>
						<getOid>register_26</getOid>
					</formatNumber>
				</mapValue>
			</value>
			<enum>register_26-em</enum>
			<label>Transfer switch Amp rating, A</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_26-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
		</valueMap>
		<enumMap ruleid="register_26-em">
			<label>30</label>
			<label>70</label>
			<label>100</label>
			<label>150</label>
			<label>260</label>
			<label>400</label>
			<label>600</label>
			<label>800</label>
			<label>1000</label>
			<label>1200</label>
			<label>1600</label>
			<label>2000</label>
			<label>3000</label>
			<label>4000</label>
			<label>Other</label>
			<label>Other</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_40">
			<type>state</type>
			<sensorId>id_register_40</sensorId>
			<value>
				<mapValue mapid="register_40-vm">
					<formatNumber>
						<getOid>register_40</getOid>
					</formatNumber>
				</mapValue>
			</value>
			<enum>register_40-em</enum>
			<label>Control panel state</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_40-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
			<valueIn>24</valueIn>
			<valueOut>24</valueOut>
			<valueIn>25</valueIn>
			<valueOut>25</valueOut>
			<valueIn>26</valueIn>
			<valueOut>26</valueOut>
			<valueIn>27</valueIn>
			<valueOut>27</valueOut>
			<valueIn>28</valueIn>
			<valueOut>28</valueOut>
			<valueIn>29</valueIn>
			<valueOut>29</valueOut>
			<valueIn>30</valueIn>
			<valueOut>30</valueOut>
			<valueIn>31</valueIn>
			<valueOut>31</valueOut>
			<valueIn>32</valueIn>
			<valueOut>32</valueOut>
			<valueIn>33</valueIn>
			<valueOut>33</valueOut>
			<valueIn>34</valueIn>
			<valueOut>34</valueOut>
			<valueIn>35</valueIn>
			<valueOut>35</valueOut>
			<valueIn>36</valueIn>
			<valueOut>36</valueOut>
			<valueIn>255</valueIn>
			<valueOut>37</valueOut>
		</valueMap>
		<enumMap ruleid="register_40-em">
			<label>
				Load on Normal, Normal ok.
				 Control panel status state data:
				 if 11C without load is running, then time left in minutes, else null.
			</label>
			<label>
				Timer 1C (TDES) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for Emergency acceptable.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Transfer to Emergency inhibited by F6Z.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Transfer to Emergency inhibited by F34B.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Timer 2B (TDNE) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Timer 31F (Normal to Emergency pre transfer signal) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				In phase monitor time delay (OTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in phase (OTTS Normal to Emergency transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				In phase monitor time delay with load shed (OTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in phase with load shed (OTTS Normal to Emergency transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				In sync monitor time delay (CTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in sync (CTTS Normal to Emergency transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				Sources paralleled (CTTS Normal to Emergency transfer).
				 Control panel status state data:
				 null.
			</label>
			<label>
				Load disconnected CT bypass (CTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Load disconnected (DTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Normal to Emergency load shed is active.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Timer 31M (Normal to Emergency post transfer signal) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Load on Emergency waiting for removal of transfer requests.
				 Control panel status state data:
				 if 11C with load is running, then time left in seconds else null.
			</label>
			<label>
				Timer 3A (TDEN) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Transfer to Normal inhibited by G6C.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Transfer to Normal inhibited by F34A.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Timer 31G (Emergency to Normal pre transfer signal) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				In phase monitor time delay (OTTS Emergency to Normal transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in phase (OTTS Emergency to Normal transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				In phase monitor time delay with load shed (OTTS Emergency to Normal transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in phase with load shed (OTTS Emergency to Normal transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				In sync monitor time delay (CTTS Emergency to Normal transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Waiting for in sync (CTTS Emergency to Normal transfer).
				 Control panel status state data:
				 phase difference in degrees x10.
			</label>
			<label>
				Sources paralleled (CTTS Emergency to Normal transfer).
				 Control panel status state data:
				 null.
			</label>
			<label>
				Load disconnected CT bypass (CTTS Emergency to Normal transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Load disconnected (DTTS Normal to Emergency transfer).
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Emergency to Normal load shed is active.
				 Control panel status state data:
				 null.
			</label>
			<label>
				Timer 31N (Emergency to Normal post transfer signal) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Timer 2E (TDEC) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Timer 1C (TDES) while timer 2E (TDEC) running.
				 Control panel status state data:
				 time left in seconds.
			</label>
			<label>
				Power up inhibit.
				 Control panel status state data:
				 1 if sources not acceptable, 2 if TS position unknown, 3 if transfer inhibit signal.
			</label>
			<label>
				Transition state (maintain last state).
				 Control panel status state data:
				 null.
			</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_42_0">
			<type>state</type>
			<sensorId>id_register_42_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit0 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Retransfer mode input: TD Bypass (Feature 6B)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_1">
			<type>state</type>
			<sensorId>id_register_42_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit1 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Retransfer mode input: Manual Re Xfer (Feature 6C)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_2">
			<type>state</type>
			<sensorId>id_register_42_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit2 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Test circuit is active (remote test) (Feature 17)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_4">
			<type>state</type>
			<sensorId>id_register_42_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit4 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature 29</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_5">
			<type>state</type>
			<sensorId>id_register_42_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit5 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature 30</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_6">
			<type>state</type>
			<sensorId>id_register_42_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit6 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Xfer to Normal inhibit (Feature 34A)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_42_7">
			<type>state</type>
			<sensorId>id_register_42_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit7 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_42</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Xfer to Emergency inhibit (Feature 34B)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_0">
			<type>state</type>
			<sensorId>id_register_43_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit0 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature 89</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_1">
			<type>state</type>
			<sensorId>id_register_43_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit1 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature Closed Transition Bypass</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_2">
			<type>state</type>
			<sensorId>id_register_43_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit2 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature Alarm reset</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_3">
			<type>state</type>
			<sensorId>id_register_43_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit3 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature 6D</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_4">
			<type>state</type>
			<sensorId>id_register_43_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit4 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Test or manual mode input: Test Operation (Feature 5)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_5">
			<type>state</type>
			<sensorId>id_register_43_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit5 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Test or manual mode input: Manual Operation (Feature 6Z)</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_43_6">
			<type>state</type>
			<sensorId>id_register_43_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit6 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_43</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Feature 34T</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_52">
			<type>state</type>
			<sensorId>id_register_52</sensorId>
			<value>
				<mapValue mapid="register_52-vm">
					<formatNumber>
						<getOid>register_52</getOid>
					</formatNumber>
				</mapValue>
			</value>
			<enum>register_52-em</enum>
			<label>Latest event type</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_52-vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>3</valueIn>
			<valueOut>2</valueOut>
			<valueIn>4</valueIn>
			<valueOut>3</valueOut>
			<valueIn>5</valueIn>
			<valueOut>4</valueOut>
			<valueIn>6</valueIn>
			<valueOut>5</valueOut>
			<valueIn>7</valueIn>
			<valueOut>6</valueOut>
			<valueIn>8</valueIn>
			<valueOut>7</valueOut>
			<valueIn>9</valueIn>
			<valueOut>8</valueOut>
			<valueIn>10</valueIn>
			<valueOut>9</valueOut>
			<valueIn>11</valueIn>
			<valueOut>10</valueOut>
		</valueMap>
		<enumMap ruleid="register_52-em">
			<label>Engine start</label>
			<label>Transfer Normal to Emergency</label>
			<label>Transfer Emergency to Normal</label>
			<label>Engine stop</label>
			<label>Emergency acceptable</label>
			<label>Emergency not acceptable</label>
			<label>Normal acceptable</label>
			<label>Normal not acceptable</label>
			<label>Transfer abort</label>
			<label>Breaker trip</label>
			<label>YY primary fail</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_53">
			<type>state</type>
			<sensorId>id_register_53</sensorId>
			<value>
				<mapValue mapid="register_53-vm">
					<formatNumber>
						<getOid>register_53</getOid>
					</formatNumber>
				</mapValue>
			</value>
			<enum>register_53-em</enum>
			<label>Latest event cause</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_53-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
		</valueMap>
		<enumMap ruleid="register_53-em">
			<label>No event</label>
			<label>Load shed</label>
			<label>Normal fail</label>
			<label>Manual transfer</label>
			<label>Test 5</label>
			<label>Test 17</label>
			<label>Communication</label>
			<label>Engine exerciser</label>
			<label>Emergency fail</label>
			<label>Normal under voltage</label>
			<label>Normal over voltage</label>
			<label>Normal under frequency</label>
			<label>Normal over frequency</label>
			<label>Normal phase rotation</label>
			<label>Normal voltage unbalanced</label>
			<label>Emergency under voltage</label>
			<label>Emergency over voltage</label>
			<label>Emergency under frequency</label>
			<label>Emergency over frequency</label>
			<label>Emergency phase rotation</label>
			<label>Emergency voltage unbalanced</label>
			<label>Feature 6</label>
			<label>Normal breaker</label>
			<label>Emergency breaker</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_100_01">
			<type>state</type>
			<sensorId>id_register_100_01</sensorId>
			<value>
				<mapValue mapid="soft_load_controller_mode-vm">
					<if>
						<op>
							<eq>
								<op>
									<mapValue mapid="inactive_active-vm">
										<formatNumber>
											<!-- Determined by bit0 -->
											<bitwise_and>
												<op>
													<right_shift>
														<op>
															<getOid>register_100</getOid>
														</op>
														<op>0</op>
													</right_shift>
												</op>
												<op>1</op>
											</bitwise_and>
										</formatNumber>
									</mapValue>
								</op>
								<op>0</op>
							</eq>
						</op>
						<op>
							<if>
								<op>
									<eq>
										<op>
											<mapValue mapid="inactive_active-vm">
												<formatNumber>
													<!-- Determined by bit1 -->
													<bitwise_and>
														<op>
															<right_shift>
																<op>
																	<getOid>register_100</getOid>
																</op>
																<op>1</op>
															</right_shift>
														</op>
														<op>1</op>
													</bitwise_and>
												</formatNumber>
											</mapValue>
										</op>
										<op>0</op>
									</eq>
								</op>
								<op>0</op>
								<op>1</op>
							</if>
						</op>
						<op>
							<if>
								<op>
									<eq>
										<op>
											<mapValue mapid="inactive_active-vm">
												<formatNumber>
													<!-- Determined by bit1 -->
													<bitwise_and>
														<op>
															<right_shift>
																<op>
																	<getOid>register_100</getOid>
																</op>
																<op>1</op>
															</right_shift>
														</op>
														<op>1</op>
													</bitwise_and>
												</formatNumber>
											</mapValue>
										</op>
										<op>0</op>
									</eq>
								</op>
								<op>2</op>
								<op>3</op>
							</if>
						</op>
					</if>
				</mapValue>
			</value>
			<enum>soft_load_controller_mode-em</enum>
			<label>Soft load controller mode</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<valueMap ruleid="soft_load_controller_mode-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
		</valueMap>
		<enumMap ruleid="soft_load_controller_mode-em">
			<label>No SLC</label>
			<label>Islanding</label>
			<label>Parallel base load</label>
			<label>Import/Export</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_100_6">
			<type>state</type>
			<sensorId>id_register_100_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit6 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_100</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>SLC Normal breaker status</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_100_7">
			<type>state</type>
			<sensorId>id_register_100_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
					<formatNumber>
						<!-- Determined by bit7 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>register_100</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>SLC Emergency breaker status</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>

		<!-- Data Protocol 40001 for controller -->
		<alarmFlags ruleid="alarm_register_15">
			<value>
				<getOid>register_15</getOid>
			</value>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>Engine exerciser with load active occurred.</activeText>
					<inactiveText>Engine exerciser with load active is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Engine exerciser with load active occurred.</activeText>
					<inactiveText>Engine exerciser with load active is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The engine exerciser is running the engine generator set with load (the transfer switch transfers the load to the generator).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Test circuit Feature 17 is active (remote test) occurred.</activeText>
					<inactiveText>Test circuit Feature 17 is active (remote test) is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Test circuit Feature 17 is active (remote test) occurred.</activeText>
					<inactiveText>Test circuit Feature 17 is active (remote test) is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						Test circuit Feature 17 is active (remote test).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_39">
			<value>
				<getOid>register_39</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Transfer switch locked out occurred.</activeText>
					<inactiveText>Transfer switch locked out is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Transfer switch locked out occurred.</activeText>
					<inactiveText>Transfer switch locked out is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						An error condition has occurred and the controller has locked out all further attempts to transfer the load.
						 Press the Alarm Reset pushbutton to clear this message.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>CTTS extended parallel alarm occurred.</activeText>
					<inactiveText>CTTS extended parallel alarm is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>CTTS extended parallel alarm occurred.</activeText>
					<inactiveText>CTTS extended parallel alarm is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The extended parallel time delay has expired, which indicates that the sources have been paralleled for longer than the specified extended parallel time.
						 Press the Alarm Reset pushbutton to clear this message.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>CTTS failure to synch alarm occurred.</activeText>
					<inactiveText>CTTS failure to synch alarm is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>CTTS failure to synch alarm occurred.</activeText>
					<inactiveText>CTTS failure to synch alarm is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The failure to synchronize time delay has expired. This alarm occurs when the sources fail to synchronize within the specified time.
						 Press the Alarm Reset pushbutton to clear this message.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>DTTS load disconnect occurred.</activeText>
					<inactiveText>DTTS load disconnect is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>DTTS load disconnect occurred.</activeText>
					<inactiveText>DTTS load disconnect is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The load is disconnected.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>External parameter lock is active occurred.</activeText>
					<inactiveText>External parameter lock is active is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>External parameter lock is active occurred.</activeText>
					<inactiveText>External parameter lock is active is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						External parameter lock is active.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Engine running occurred.</activeText>
					<inactiveText>Engine running is no longer exists.</inactiveText>
				</name>
				<severity>information</severity>
				<category>Power</category>
				<description>
					<activeText>Engine running occurred.</activeText>
					<inactiveText>Engine running is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						Engine running.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Normal breaker tripped occurred.</activeText>
					<inactiveText>Normal breaker tripped is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Normal breaker tripped occurred.</activeText>
					<inactiveText>Normal breaker tripped is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The Normal source is not acceptable.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Emergency breaker tripped occurred.</activeText>
					<inactiveText>Emergency breaker tripped is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Emergency breaker tripped occurred.</activeText>
					<inactiveText>Emergency breaker tripped is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The Emergency source is not acceptable.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
	</device>

	<protocol>
		<modbus>
			<!-- Data Protocol 40001 for controller -->
			<value_ref_id valid="register_11">
				<!-- Phase shift between Normal and Emergency, 0.1*degrees -->
				<function>3</function>
				<start_addr>11</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register_12">
				<!-- Normal frequency, 0.01*Hz -->
				<function>3</function>
				<start_addr>12</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_13">
				<!-- Emergency frequency, 0.01*Hz -->
				<function>3</function>
				<start_addr>13</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_14">
				<!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>14</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_15">
				<!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>15</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_16">
				<!-- Normal phase to phase voltage U12, V -->
				<function>3</function>
				<start_addr>16</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_17">
				<!-- Normal phase to phase voltage U23, V -->
				<function>3</function>
				<start_addr>17</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_18">
				<!-- Normal phase to phase voltage U31, V -->
				<function>3</function>
				<start_addr>18</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_19">
				<!-- Normal voltage unbalance, % -->
				<function>3</function>
				<start_addr>19</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_20">
				<!-- Emergency phase to phase voltage U12, V -->
				<function>3</function>
				<start_addr>20</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_21">
				<!-- Emergency phase to phase voltage U23, V -->
				<function>3</function>
				<start_addr>21</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_22">
				<!-- Emergency phase to phase voltage U31, V -->
				<function>3</function>
				<start_addr>22</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_23">
				<!-- Emergency voltage unbalance, % -->
				<function>3</function>
				<start_addr>23</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_24">
				<!-- Nominal voltage -->
				<function>3</function>
				<start_addr>24</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_25">
				<!-- Bit register for configuration -->
				<function>3</function>
				<start_addr>25</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_26">
				<!-- Transfer switch Amp rating -->
				<function>3</function>
				<start_addr>26</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_39">
				<!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>39</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_40">
				<!-- Control panel state -->
				<function>3</function>
				<start_addr>40</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_41">
				<!-- Control panel status state data -->
				<function>3</function>
				<start_addr>41</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_42">
				<!-- Bit register for configuration -->
				<function>3</function>
				<start_addr>42</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_43">
				<!-- Bit register for configuration -->
				<function>3</function>
				<start_addr>43</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_52">
				<!-- Latest event type -->
				<function>3</function>
				<start_addr>52</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_53">
				<!-- Latest event cause -->
				<function>3</function>
				<start_addr>53</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register_100">
				<!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>100</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<!-- Bulk read for performance. Modbus master must request a maximum of 12 holding registers from the ATS controller and 24 from the PM -->
			<packet>
				<function>3</function>
				<start_addr>11</start_addr>
				<quantity>5</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>16</start_addr>
				<quantity>5</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>21</start_addr>
				<quantity>6</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>39</start_addr>
				<quantity>5</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>52</start_addr>
				<quantity>2</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>100</start_addr>
				<quantity>1</quantity>
			</packet>
		</modbus>
	</protocol>
</APC_DDF>
