<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd" ddfid="IIE_STM20" ddfname="IIE STM20" ddfversion="1" canremove="yes">
  <schemaVersion>1.6</schemaVersion>
  <device deviceid="IIE_STM20">
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
    <setProductData ruleid="vendordata" field="vendor">IIE</setProductData>
    <setProductData ruleid="modeldata" field="model">STM 20</setProductData>
    <setProductData ruleid="typedata" field="type">UPS</setProductData>
    <setDefaultLabel ruleid="labeldata">
      <sysHostname />
      - Slave
      <commSetting field="slaveaddress" />
    </setDefaultLabel>
    <numSensor ruleid="i/p_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_I/P_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_1</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>I/p voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="i/p_fault_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_I/P_FAULT_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_2</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>I/p fault voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="o/p_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_O/P_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_3</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>O/p voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="o/p_current">
      <type>amperage</type>
      <units />
      <sensorId>_O/P_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_4</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>O/p current</label>
      <sensorSet>Ampere</sensorSet>
    </numSensor>
    <numSensor ruleid="i/p_frequency">
      <type>frequency</type>
      <units />
      <sensorId>_I/P_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_5</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>I/p frequency</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_voltage_a30006">
      <type>voltage</type>
      <units />
      <sensorId>_BATTERY_VOLTAGE_A30006</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_6</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery voltage_a30006</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="temperature">
      <type>temp</type>
      <units />
      <sensorId>_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_7</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="rating_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_RATING_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_11</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Rating voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="rating_current">
      <type>amperage</type>
      <units />
      <sensorId>_RATING_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_12</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Rating current</label>
      <sensorSet>Ampere</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_BATTERY_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_13</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="frequency">
      <type>frequency</type>
      <units />
      <sensorId>_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_4_Reg_14</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Frequency</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="test_for_specified_time_period">
      <type>timeinmin</type>
      <units />
      <sensorId>_TEST_FOR_SPECIFIED_TIME_PERIOD</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_3</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Test for specified time period</label>
      <sensorSet>Time</sensorSet>
    </numSensor>
    <numSensor ruleid="ups_shutdown_:_&lt;n&gt;_minute">
      <type>timeinmin</type>
      <units />
      <sensorId>_UPS_SHUTDOWN_:_&lt;N&gt;_MINUTE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_7</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Ups shutdown : &lt;n&gt; minute</label>
      <sensorSet>Time</sensorSet>
    </numSensor>
    <numSensor ruleid="_minute_waiting">
      <type>timeinmin</type>
      <units />
      <sensorId>__MINUTE_WAITING</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_9</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>minute waiting</label>
      <sensorSet>Time</sensorSet>
    </numSensor>
    <numSensor ruleid="_minute_then_turn_on">
      <type>timeinmin</type>
      <units />
      <sensorId>__MINUTE_THEN_TURN_ON</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_10</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>minute then turn on</label>
      <sensorSet>Time</sensorSet>
    </numSensor>
    <stateSensor ruleid="test_for_10_sec">
      <type>state</type>
      <sensorId>_TEST_FOR_10_SEC</sensorId>
      <value>
        <mapValue mapid="offon_vm">
          <getOid>Function_3_Reg_1</getOid>
        </mapValue>
      </value>
      <label>Test for 10 sec</label>
      <enum>offon_em</enum>
      <sensorSet>Generic</sensorSet>
    </stateSensor>
    <stateSensor ruleid="test_until_battery_low">
      <type>state</type>
      <sensorId>_TEST_UNTIL_BATTERY_LOW</sensorId>
      <value>
        <mapValue mapid="offon_vm">
          <getOid>Function_3_Reg_2</getOid>
        </mapValue>
      </value>
      <label>Test until battery low</label>
      <enum>offon_em</enum>
      <sensorSet>Generic</sensorSet>
    </stateSensor>
    <stateSensor ruleid="turn_on/off_beep_--_toggle_the_ups_beeper">
      <type>state</type>
      <sensorId>_TURN_ON/OFF_BEEP_--_TOGGLE_THE_UPS_BEEPER</sensorId>
      <value>
        <mapValue mapid="offon_vm">
          <getOid>Function_3_Reg_4</getOid>
        </mapValue>
      </value>
      <label>Turn on/off beep -- toggle the ups beeper</label>
      <enum>offon_em</enum>
      <sensorSet>Generic</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_test_cancel">
      <type>state</type>
      <sensorId>_UPS_TEST_CANCEL</sensorId>
      <value>
        <mapValue mapid="offon_vm">
          <getOid>Function_3_Reg_5</getOid>
        </mapValue>
      </value>
      <label>Ups test cancel</label>
      <enum>offon_em</enum>
      <sensorSet>Generic</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_shutdown_cancel">
      <type>state</type>
      <sensorId>_UPS_SHUTDOWN_CANCEL</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <getOid>Function_3_Reg_8</getOid>
        </mapValue>
      </value>
      <label>Ups shutdown cancel</label>
      <enum>n/a_em</enum>
      <sensorSet>Generic</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_7">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_7</sensorId>
      <value>
        <mapValue mapid="utilityfailoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 7</label>
      <enum>utilityfailoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_6">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_6</sensorId>
      <value>
        <mapValue mapid="batterylowoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 6</label>
      <enum>batterylowoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_5">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_5</sensorId>
      <value>
        <mapValue mapid="bypassoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 5</label>
      <enum>bypassoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_4">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_4</sensorId>
      <value>
        <mapValue mapid="upsfailedoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 4</label>
      <enum>upsfailedoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_3">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_3</sensorId>
      <value>
        <mapValue mapid="upstypeisstandbyoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 3</label>
      <enum>upstypeisstandbyoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_2">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_2</sensorId>
      <value>
        <mapValue mapid="testinprogressoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 2</label>
      <enum>testinprogressoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_1">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_1</sensorId>
      <value>
        <mapValue mapid="shutdownactiveoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 1</label>
      <enum>shutdownactiveoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ups_status_bit_0">
      <type>state</type>
      <sensorId>_UPS_STATUS_BIT_0</sensorId>
      <value>
        <mapValue mapid="beeperonoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_4_Reg_8</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups status_bit 0</label>
      <enum>beeperonoff_em</enum>
      <sensorSet>UPS Status</sensorSet>
    </stateSensor>
	
	<valueMap ruleid="utilityfailoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="utilityfailoff_em">
<label>UtilityFail</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="batterylowoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>

</valueMap>

<enumMap ruleid="batterylowoff_em">
<label>BatteryLow</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="bypassoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="bypassoff_em">
<label>Bypass</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="upsfailedoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="upsfailedoff_em">
<label>UPSFailed</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="upstypeisstandbyoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="upstypeisstandbyoff_em">
<label>UPSTypeisStandBy</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="testinprogressoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="testinprogressoff_em">
<label>TestinProgress</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="shutdownactiveoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="shutdownactiveoff_em">
<label>ShutdownActive</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="beeperonoff_vm">
<valueIn>1</valueIn>
			<valueOut>0</valueOut>
<valueIn>0</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="beeperonoff_em">
<label>BeeperOn</label>
<label>OFF</label>
</enumMap>

<valueMap ruleid="offon_vm">
<valueIn>0</valueIn>
			<valueOut>0</valueOut>
<valueIn>1</valueIn>
			<valueOut>1</valueOut>
<valueIn>*</valueIn>
		<valueOut>0</valueOut>
</valueMap>

<enumMap ruleid="offon_em">
<label>OFF</label>
<label>ON</label>
</enumMap>

	
	
  </device>
  <protocol>
    <modbus>
      <value_ref_id valid="Function_4_Reg_8">
        <function>4</function>
        <start_addr>7</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_12">
        <function>4</function>
        <start_addr>11</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_9">
        <function>3</function>
        <start_addr>8</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_2">
        <function>4</function>
        <start_addr>1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_14">
        <function>4</function>
        <start_addr>13</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_3">
        <function>3</function>
        <start_addr>2</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_4">
        <function>3</function>
        <start_addr>3</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_4">
        <function>4</function>
        <start_addr>3</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_3">
        <function>4</function>
        <start_addr>2</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_5">
        <function>3</function>
        <start_addr>4</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_7">
        <function>3</function>
        <start_addr>6</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_1">
        <function>4</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_5">
        <function>4</function>
        <start_addr>4</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_11">
        <function>4</function>
        <start_addr>10</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_6">
        <function>4</function>
        <start_addr>5</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_2">
        <function>3</function>
        <start_addr>1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_8">
        <function>3</function>
        <start_addr>7</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_7">
        <function>4</function>
        <start_addr>6</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1">
        <function>3</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_4_Reg_13">
        <function>4</function>
        <start_addr>12</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_10">
        <function>3</function>
        <start_addr>9</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
    </modbus>
  </protocol>
</APC_DDF>
