<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="rle_fds_pc_template"
	ddfname="RLE FDS-PC (Template)"
	ddfversion="1"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="rle_fds_pc_template">
	
		<!-- 					REMOVE COMMENTS BEFORE SUBMITTING FINISHED DDF
			NOTE: 
			THIS DDF IS A TEMPLATE. This device is a protocol converter. Each DDF request will 
			differ from one another. Be sure to acquire a walk and register map for each request 
			to assure that sensors get the appropriate unit types and scaling.
			
			===================================================================================
			
			NOTE:
			Because all requests for this device will fall under the custom category, be sure to 
			change the ddfid and ddfname to reflect which device is being converted and give it 
			it's own folder named after the Zendesk ticket starting with "Z" and the ticket # 
			appended. 
			
				Example:
			
				ddfid="rle_fds_pc_masterpact_mtz"
				ddfname="Schneider Electric Masterpact MTZ (RLE FDS-PC)"
				
				(snmp\custom\Z#####\rle_fds_pc_masterpact_mtz.xml) 
				
			Also, make sure that setProductData fields represent the device being converted and
			not the converter itself. 
		-->
	
        <suppressRule ruleid="suppresscorevendordata" suppressid="core/mib2data/vendordata"/>
        <suppressRule ruleid="suppresscoremodeldata" suppressid="core/mib2data/modeldata"/>
        <suppressRule ruleid="suppresscoretypedata" suppressid="core/mib2data/typedata"/>

		<setProductData ruleid="vendordata" field="vendor"></setProductData>
		<setProductData ruleid="modeldata" field="model"></setProductData>
		<setProductData ruleid="typedata" field="type"></setProductData>

		<oidMustExist ruleid="rle_fds_pc" istree="yes" oid=".1.3.6.1.4.1.3184.1.10.3"/> 
		
		<!-- 					REMOVE COMMENTS BEFORE SUBMITTING FINISHED DDF
			NOTE: 
			Below are some generic sensor/alarm templates. Seeing as these DDF's are going to be done
			on a per-customer/per-device basis, sensor structure is going to differ for each 
			request. You will want to check the walk and register map to determine the best course
			of action.
		-->
		
		<numSensor ruleid="numSensTemplate">
            <type>num</type>
            <sensorId>NUM_SENS_TEMPLATE</sensorId>
            <value>
                <getOid>.1.3.6.1.4.1.3184...</getOid>
            </value>
            <label><getOid>.1.3.6.1.4.1.3184...</getOid></label>
            <sensorSet>Number Sensors</sensorSet>
        </numSensor>

		<stateSensor ruleid="stSensTemplate">
            <type>state</type>
            <sensorId>ST_SENS_TEMPLATE</sensorId>
            <value>
                <getOid>.1.3.6.1.4.1.3184...</getOid>
            </value>
            <label><getOid>.1.3.6.1.4.1.3184...</getOid></label>
            <enum>state-em</enum>
            <sensorSet>System Status</sensorSet>
        </stateSensor>

		<valueMap ruleid="state-vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="state-em">
			<label>Off</label>
			<label>On</label>
		</enumMap>

		<alarmFlags ruleid="alarmTemplate">
			<value><getOid>.1.3.6.1.4.1.3184...</getOid></value>
			<alarmFlagsTest match="1">
				<name>
					<activeText>Generic Alarm</activeText>
					<inactiveText>Generic Alarm Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Generic Alarm condition exists.</activeText>
					<inactiveText>A Generic Alarm condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
	</device>
</APC_DDF>