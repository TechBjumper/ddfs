<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="apc_smartups_microlink"
	ddfname="APC SmartUPS (Microlink)"
	ddfversion="3"
	canremove="yes">
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="Smartups_MicrolinkModbus">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
		<setProductData ruleid="vendordata" field="vendor">APC</setProductData>
		<setProductData ruleid="modeldata" field="model">SmartUPS (Microlink)</setProductData>
		<setProductData ruleid="typedata" field="type">UPS</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname />
      - Slave
			<commSetting field="slaveaddress" />
		</setDefaultLabel>
		<numSensor ruleid="stateofcharge_pct">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_STATEOFCHARGE_PCT</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_131</getOid>
					</op>
					<op>512</op>
				</div>
			</value>
			<label>Stateofcharge_pct</label>
			<sensorSet>Battery Percentage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery._positive.voltagedc">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY._POSITIVE.VOLTAGEDC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_132</getOid>
					</op>
					<op>32</op>
				</div>
			</value>
			<label>Battery. positive.voltagedc</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery.negative.voltagedc">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY.NEGATIVE.VOLTAGEDC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_133</getOid>
					</op>
					<op>32</op>
				</div>
			</value>
			<label>Battery.negative.voltagedc</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery.date">
			<type>num</type>
			<units />
			<sensorId>_BATTERY.DATE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_134</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery.date</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="battery.temperature">
			<type>temp</type>
			<units />
			<sensorId>_BATTERY.TEMPERATURE</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_136</getOid>
					</op>
					<op>256</op>
				</div>
			</value>
			<label>Battery.temperature</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="output[0].realpower_pct">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_OUTPUT[0].REALPOWER_PCT</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_137</getOid>
					</op>
					<op>256</op>
				</div>
			</value>
			<label>Output[0].realpower_pct</label>
			<sensorSet>Power Percentage</sensorSet>
		</numSensor>
		<numSensor ruleid="output[1].realpower_pct">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_OUTPUT[1].REALPOWER_PCT</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_138</getOid>
					</op>
					<op>256</op>
				</div>
			</value>
			<label>Output[1].realpower_pct</label>
			<sensorSet>Power Percentage</sensorSet>
		</numSensor>
		<numSensor ruleid="output[0].apparentpower_pct">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_OUTPUT[0].APPARENTPOWER_PCT</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_139</getOid>
					</op>
					<op>256</op>
				</div>
			</value>
			<label>Output[0].apparentpower_pct</label>
			<sensorSet>Power Percentage</sensorSet>
		</numSensor>
		<numSensor ruleid="output[1].apparentpower_pct">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_OUTPUT[1].APPARENTPOWER_PCT</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_140</getOid>
					</op>
					<op>32</op>
				</div>
			</value>
			<label>Output[1].apparentpower_pct</label>
			<sensorSet>Power Percentage</sensorSet>
		</numSensor>
		<numSensor ruleid="output[0].currentac">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT[0].CURRENTAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_141</getOid>
					</op>
					<op>32</op>
				</div>
			</value>
			<label>Output[0].currentac</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="output[1].currentac">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT[1].CURRENTAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_142</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Output[1].currentac</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="output[0].voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT[0].VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_143</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Output[0].voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output[1].voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT[1].VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_144</getOid>
					</op>
					<op>128</op>
				</div>
			</value>
			<label>Output[1].voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output.frequency">
			<type>frequency</type>
			<units />
			<sensorId>_OUTPUT.FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_145</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass.voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS.VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_149</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Bypass.voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass.frequency">
			<type>frequency</type>
			<units />
			<sensorId>_BYPASS.FREQUENCY</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_150</getOid>
					</op>
					<op>128</op>
				</div>
			</value>
			<label>Bypass.frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="input[0].voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_INPUT[0].VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_152</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Input[0].voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="input[1].voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_INPUT[1].VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_153</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Input[1].voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="input[2].voltageac">
			<type>voltage</type>
			<units />
			<sensorId>_INPUT[2].VOLTAGEAC</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_154</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Input[2].voltageac</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.turnoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_MOG.TURNOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_156</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.turnoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.turnoncountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_MOG.TURNONCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_157</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.turnoncountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].t_urnoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[0].T_URNOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_160</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].t urnoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].t_urnoncountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[0].T_URNONCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_161</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].t urnoncountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].turnoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[1].TURNOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_164</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].turnoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].turnoncountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[1].TURNONCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_165</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].turnoncountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2].t_urnoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[2].T_URNOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_168</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2].t urnoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2].t_urnoncountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[2].T_URNONCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_169</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2].t urnoncountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="output.apparentpowerrating">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT.APPARENTPOWERRATING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_589</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.apparentpowerrating</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="output.realpowerrating">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT.REALPOWERRATING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_590</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.realpowerrating</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="date">
			<type>num</type>
			<units />
			<sensorId>_DATE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_592</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Date</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="battery._datesetting">
			<type>num</type>
			<units />
			<sensorId>_BATTERY._DATESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_596</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery. datesetting</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="output.upperacceptablevoltagesetting">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT.UPPERACCEPTABLEVOLTAGESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1027</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.upperacceptablevoltagesetting</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output.loweracceptablevoltagesetting">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT.LOWERACCEPTABLEVOLTAGESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1028</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.loweracceptablevoltagesetting</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mogt_urnoffcountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_MOGT_URNOFFCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1030</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mogt urnoffcountdownsetting_en</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="mogt_urnoncountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_MOGT_URNONCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1031</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mogt urnoncountdownsetting_en</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.minimumreturnruntimesetting">
			<type>num</type>
			<units />
			<sensorId>_MOG.MINIMUMRETURNRUNTIMESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1034</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.minimumreturnruntimesetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0]turnoffcountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[0]TURNOFFCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1035</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0]turnoffcountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0]turnoncountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[0]TURNONCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1036</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0]turnoncountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].minimumreturnruntimesetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[0].MINIMUMRETURNRUNTIMESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1039</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].minimumreturnruntimesetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1]turnoffcountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[1]TURNOFFCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1040</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1]turnoffcountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1]turnoncountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[1]TURNONCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1041</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1]turnoncountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].minimumreturnruntimesetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[1].MINIMUMRETURNRUNTIMESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1044</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].minimumreturnruntimesetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2]turnoffcountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[2]TURNOFFCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1045</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2]turnoffcountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2]turnoncountdownsetting_en">
			<type>num</type>
			<units />
			<sensorId>_SOG[2]TURNONCOUNTDOWNSETTING_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1046</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2]turnoncountdownsetting_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2].minimumreturnruntimesetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[2].MINIMUMRETURNRUNTIMESETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1049</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2].minimumreturnruntimesetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].loadshedruntimeremainingsetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[0].LOADSHEDRUNTIMEREMAININGSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1065</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].loadshedruntimeremainingsetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].loadshedruntimeremainingsetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[1].LOADSHEDRUNTIMEREMAININGSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1066</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].loadshedruntimeremainingsetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2].loadshedruntimeremainingsetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[2].LOADSHEDRUNTIMEREMAININGSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1067</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2].loadshedruntimeremainingsetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].power2:loadshedtimeonbatterysetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[0].POWER2:LOADSHEDTIMEONBATTERYSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1069</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].power2:loadshedtimeonbatterysetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].power2:loadshedtimeonbatterysetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[1].POWER2:LOADSHEDTIMEONBATTERYSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1070</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].power2:loadshedtimeonbatterysetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2]._power2:_loadshedti_m_eonbatterysetting">
			<type>num</type>
			<units />
			<sensorId>_SOG[2]._POWER2:_LOADSHEDTI_M_EONBATTERYSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1071</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2]. power2: loadshedti m eonbatterysetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.loadshedruntimeremainingsetting">
			<type>num</type>
			<units />
			<sensorId>_MOG.LOADSHEDRUNTIMEREMAININGSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1073</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.loadshedruntimeremainingsetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.power2:loadshedtimeonbatterysetting">
			<type>num</type>
			<units />
			<sensorId>_MOG.POWER2:LOADSHEDTIMEONBATTERYSETTING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1074</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.power2:loadshedtimeonbatterysetting</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="test2bnumber1">
			<type>num</type>
			<units />
			<sensorId>_TEST2BNUMBER1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_2059</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Test2bnumber1</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="test2bnumber2">
			<type>num</type>
			<units />
			<sensorId>_TEST2BNUMBER2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_2060</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Test2bnumber2</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="testbpinumber1">
			<type>num</type>
			<units />
			<sensorId>_TESTBPINUMBER1</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_2061</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Testbpinumber1</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="testbpinumber2">
			<type>num</type>
			<units />
			<sensorId>_TESTBPINUMBER2</sensorId>
			<value>
				<div>
					<op>
						<getOid>Function_3_Reg_2062</getOid>
					</op>
					<op>64</op>
				</div>
			</value>
			<label>Testbpinumber2</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="run_time_remaining">
			<type>timeinsec</type>
			<units />
			<sensorId>_RUN_TIME_REMAINING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_129</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Run time remaining</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="output.energy">
			<type>num</type>
			<units>watthours</units>
			<sensorId>_OUTPUT.ENERGY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_146</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output.energy</label>
			<sensorSet>Watts</sensorSet>
		</numSensor>
		<numSensor ruleid="mog.stayoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_MOG.STAYOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_158</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mog.stayoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0].stayoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[0].STAYOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_162</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0].stayoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1].stayoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[1].STAYOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_166</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1].stayoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2].stayoffcountdown_en">
			<type>timeinsec</type>
			<units />
			<sensorId>_SOG[2].STAYOFFCOUNTDOWN_EN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_170</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2].stayoffcountdown_en</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="mogstayoffcountdownsetting_4b">
			<type>num</type>
			<units />
			<sensorId>_MOGSTAYOFFCOUNTDOWNSETTING_4B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1032</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mogstayoffcountdownsetting_4b</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[0]stayoffcountdownsetting_4b">
			<type>num</type>
			<units />
			<sensorId>_SOG[0]STAYOFFCOUNTDOWNSETTING_4B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1037</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[0]stayoffcountdownsetting_4b</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[1]stayoffcountdownsetting_4b">
			<type>num</type>
			<units />
			<sensorId>_SOG[1]STAYOFFCOUNTDOWNSETTING_4B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1042</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[1]stayoffcountdownsetting_4b</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="sog[2]stayoffcountdownsetting_4b">
			<type>num</type>
			<units />
			<sensorId>_SOG[2]STAYOFFCOUNTDOWNSETTING_4B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_1047</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sog[2]stayoffcountdownsetting_4b</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="test4bnumber1">
			<type>num</type>
			<units />
			<sensorId>_TEST4BNUMBER1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_2055</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Test4bnumber1</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<numSensor ruleid="test4bnumber2">
			<type>num</type>
			<units />
			<sensorId>_TEST4BNUMBER2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_2057</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Test4bnumber2</label>
			<sensorSet>No Unit</sensorSet>
		</numSensor>
		<stateSensor ruleid="upsstatuschangecause_en">
			<type>state</type>
			<sensorId>_UPSSTATUSCHANGECAUSE_EN</sensorId>
			<value>
				<mapValue mapid="upsstatuschangecause_en_vm">
					<getOid>Function_3_Reg_3</getOid>
				</mapValue>
			</value>
			<label>Upsstatuschangecause_en</label>
			<enum>upsstatuschangecause_en_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input_efficiency_e_n">
			<type>state</type>
			<sensorId>_INPUT_EFFICIENCY_E_N</sensorId>
			<value>
				<mapValue mapid="input_efficiency_e_n_vm">
					<getOid>Function_3_Reg_155</getOid>
				</mapValue>
			</value>
			<label>Input_efficiency_e n</label>
			<enum>input_efficiency_e_n_em</enum>
			<sensorSet>Input_Efficiency_E N</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog_present">
			<type>state</type>
			<sensorId>_MOG_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_591</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog present</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOGRelayConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog_0_present">
			<type>state</type>
			<sensorId>_SOG_0_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_591</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog 0 present</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOGRelayConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog_1_present">
			<type>state</type>
			<sensorId>_SOG_1_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_591</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog 1 present</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOGRelayConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog_2_present">
			<type>state</type>
			<sensorId>_SOG_2_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_591</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog 2 present</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOGRelayConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog_3_present">
			<type>state</type>
			<sensorId>_SOG_3_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_591</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog 3 present</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOGRelayConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outputvoltageacsetting_bf">
			<type>state</type>
			<sensorId>_OUTPUTVOLTAGEACSETTING_BF</sensorId>
			<value>
				<mapValue mapid="outputvoltageacsetting_bf_vm">
					<getOid>Function_3_Reg_645</getOid>
				</mapValue>
			</value>
			<label>Outputvoltageacsetting_bf</label>
			<enum>outputvoltageacsetting_bf_em</enum>
			<sensorSet>OutputVoltageACSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outputacceptablefrequencysetting_bf">
			<type>state</type>
			<sensorId>_OUTPUTACCEPTABLEFREQUENCYSETTING_BF</sensorId>
			<value>
				<mapValue mapid="outputacceptablefrequencysetting_bf_vm">
					<getOid>Function_3_Reg_594</getOid>
				</mapValue>
			</value>
			<label>Outputacceptablefrequencysetting_bf</label>
			<enum>outputacceptablefrequencysetting_bf_em</enum>
			<sensorSet>OutputAcceptableFrequencySetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batteryt_esti_ntervalsetting_bf">
			<type>state</type>
			<sensorId>_BATTERYT_ESTI_NTERVALSETTING_BF</sensorId>
			<value>
				<mapValue mapid="batterytestintervalsetting_bf_vm">
					<getOid>Function_3_Reg_1025</getOid>
				</mapValue>
			</value>
			<label>Batteryt esti ntervalsetting_bf</label>
			<enum>batterytestintervalsetting_bf_em</enum>
			<sensorSet>BatteryTestIntervalSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="output_sensitivitysetting_bf">
			<type>state</type>
			<sensorId>_OUTPUT_SENSITIVITYSETTING_BF</sensorId>
			<value>
				<mapValue mapid="output_sensitivitysetting_bf_vm">
					<getOid>Function_3_Reg_1029</getOid>
				</mapValue>
			</value>
			<label>Output_sensitivitysetting_bf</label>
			<enum>output_sensitivitysetting_bf_em</enum>
			<sensorSet>Output_SensitivitySetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="simplesignalingcommand_bf">
			<type>state</type>
			<sensorId>_SIMPLESIGNALINGCOMMAND_BF</sensorId>
			<value>
				<mapValue mapid="simplesignalingcommand_bf_vm">
					<getOid>Function_3_Reg_1541</getOid>
				</mapValue>
			</value>
			<label>Simplesignalingcommand_bf</label>
			<enum>simplesignalingcommand_bf_em</enum>
			<sensorSet>SimpleSignalingCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatterytestcommand_bf">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTCOMMAND_BF</sensorId>
			<value>
				<mapValue mapid="replacebatterytestcommand_bf_vm">
					<getOid>Function_3_Reg_1542</getOid>
				</mapValue>
			</value>
			<label>Replacebatterytestcommand_bf</label>
			<enum>replacebatterytestcommand_bf_em</enum>
			<sensorSet>ReplaceBatteryTestCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationcommand_bf">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONCOMMAND_BF</sensorId>
			<value>
				<mapValue mapid="runtimecalibrationcommand_bf_vm">
					<getOid>Function_3_Reg_1543</getOid>
				</mapValue>
			</value>
			<label>Runtimecalibrationcommand_bf</label>
			<enum>runtimecalibrationcommand_bf_em</enum>
			<sensorSet>RunTimeCalibrationCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="userinterfacecommand_bf">
			<type>state</type>
			<sensorId>_USERINTERFACECOMMAND_BF</sensorId>
			<value>
				<mapValue mapid="userinterfacecommand_bf_vm">
					<getOid>Function_3_Reg_1544</getOid>
				</mapValue>
			</value>
			<label>Userinterfacecommand_bf</label>
			<enum>userinterfacecommand_bf_em</enum>
			<sensorSet>UserInterfaceCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog_loadshedconfigsetting_bf">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG_LOADSHEDCONFIGSETTING_BF</sensorId>
			<value>
				<mapValue mapid="mog_loadshedconfigsetting_bf_vm">
					<getOid>Function_3_Reg_1055</getOid>
				</mapValue>
			</value>
			<label>Mog_loadshedconfigsetting_bf</label>
			<enum>mog_loadshedconfigsetting_bf_em</enum>
			<sensorSet>MOG_LoadShedConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0]_loadshedconfigsetting_bf">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0]_LOADSHEDCONFIGSETTING_BF</sensorId>
			<value>
				<mapValue mapid="mog_loadshedconfigsetting_bf_vm">
					<getOid>Function_3_Reg_1057</getOid>
				</mapValue>
			</value>
			<label>Sog[0]_loadshedconfigsetting_bf</label>
			<enum>mog_loadshedconfigsetting_bf_em</enum>
			<sensorSet>SOG[0]_LoadShedConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1]_loadshedconfigsetting_bf">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1]_LOADSHEDCONFIGSETTING_BF</sensorId>
			<value>
				<mapValue mapid="mog_loadshedconfigsetting_bf_vm">
					<getOid>Function_3_Reg_1059</getOid>
				</mapValue>
			</value>
			<label>Sog[1]_loadshedconfigsetting_bf</label>
			<enum>mog_loadshedconfigsetting_bf_em</enum>
			<sensorSet>SOG[1]_LoadShedConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2]_loadshedconfigsetting_bf">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2]_LOADSHEDCONFIGSETTING_BF</sensorId>
			<value>
				<mapValue mapid="mog_loadshedconfigsetting_bf_vm">
					<getOid>Function_3_Reg_1061</getOid>
				</mapValue>
			</value>
			<label>Sog[2]_loadshedconfigsetting_bf</label>
			<enum>mog_loadshedconfigsetting_bf_em</enum>
			<sensorSet>SOG[2]_LoadShedConfigSetting_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="upscommand_bf">
			<type>state</type>
			<sensorId>_UPSCOMMAND_BF</sensorId>
			<value>
				<mapValue mapid="upscommand_bf_vm">
					<getOid>Function_3_Reg_1537</getOid>
				</mapValue>
			</value>
			<label>Upscommand_bf</label>
			<enum>upscommand_bf_em</enum>
			<sensorSet>UPSCommand_BF</sensorSet>
		</stateSensor>
		<stringSensor ruleid="modbusmapid">
			<type>string</type>
			<units />
			<sensorId>_MODBUSMAPID</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_2049</getOid>
				</op>
			</value>
			<label>Modbusmapid</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="teststring">
			<type>string</type>
			<units />
			<sensorId>_TESTSTRING</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_2051</getOid>
				</op>
			</value>
			<label>Teststring</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="fwversion_str">
			<type>string</type>
			<units />
			<sensorId>_FWVERSION_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_517</getOid>
				</op>
			</value>
			<label>Fwversion_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="serialnumber_str">
			<type>string</type>
			<units />
			<sensorId>_SERIALNUMBER_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_565</getOid>
				</op>
			</value>
			<label>Serialnumber_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="battery.sku_str">
			<type>string</type>
			<units />
			<sensorId>_BATTERY.SKU_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_573</getOid>
				</op>
			</value>
			<label>Battery.sku_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="battery._externalbattery._sku_str">
			<type>string</type>
			<units />
			<sensorId>_BATTERY._EXTERNALBATTERY._SKU_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_581</getOid>
				</op>
			</value>
			<label>Battery. externalbattery. sku_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="name_str">
			<type>string</type>
			<units />
			<sensorId>_NAME_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_597</getOid>
				</op>
			</value>
			<label>Name_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="mog.name_str">
			<type>string</type>
			<units />
			<sensorId>_MOG.NAME_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_605</getOid>
				</op>
			</value>
			<label>Mog.name_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="sog[0].name_str">
			<type>string</type>
			<units />
			<sensorId>_SOG[0].NAME_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_613</getOid>
				</op>
			</value>
			<label>Sog[0].name_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="sog[1].name_str">
			<type>string</type>
			<units />
			<sensorId>_SOG[1].NAME_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_621</getOid>
				</op>
			</value>
			<label>Sog[1].name_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="sog[2].name_str">
			<type>string</type>
			<units />
			<sensorId>_SOG[2].NAME_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_629</getOid>
				</op>
			</value>
			<label>Sog[2].name_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="model_str">
			<type>string</type>
			<units />
			<sensorId>_MODEL_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_533</getOid>
				</op>
			</value>
			<label>Model_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stringSensor ruleid="sku_str">
			<type>string</type>
			<units />
			<sensorId>_SKU_STR</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_549</getOid>
				</op>
			</value>
			<label>Sku_str</label>
			<sensorSet>Device Info</sensorSet>
		</stringSensor>
		<stateSensor ruleid="mog.outletstatus_bf_stateon_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_STATEON_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf stateon state</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_stateoff_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_STATEOFF_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf stateoff state</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_processreboot_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PROCESSREBOOT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf processreboot modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_processshutdown_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PROCESSSHUTDOWN_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf processshutdown modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_processsleep_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PROCESSSLEEP_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf processsleep modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_pendingloadshed_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PENDINGLOADSHED_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf pendingloadshed modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_pendingondelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PENDINGONDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf pendingondelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_pendingoffdelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PENDINGOFFDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf pendingoffdelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_pendingonacpresence_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PENDINGONACPRESENCE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf pendingonacpresence modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_pendingonminruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_PENDINGONMINRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf pendingonminruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_membergroupprocess1_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_MEMBERGROUPPROCESS1_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf membergroupprocess1 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_membergroupprocess2_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_MEMBERGROUPPROCESS2_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf membergroupprocess2 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mog.outletstatus_bf_lowruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>0</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_MOG.OUTLETSTATUS_BF_LOWRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mog.outletstatus_bf lowruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>MOG.OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_stateon_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_STATEON_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf stateon state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_stateoff_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_STATEOFF_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf stateoff state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_processreboot_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PROCESSREBOOT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf processreboot modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_processshutdown_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PROCESSSHUTDOWN_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf processshutdown modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_processsleep_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PROCESSSLEEP_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf processsleep modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_pendingloadshed_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PENDINGLOADSHED_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf pendingloadshed modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_pendingondelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PENDINGONDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf pendingondelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_pendingoffdelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PENDINGOFFDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf pendingoffdelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_pendingonacpresence_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PENDINGONACPRESENCE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf pendingonacpresence modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_pendingonminruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_PENDINGONMINRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf pendingonminruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_membergroupprocess1_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_MEMBERGROUPPROCESS1_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf membergroupprocess1 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_membergroupprocess2_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_MEMBERGROUPPROCESS2_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf membergroupprocess2 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[0].outletstatus_bf_lowruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>1</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[0].OUTLETSTATUS_BF_LOWRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_7</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[0].outletstatus_bf lowruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[0].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_stateon_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_STATEON_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf stateon state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_stateoff_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_STATEOFF_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf stateoff state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_processreboot_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PROCESSREBOOT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf processreboot modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_processshutdown_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PROCESSSHUTDOWN_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf processshutdown modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_processsleep_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PROCESSSLEEP_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf processsleep modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_pendingloadshed_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PENDINGLOADSHED_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf pendingloadshed modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_pendingondelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PENDINGONDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf pendingondelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_pendingoffdelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PENDINGOFFDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf pendingoffdelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_pendingonacpresence_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PENDINGONACPRESENCE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf pendingonacpresence modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_pendingonminruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_PENDINGONMINRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf pendingonminruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_membergroupprocess1_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_MEMBERGROUPPROCESS1_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf membergroupprocess1 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_membergroupprocess2_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_MEMBERGROUPPROCESS2_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf membergroupprocess2 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[1].outletstatus_bf_lowruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>2</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[1].OUTLETSTATUS_BF_LOWRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_10</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[1].outletstatus_bf lowruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[1].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_stateon_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_STATEON_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf stateon state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_stateoff_state_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_STATEOFF_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf stateoff state</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_processreboot_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PROCESSREBOOT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf processreboot modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_processshutdown_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PROCESSSHUTDOWN_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf processshutdown modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_processsleep_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PROCESSSLEEP_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf processsleep modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_pendingloadshed_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PENDINGLOADSHED_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf pendingloadshed modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_pendingondelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PENDINGONDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf pendingondelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_pendingoffdelay_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PENDINGOFFDELAY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf pendingoffdelay modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_pendingonacpresence_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PENDINGONACPRESENCE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf pendingonacpresence modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_pendingonminruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_PENDINGONMINRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf pendingonminruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_membergroupprocess1_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_MEMBERGROUPPROCESS1_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf membergroupprocess1 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_membergroupprocess2_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_MEMBERGROUPPROCESS2_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf membergroupprocess2 modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sog[2].outletstatus_bf_lowruntime_modifier_">
			<rowTest>
				<if>
					<op>
						<eq>
							<op>
								<bitwise_and>
									<op>
										<right_shift>
											<op>
												<getOid>Function_3_Reg_591</getOid>
											</op>
											<op>3</op>
										</right_shift>
									</op>
									<op>1</op>
								</bitwise_and>
							</op>
							<op>1</op>
						</eq>
					</op>
					<op>[true]</op>
					<op>[false]</op>
				</if>
			</rowTest>
			<type>state</type>
			<sensorId>_SOG[2].OUTLETSTATUS_BF_LOWRUNTIME_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_13</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sog[2].outletstatus_bf lowruntime modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>SOG[2].OutletStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="simplesignalingstatus_bf_power_failure">
			<type>state</type>
			<sensorId>_SIMPLESIGNALINGSTATUS_BF_POWER_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_19</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Simplesignalingstatus_bf power failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>SimpleSignalingStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="simplesignalingstatus_bf_shutdown_imminent">
			<type>state</type>
			<sensorId>_SIMPLESIGNALINGSTATUS_BF_SHUTDOWN_IMMINENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_19</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Simplesignalingstatus_bf shutdown imminent</label>
			<enum>truefalse_em</enum>
			<sensorSet>SimpleSignalingStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_sitewiring">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_SITEWIRING</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf sitewiring</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_eeprom">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_EEPROM</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf eeprom</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_adconverter">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_ADCONVERTER</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf adconverter</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_logicpowersupply">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_LOGICPOWERSUPPLY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf logicpowersupply</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_internalcommunication">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_INTERNALCOMMUNICATION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf internalcommunication</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_uibutton">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_UIBUTTON</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf uibutton</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_needsfactorysetup">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_NEEDSFACTORYSETUP</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf needsfactorysetup</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_epoactive">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_EPOACTIVE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf epoactive</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_firmwaremismatch">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_FIRMWAREMISMATCH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf firmwaremismatch</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_oscillator">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_OSCILLATOR</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf oscillator</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_measurementmismatch">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_MEASUREMENTMISMATCH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf measurementmismatch</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="generalerror_bf_subsystem">
			<type>state</type>
			<sensorId>_GENERALERROR_BF_SUBSYSTEM</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_20</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generalerror_bf subsystem</label>
			<enum>truefalse_em</enum>
			<sensorSet>GeneralError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_disconnected">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_DISCONNECTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf disconnected</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_overvoltage">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_OVERVOLTAGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf overvoltage</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_needsreplacement">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_NEEDSREPLACEMENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf needsreplacement</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_overtemperaturecritical">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_OVERTEMPERATURECRITICAL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf overtemperaturecritical</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_charger">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_CHARGER</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf charger</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_temperaturesensor">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_TEMPERATURESENSOR</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf temperaturesensor</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_bussoftstart">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_BUSSOFTSTART</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf bussoftstart</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_overtemperaturewarning">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_OVERTEMPERATUREWARNING</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf overtemperaturewarning</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_generalerror">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_GENERALERROR</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf generalerror</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_communication">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_COMMUNICATION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf communication</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_disconnectedframe">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_DISCONNECTEDFRAME</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf disconnectedframe</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="batterysystemerror_bf_firmwaremismatch">
			<type>state</type>
			<sensorId>_BATTERYSYSTEMERROR_BF_FIRMWAREMISMATCH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_23</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Batterysystemerror_bf firmwaremismatch</label>
			<enum>truefalse_em</enum>
			<sensorSet>BatterySystemError_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_pending">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_PENDING</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf pending</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_inprogress">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_INPROGRESS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf inprogress</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_passed">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_PASSED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf passed</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_failed">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_refused">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_REFUSED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf refused</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_aborted">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_ABORTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf aborted</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_protocol">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_PROTOCOL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf protocol</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_localui">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_LOCALUI</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf localui</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_internal">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_INTERNAL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf internal</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_invalidstate">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_INVALIDSTATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf invalidstate</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_internalfault">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_INTERNALFAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf internalfault</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replacebatteryteststatus_bf_stateofchargenotacceptable">
			<type>state</type>
			<sensorId>_REPLACEBATTERYTESTSTATUS_BF_STATEOFCHARGENOTACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_24</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replacebatteryteststatus_bf stateofchargenotacceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>ReplaceBatteryTestStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_pending">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_PENDING</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf pending</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_inprogress">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_INPROGRESS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf inprogress</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_passed">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_PASSED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf passed</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_failed">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_refused">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_REFUSED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf refused</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_aborted">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_ABORTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf aborted</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_protocol">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_PROTOCOL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf protocol</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_localui">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_LOCALUI</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf localui</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_internal">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_INTERNAL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf internal</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_invalidstate">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_INVALIDSTATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf invalidstate</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_internalfault">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_INTERNALFAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf internalfault</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_stateofchargenotacceptable">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_STATEOFCHARGENOTACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf stateofchargenotacceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_loadchange">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_LOADCHANGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf loadchange</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_acinputnotacceptable">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_ACINPUTNOTACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf acinputnotacceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_loadtoolow">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_LOADTOOLOW</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf loadtoolow</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="runtimecalibrationstatus_bf_overchargeinprogress">
			<type>state</type>
			<sensorId>_RUNTIMECALIBRATIONSTATUS_BF_OVERCHARGEINPROGRESS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_25</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Runtimecalibrationstatus bf overchargeinprogress</label>
			<enum>truefalse_em</enum>
			<sensorSet>RunTimeCalibrationStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_lifetimestatusok">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_LIFETIMESTATUSOK</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf lifetimestatusok</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_lifetimenearend">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_LIFETIMENEAREND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf lifetimenearend</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_lifetimeexceeded">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_LIFETIMEEXCEEDED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf lifetimeexceeded</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_lifetimenearendacknowledged">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_LIFETIMENEARENDACKNOWLEDGED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf lifetimenearendacknowledged</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_lifetimeexceededacknowledged">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_LIFETIMEEXCEEDEDACKNOWLEDGED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf lifetimeexceededacknowledged</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_measuredlifetimenearend">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_MEASUREDLIFETIMENEAREND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf measuredlifetimenearend</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="lifetimestatus_bf_measuredlifetimenearendacknowledged">
			<type>state</type>
			<sensorId>_LIFETIMESTATUS_BF_MEASUREDLIFETIMENEARENDACKNOWLEDGED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_26</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Lifetimestatus bf measuredlifetimenearendacknowledged</label>
			<enum>truefalse_em</enum>
			<sensorSet>LifeTimeStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="userinterfacestatus_bf_continuoustestinprogress">
			<type>state</type>
			<sensorId>_USERINTERFACESTATUS_BF_CONTINUOUSTESTINPROGRESS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_27</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Userinterfacestatus bf continuoustestinprogress</label>
			<enum>truefalse_em</enum>
			<sensorSet>UserInterfaceStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="userinterfacestatus_bf_audiblealarminprogress">
			<type>state</type>
			<sensorId>_USERINTERFACESTATUS_BF_AUDIBLEALARMINPROGRESS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_27</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Userinterfacestatus bf audiblealarminprogress</label>
			<enum>truefalse_em</enum>
			<sensorSet>UserInterfaceStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="userinterfacestatus_bf_audiblealarmmuted">
			<type>state</type>
			<sensorId>_USERINTERFACESTATUS_BF_AUDIBLEALARMMUTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_27</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Userinterfacestatus bf audiblealarmmuted</label>
			<enum>truefalse_em</enum>
			<sensorSet>UserInterfaceStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="userinterfacestatus_bf_anybuttonpressedrecently">
			<type>state</type>
			<sensorId>_USERINTERFACESTATUS_BF_ANYBUTTONPRESSEDRECENTLY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_27</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Userinterfacestatus bf anybuttonpressedrecently</label>
			<enum>truefalse_em</enum>
			<sensorSet>UserInterfaceStatus BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_acceptable">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_ACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf acceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_pendingacceptable">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_PENDINGACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf pendingacceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_voltagetoolow">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_VOLTAGETOOLOW</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf voltagetoolow</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_voltagetoohigh">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_VOLTAGETOOHIGH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf voltagetoohigh</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_distorted">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_DISTORTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf distorted</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_boost">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_BOOST</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf boost</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_trim">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_TRIM</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf trim</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_frequencytoolow">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_FREQUENCYTOOLOW</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf frequencytoolow</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_frequencytoohigh">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_FREQUENCYTOOHIGH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf frequencytoohigh</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_freqandphasenotlocked">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_FREQANDPHASENOTLOCKED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf freqandphasenotlocked</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_phasedeltaoutofrange">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_PHASEDELTAOUTOFRANGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf phasedeltaoutofrange</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_neutralnotconnected">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_NEUTRALNOTCONNECTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf neutralnotconnected</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input.inputstatus_bf_powering_load">
			<type>state</type>
			<sensorId>_INPUT.INPUTSTATUS_BF_POWERING_LOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_151</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input.inputstatus_bf powering load</label>
			<enum>truefalse_em</enum>
			<sensorSet>Input.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_acceptable">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_ACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf acceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_pendingacceptable">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_PENDINGACCEPTABLE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf pendingacceptable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_voltagetoolow">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_VOLTAGETOOLOW</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf voltagetoolow</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_voltagetoohigh">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_VOLTAGETOOHIGH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf voltagetoohigh</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_distorted">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_DISTORTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf distorted</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_frequencytoolow">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_FREQUENCYTOOLOW</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf frequencytoolow</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_frequencytoohigh">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_FREQUENCYTOOHIGH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf frequencytoohigh</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_freqandphasenotlocked">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_FREQANDPHASENOTLOCKED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf freqandphasenotlocked</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_phasedeltaoutofrange">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_PHASEDELTAOUTOFRANGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf phasedeltaoutofrange</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_neutralnotconnected">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_NEUTRALNOTCONNECTED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf neutralnotconnected</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass.inputstatus_bf_poweringload">
			<type>state</type>
			<sensorId>_BYPASS.INPUTSTATUS_BF_POWERINGLOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_148</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass.inputstatus_bf poweringload</label>
			<enum>truefalse_em</enum>
			<sensorSet>Bypass.InputStatus_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stateonline_state_">
			<type>state</type>
			<sensorId>_STATEONLINE_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stateonline state</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stateonbattery_state_">
			<type>state</type>
			<sensorId>_STATEONBATTERY_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stateonbattery state</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="statebypass_state_">
			<type>state</type>
			<sensorId>_STATEBYPASS_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Statebypass state</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stateoutputoff_state_">
			<type>state</type>
			<sensorId>_STATEOUTPUTOFF_STATE_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stateoutputoff state</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="fault_modifier_">
			<type>state</type>
			<sensorId>_FAULT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Fault modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inputbad_modifier_">
			<type>state</type>
			<sensorId>_INPUTBAD_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inputbad modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="test_modifier_">
			<type>state</type>
			<sensorId>_TEST_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Test modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="pendingoutputon_modifier_">
			<type>state</type>
			<sensorId>_PENDINGOUTPUTON_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Pendingoutputon modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="pendingoutputoff_modifier_">
			<type>state</type>
			<sensorId>_PENDINGOUTPUTOFF_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Pendingoutputoff modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="commanded_modifier_">
			<type>state</type>
			<sensorId>_COMMANDED_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Commanded modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="maintenance_modifier_">
			<type>state</type>
			<sensorId>_MAINTENANCE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Maintenance modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="highefficiency_modifier_">
			<type>state</type>
			<sensorId>_HIGHEFFICIENCY_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Highefficiency modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="informationalalert_modifier_">
			<type>state</type>
			<sensorId>_INFORMATIONALALERT_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Informationalalert modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="faultstate_modifier_">
			<type>state</type>
			<sensorId>_FAULTSTATE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Faultstate modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mainsbadstate_modifier_">
			<type>state</type>
			<sensorId>_MAINSBADSTATE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>19</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mainsbadstate modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="faultrecoverystate_modifier_">
			<type>state</type>
			<sensorId>_FAULTRECOVERYSTATE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>20</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Faultrecoverystate modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="overloadstate_modifier_">
			<type>state</type>
			<sensorId>_OVERLOADSTATE_MODIFIER_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>21</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Overloadstate modifier</label>
			<enum>truefalse_em</enum>
			<sensorSet>UPSStatusChangeCause_EN</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_outputoverload">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OUTPUTOVERLOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f outputoverload</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_outputshortcircuit">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OUTPUTSHORTCIRCUIT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f outputshortcircuit</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_outputovervoltage">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OUTPUTOVERVOLTAGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f outputovervoltage</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_transformerdcimbalance">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_TRANSFORMERDCIMBALANCE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f transformerdcimbalance</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_overtemperature">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OVERTEMPERATURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f overtemperature</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_backfeedrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_BACKFEEDRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f backfeedrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_avrrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_AVRRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f avrrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_pfcinputrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_PFCINPUTRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f pfcinputrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_outputrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OUTPUTRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f outputrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_bypassrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_BYPASSRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f bypassrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_fan">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_FAN</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f fan</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_pfc">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_PFC</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f pfc</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_dcbusovervoltage">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_DCBUSOVERVOLTAGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f dcbusovervoltage</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_inverter">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_INVERTER</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f inverter</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_overcurrent">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_OVERCURRENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f overcurrent</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_bypasspfcrelay">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_BYPASSPFCRELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f bypasspfcrelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="powersystem_error_b_f_bussoftstart">
			<type>state</type>
			<sensorId>_POWERSYSTEM_ERROR_B_F_BUSSOFTSTART</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_21</getOid>
									</op>
									<op>16</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Powersystem error_b f bussoftstart</label>
			<enum>truefalse_em</enum>
			<sensorSet>PowerSystem Error_B F</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_cancel">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_CANCEL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf cancel</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_outputon">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_OUTPUTON</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf outputon</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_outputoff">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_OUTPUTOFF</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf outputoff</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_outputshutdown">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_OUTPUTSHUTDOWN</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf outputshutdown</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_outputreboot">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_OUTPUTREBOOT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf outputreboot</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_coldbootallowed">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_COLDBOOTALLOWED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf coldbootallowed</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_useondelay">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_USEONDELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf useondelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_useoffdelay">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_USEOFFDELAY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf useoffdelay</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_unswitchedoutletgroup">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_UNSWITCHEDOUTLETGROUP</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf unswitchedoutletgroup</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_switchedoutletgroup0">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_SWITCHEDOUTLETGROUP0</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf switchedoutletgroup0</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_switchedoutletgroup1">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_SWITCHEDOUTLETGROUP1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf switchedoutletgroup1</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_switchedoutletgroup2">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_SWITCHEDOUTLETGROUP2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf switchedoutletgroup2</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_usbport">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_USBPORT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf usbport</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_localuser">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_LOCALUSER</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf localuser</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_rj45port">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_RJ45PORT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf rj45port</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_smartslot1">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_SMARTSLOT1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf smartslot1</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_smartslot2">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_SMARTSLOT2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>16</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf smartslot2</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_internalnetwork1">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_INTERNALNETWORK1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>17</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf internalnetwork1</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outletcommand_bf_internalnetwork2">
			<type>state</type>
			<sensorId>_OUTLETCOMMAND_BF_INTERNALNETWORK2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1539</getOid>
									</op>
									<op>18</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outletcommand_bf internalnetwork2</label>
			<enum>truefalse_em</enum>
			<sensorSet>OutletCommand_BF</sensorSet>
		</stateSensor>
		<valueMap ruleid="batterysystemerror_bf_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="batterysystemerror_bf_em">
			<label>Disconnected</label>
			<label>Over voltage</label>
			<label>Needs Replacement</label>
			<label>Over temperature Critical</label>
			<label>Charger</label>
			<label>Temperature Sensor</label>
			<label>Bus Soft Start</label>
			<label>Over temperature Warning</label>
			<label>General Error</label>
			<label>Communication</label>
			<label>Disconnected Frame</label>
			<label>Firmware Mismatch</label>
		</enumMap>

		<valueMap ruleid="upsstatuschangecause_en_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
			<valueIn>24</valueIn>
			<valueOut>24</valueOut>
			<valueIn>25</valueIn>
			<valueOut>25</valueOut>
			<valueIn>26</valueIn>
			<valueOut>26</valueOut>
			<valueIn>27</valueIn>
			<valueOut>27</valueOut>
			<valueIn>28</valueIn>
			<valueOut>28</valueOut>
			<valueIn>29</valueIn>
			<valueOut>29</valueOut>
			<valueIn>30</valueIn>
			<valueOut>30</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="upsstatuschangecause_en_em">
			<label>System lnitialization</label>
			<label>High Input Voltage</label>
			<label>Low Input Voltage</label>
			<label>Distorted Input</label>
			<label>Rapid Change Of Input Voltage</label>
			<label>High Input Frequency</label>
			<label>Low Input Frequency</label>
			<label>Freq And Or Phase Difference</label>
			<label>Acceptable Input</label>
			<label>Automatic Test</label>
			<label>Test Ended</label>
			<label>Local UI Command</label>
			<label>Protocol Command</label>
			<label>Low Battery Voltage</label>
			<label>General Error</label>
			<label>Power System Error</label>
			<label>Battery System Error</label>
			<label>Error Cleared</label>
			<label>Automatic Restart</label>
			<label>Distorted Inverter Output</label>
			<label>Inverter Output Acceptable</label>
			<label>EPO Interface</label>
			<label>Input Phase Delta Out Of Range</label>
			<label>Input Neutral Not Connected</label>
			<label>ATS Transfer</label>
			<label>Configuration Change</label>
			<label>Alert Asserted</label>
			<label>Alert Cleared</label>
			<label>Plug Rating Exceeded</label>
			<label>Outlet Group State Change</label>
			<label>Failure Bypass Expired</label>
		</enumMap>

		<valueMap ruleid="truefalse_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="truefalse_em">
			<label>False</label>
			<label>True</label>
		</enumMap>

		<valueMap ruleid="input_efficiency_e_n_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>-1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>-2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>-3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>-4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>-5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>-6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>-7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="input_efficiency_e_n_em">
			<label>0-32768</label>
			<label>Not Available</label>
			<label>Load Too Low</label>
			<label>Output Off</label>
			<label>On Battery</label>
			<label>In Bypass</label>
			<label>Battery Charging</label>
			<label>Poor AC Input</label>
		</enumMap>

		<valueMap ruleid="outputvoltageacsetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>8</valueIn>
			<valueOut>3</valueOut>
			<valueIn>16</valueIn>
			<valueOut>4</valueOut>
			<valueIn>32</valueIn>
			<valueOut>5</valueOut>
			<valueIn>64</valueIn>
			<valueOut>6</valueOut>
			<valueIn>2048</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8192</valueIn>
			<valueOut>8</valueOut>
			<valueIn>16384</valueIn>
			<valueOut>9</valueOut>
			<valueIn>32768</valueIn>
			<valueOut>10</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="outputvoltageacsetting_bf_em">
			<label>VAC100-Output voltage 100 VAC</label>
			<label>VAC120-Output voltage 120 VAC</label>
			<label>VAC200-Output voltage 200 VAC</label>
			<label>VAC208-Output voltage 208 VAC</label>
			<label>VAC220-Output voltage 220 VAC</label>
			<label>VAC230-Output voltage 230 VAC</label>
			<label>VAC240-Output voltage 240 VAC</label>
			<label>VAC110-Output voltage 110 VAC</label>
			<label>VACAuto120_208or240</label>
			<label>VAC120_208</label>
			<label>VAC120_240</label>
			<label>VAC100_200</label>
		</enumMap>

		<valueMap ruleid="outputacceptablefrequencysetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>8</valueIn>
			<valueOut>2</valueOut>
			<valueIn>16</valueIn>
			<valueOut>3</valueOut>
			<valueIn>64</valueIn>
			<valueOut>4</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="outputacceptablefrequencysetting_bf_em">
			<label>Auto-Automatic selection of 50/60Hz (47-53,57-63)</label>
			<label>Hz 50_0_1- Frequency of 50 Hz+/-0.1Hz</label>
			<label>Hz 50_3_0- Frequency of 50 Hz+/-3.0Hz</label>
			<label>Hz 60_0_1- Frequency of 60 Hz+/-0.1Hz</label>
			<label>Hz 60_3_0- Frequency of 60 Hz+/-3.0Hz</label>
		</enumMap>

		<valueMap ruleid="batterytestintervalsetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>16</valueIn>
			<valueOut>2</valueOut>
			<valueIn>32</valueIn>
			<valueOut>3</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="batterytestintervalsetting_bf_em">
			<label>Acceptable</label>
			<label>Pending Acceptable</label>
			<label>Distorted</label>
			<label>Boost</label>
		</enumMap>

		<valueMap ruleid="output_sensitivitysetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="output_sensitivitysetting_bf_em">
			<label>Acceptable</label>
			<label>Pending Acceptable</label>
			<label>Voltage Too Low</label>
		</enumMap>

		<valueMap ruleid="i_sogrelayconfigsetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>8</valueIn>
			<valueOut>3</valueOut>
			<valueIn>16</valueIn>
			<valueOut>4</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="i_sogrelayconfigsetting_bf_em">
			<label>MOG Present</label>
			<label>SOG0 Present</label>
			<label>SOG1 Present</label>
			<label>SOG2 Present</label>
			<label>SOG3 Present</label>
		</enumMap>

		<valueMap ruleid="mog_loadshedconfigsetting_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>8</valueIn>
			<valueOut>3</valueOut>
			<valueIn>16</valueIn>
			<valueOut>4</valueOut>
			<valueIn>32</valueIn>
			<valueOut>5</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="mog_loadshedconfigsetting_bf_em">
			<label>Use Off Delay</label>
			<label>Manual Restart Required</label>
			<label>Reserved</label>
			<label>Run Time Remaining</label>
			<label>UPS Overload</label>
			<label>UPS Overload</label>
		</enumMap>

		<valueMap ruleid="upscommand_bf_vm">
			<valueIn>8</valueIn>
			<valueOut>0</valueOut>
			<valueIn>16</valueIn>
			<valueOut>1</valueOut>
			<valueIn>32</valueIn>
			<valueOut>2</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="upscommand_bf_em">
			<label>Restore Factory Settings</label>
			<label>Output into Bypass</label>
			<label>Output out off Bypass</label>
		</enumMap>

		<valueMap ruleid="simplesignalingcommand_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="simplesignalingcommand_bf_em">
			<label>Request Shut Down</label>
			<label>Remote Off</label>
			<label>Remote On</label>
		</enumMap>

		<valueMap ruleid="replacebatterytestcommand_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="replacebatterytestcommand_bf_em">
			<label>Start</label>
		</enumMap>

		<valueMap ruleid="runtimecalibrationcommand_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="runtimecalibrationcommand_bf_em">
			<label>Start</label>
			<label>Abort</label>
		</enumMap>

		<valueMap ruleid="userinterfacecommand_bf_vm">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>4</valueIn>
			<valueOut>2</valueOut>
			<valueIn>8</valueIn>
			<valueOut>3</valueOut>
			<valueIn>32</valueIn>
			<valueOut>4</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="userinterfacecommand_bf_em">
			<label>Short Test</label>
			<label>Continous Test</label>
			<label>Mute All Active Audible Alarms</label>
			<label>Cancel Mute</label>
			<label>Acknowledge Battery Alarms</label>
		</enumMap>
	</device>
	<protocol>
		<modbus>
			<value_ref_id valid="Function_3_Reg_1537">
				<function>3</function>
				<start_addr>1536</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_156">
				<function>3</function>
				<start_addr>155</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1057">
				<function>3</function>
				<start_addr>1056</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_573">
				<function>3</function>
				<start_addr>572</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_597">
				<function>3</function>
				<start_addr>596</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_145">
				<function>3</function>
				<start_addr>144</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1042">
				<function>3</function>
				<start_addr>1041</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_134">
				<function>3</function>
				<start_addr>133</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_20">
				<function>3</function>
				<start_addr>19</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_23">
				<function>3</function>
				<start_addr>22</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1070">
				<function>3</function>
				<start_addr>1069</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1065">
				<function>3</function>
				<start_addr>1064</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_155">
				<function>3</function>
				<start_addr>154</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1037">
				<function>3</function>
				<start_addr>1036</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_136">
				<function>3</function>
				<start_addr>135</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1542">
				<function>3</function>
				<start_addr>1541</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_24">
				<function>3</function>
				<start_addr>23</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_158">
				<function>3</function>
				<start_addr>157</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1039">
				<function>3</function>
				<start_addr>1038</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1073">
				<function>3</function>
				<start_addr>1072</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1045">
				<function>3</function>
				<start_addr>1044</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_589">
				<function>3</function>
				<start_addr>588</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_157">
				<function>3</function>
				<start_addr>156</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1025">
				<function>3</function>
				<start_addr>1024</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_168">
				<function>3</function>
				<start_addr>167</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1074">
				<function>3</function>
				<start_addr>1073</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_146">
				<function>3</function>
				<start_addr>145</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_132">
				<function>3</function>
				<start_addr>131</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1544">
				<function>3</function>
				<start_addr>1543</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_26">
				<function>3</function>
				<start_addr>25</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_154">
				<function>3</function>
				<start_addr>153</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1069">
				<function>3</function>
				<start_addr>1068</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1030">
				<function>3</function>
				<start_addr>1029</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_4">
				<function>3</function>
				<start_addr>3</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1541">
				<function>3</function>
				<start_addr>1540</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1066">
				<function>3</function>
				<start_addr>1065</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1">
				<function>3</function>
				<start_addr>0</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_549">
				<function>3</function>
				<start_addr>548</start_addr>
				<quantity>16</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1027">
				<function>3</function>
				<start_addr>1026</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_137">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_169">
				<function>3</function>
				<start_addr>168</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_591">
				<function>3</function>
				<start_addr>590</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2057">
				<function>3</function>
				<start_addr>2056</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_166">
				<function>3</function>
				<start_addr>165</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1041">
				<function>3</function>
				<start_addr>1040</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_144">
				<function>3</function>
				<start_addr>143</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2061">
				<function>3</function>
				<start_addr>2060</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_533">
				<function>3</function>
				<start_addr>532</start_addr>
				<quantity>16</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_139">
				<function>3</function>
				<start_addr>138</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_142">
				<function>3</function>
				<start_addr>141</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_596">
				<function>3</function>
				<start_addr>595</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_164">
				<function>3</function>
				<start_addr>163</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_25">
				<function>3</function>
				<start_addr>24</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1029">
				<function>3</function>
				<start_addr>1028</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_149">
				<function>3</function>
				<start_addr>148</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2055">
				<function>3</function>
				<start_addr>2054</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1035">
				<function>3</function>
				<start_addr>1034</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_565">
				<function>3</function>
				<start_addr>564</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_160">
				<function>3</function>
				<start_addr>159</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_151">
				<function>3</function>
				<start_addr>150</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_593">
				<function>3</function>
				<start_addr>592</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1047">
				<function>3</function>
				<start_addr>1046</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_162">
				<function>3</function>
				<start_addr>161</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_141">
				<function>3</function>
				<start_addr>140</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1059">
				<function>3</function>
				<start_addr>1058</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_605">
				<function>3</function>
				<start_addr>604</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1032">
				<function>3</function>
				<start_addr>1031</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_590">
				<function>3</function>
				<start_addr>589</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2051">
				<function>3</function>
				<start_addr>2050</start_addr>
				<quantity>4</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_594">
				<function>3</function>
				<start_addr>593</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_129">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_152">
				<function>3</function>
				<start_addr>151</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_10">
				<function>3</function>
				<start_addr>9</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1067">
				<function>3</function>
				<start_addr>1066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_517">
				<function>3</function>
				<start_addr>516</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2059">
				<function>3</function>
				<start_addr>2058</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_581">
				<function>3</function>
				<start_addr>580</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_3">
				<function>3</function>
				<start_addr>2</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2049">
				<function>3</function>
				<start_addr>2048</start_addr>
				<quantity>2</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_19">
				<function>3</function>
				<start_addr>18</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_592">
				<function>3</function>
				<start_addr>591</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1543">
				<function>3</function>
				<start_addr>1542</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1031">
				<function>3</function>
				<start_addr>1030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1046">
				<function>3</function>
				<start_addr>1045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_161">
				<function>3</function>
				<start_addr>160</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2060">
				<function>3</function>
				<start_addr>2059</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1040">
				<function>3</function>
				<start_addr>1039</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1071">
				<function>3</function>
				<start_addr>1070</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_21">
				<function>3</function>
				<start_addr>20</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_143">
				<function>3</function>
				<start_addr>142</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_148">
				<function>3</function>
				<start_addr>147</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_165">
				<function>3</function>
				<start_addr>164</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_613">
				<function>3</function>
				<start_addr>612</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_7">
				<function>3</function>
				<start_addr>6</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1049">
				<function>3</function>
				<start_addr>1048</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1044">
				<function>3</function>
				<start_addr>1043</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_27">
				<function>3</function>
				<start_addr>26</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_140">
				<function>3</function>
				<start_addr>139</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_170">
				<function>3</function>
				<start_addr>169</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_629">
				<function>3</function>
				<start_addr>628</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_13">
				<function>3</function>
				<start_addr>12</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_131">
				<function>3</function>
				<start_addr>130</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_133">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1028">
				<function>3</function>
				<start_addr>1027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1061">
				<function>3</function>
				<start_addr>1060</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1055">
				<function>3</function>
				<start_addr>1054</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1034">
				<function>3</function>
				<start_addr>1033</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1539">
				<function>3</function>
				<start_addr>1538</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_138">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1036">
				<function>3</function>
				<start_addr>1035</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_150">
				<function>3</function>
				<start_addr>149</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_645">
				<function>3</function>
				<start_addr>644</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_153">
				<function>3</function>
				<start_addr>152</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2062">
				<function>3</function>
				<start_addr>2061</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_621">
				<function>3</function>
				<start_addr>620</start_addr>
				<quantity>8</quantity>
				<type>ascii</type>
			</value_ref_id>
		</modbus>
	</protocol>
</APC_DDF>
