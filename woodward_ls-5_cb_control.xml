<?xml version="1.0" encoding="UTF-8"?>
<!-- Oleksiy O. Loktev spezialist@email.ua Date: 28.04.2014 -->

<!-- Test Modbus related information -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="woodward_ls-5_cb_control" ddfname="Woodward LS-5 Series Circuit Breaker Control" ddfversion="6" canremove="no">
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="woodward_ls-5_cb_control">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		
		<setDefaultLabel ruleid="labeldata">Circuit Breaker<commSetting field="slaveaddress"/>(<sysHostname/>)</setDefaultLabel>

		<setProductData ruleid="vendordata" field="vendor">Woodward</setProductData>
		<setProductData ruleid="modeldata" field="model">LS-511/521 Marine</setProductData>
		<setProductData ruleid="typedata" field="type">Transfer Switch</setProductData>
<!--		<setProductData ruleid="mac_addrdata" field="mac_addr">xx:xx:xx:xx:xx:xx</setProductData> -->
<!--		<setProductData ruleid="appversiondata" field="appversion">myVersion</setProductData> -->
<!--		<setProductData ruleid="serial_numdata" field="serial_num">myS/N</setProductData> -->

<!--		<setLocationData ruleid="namedata" field="SYSNAME">myName</setLocationData> -->
<!--		<setLocationData ruleid="locationdata" field="LOCATION">myLocation</setLocationData> -->
<!--		<setLocationData ruleid="contactdata" field="CONTACT">myContact</setLocationData> -->
<!--		<setLocationData ruleid="descdata" field="NOTES">myNotes</setLocationData> -->

		<normalCondition>
			<name>Online: No Alarms Present</name>
			<description>The device is operating normally.</description>
			<normalRecommendedActions>
				<recommendedActionId>No action required.</recommendedActionId>
			</normalRecommendedActions>
		</normalCondition>

		<valueMap ruleid="skip_missing_sensor">
			<valueIn>32767</valueIn> <valueOut>[false]</valueOut>
			<valueIn>*</valueIn> <valueOut>[true]</valueOut>
		</valueMap>

<!-- Data Protocol 5301 for Circuit Breaker -->
		<numSensor ruleid="sensor_register_50001">
			<type>num/powerKVAR</type>
			<sensorId>id_register_50001</sensorId>
			<value>
				<mult>
					<op><getOid>register_50001</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A total reactive power</label>
			<sensorSet>System A Power Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50003">
			<type>num/powerfactor</type>
			<sensorId>id_register_50003</sensorId>
			<value>
				<mult>
					<op><getOid>register_50003</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A power factor</label>
			<sensorSet>System A Power Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50004">
			<type>voltage</type>
			<sensorId>id_register_50004</sensorId>
			<value>
				<mult>
					<op><getOid>register_50004</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A average Wye-Voltage</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50006">
			<type>frequency</type>
			<sensorId>id_register_50006</sensorId>
			<value>
				<mult>
					<op><getOid>register_50006</getOid></op>
					<op>.01</op>
				</mult>
			</value>
			<valueInc>.01</valueInc>
			<label>System A frequency</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50007">
			<type>voltage</type>
			<sensorId>id_register_50007</sensorId>
			<value>
				<mult>
					<op><getOid>register_50007</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A average Delta-Voltage</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50010">
			<type>num/powerKW</type>
			<sensorId>id_register_50010</sensorId>
			<value>
				<mult>
					<op><getOid>register_50010</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A total active power</label>
			<sensorSet>System A Power Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50013">
			<type>amperage</type>
			<sensorId>id_register_50013</sensorId>
			<value>
				<mult>
					<op><getOid>register_50013</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A average current</label>
			<sensorSet>System A Current Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50016">
			<type>amperage</type>
			<sensorId>id_register_50016</sensorId>
			<value>
				<mult>
					<op><getOid>register_50016</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A current, I1</label>
			<sensorSet>System A Current Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50018">
			<type>voltage</type>
			<sensorId>id_register_50018</sensorId>
			<value>
				<mult>
					<op><getOid>register_50018</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>Battery voltage</label>
			<sensorSet>Other Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50019">
			<type>amperage</type>
			<sensorId>id_register_50019</sensorId>
			<value>
				<mult>
					<op><getOid>register_50019</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A current, I2</label>
			<sensorSet>System A Current Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50022">
			<type>amperage</type>
			<sensorId>id_register_50022</sensorId>
			<value>
				<mult>
					<op><getOid>register_50022</getOid></op>
					<op>.001</op>
				</mult>
			</value>
			<valueInc>.001</valueInc>
			<label>System A current, I3</label>
			<sensorSet>System A Current Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50025">
			<type>voltage</type>
			<sensorId>id_register_50025</sensorId>
			<value>
				<mult>
					<op><getOid>register_50025</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to phase voltage, U12</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50028">
			<type>voltage</type>
			<sensorId>id_register_50028</sensorId>
			<value>
				<mult>
					<op><getOid>register_50028</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to neutral voltage, V1</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50031">
			<type>voltage</type>
			<sensorId>id_register_50031</sensorId>
			<value>
				<mult>
					<op><getOid>register_50031</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to phase voltage, U23</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50034">
			<type>voltage</type>
			<sensorId>id_register_50034</sensorId>
			<value>
				<mult>
					<op><getOid>register_50034</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to neutral voltage, V2</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50037">
			<type>voltage</type>
			<sensorId>id_register_50037</sensorId>
			<value>
				<mult>
					<op><getOid>register_50037</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to phase voltage, U31</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50040">
			<type>voltage</type>
			<sensorId>id_register_50040</sensorId>
			<value>
				<mult>
					<op><getOid>register_50040</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System A phase to neutral voltage, V3</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50046">
			<type>voltage</type>
			<sensorId>id_register_50046</sensorId>
			<value>
				<mult>
					<op><getOid>register_50046</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B average Wye-Voltage</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50048">
			<type>frequency</type>
			<sensorId>id_register_50048</sensorId>
			<value>
				<mult>
					<op><getOid>register_50048</getOid></op>
					<op>.01</op>
				</mult>
			</value>
			<valueInc>.01</valueInc>
			<label>System B frequency</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50049">
			<type>voltage</type>
			<sensorId>id_register_50049</sensorId>
			<value>
				<mult>
					<op><getOid>register_50049</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B average Delta-Voltage</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50064">
			<type>voltage</type>
			<sensorId>id_register_50064</sensorId>
			<value>
				<mult>
					<op><getOid>register_50064</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to phase voltage, U12</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50067">
			<type>voltage</type>
			<sensorId>id_register_50067</sensorId>
			<value>
				<mult>
					<op><getOid>register_50067</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to neutral voltage, V1</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50070">
			<type>voltage</type>
			<sensorId>id_register_50070</sensorId>
			<value>
				<mult>
					<op><getOid>register_50070</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to phase voltage, U23</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50073">
			<type>voltage</type>
			<sensorId>id_register_50073</sensorId>
			<value>
				<mult>
					<op><getOid>register_50073</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to neutral voltage, V2</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50076">
			<type>voltage</type>
			<sensorId>id_register_50076</sensorId>
			<value>
				<mult>
					<op><getOid>register_50076</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to phase voltage, U31</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>
		<numSensor ruleid="sensor_register_50079">
			<type>voltage</type>
			<sensorId>id_register_50079</sensorId>
			<value>
				<mult>
					<op><getOid>register_50079</getOid></op>
					<op>.1</op>
				</mult>
			</value>
			<valueInc>.1</valueInc>
			<label>System B phase to neutral voltage, V3</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</numSensor>

		<valueMap ruleid="inactive_active-vm">
			<valueIn>0</valueIn> <valueOut>0</valueOut>
			<valueIn>*</valueIn> <valueOut>1</valueOut>
		</valueMap>
		<enumMap ruleid="inactive_active-em">
			<label>Not Activated</label>
			<label>Activated</label>
		</enumMap>
		<enumMap ruleid="deenergiz_energiz-em">
			<label>Not Energized</label>
			<label>Energized</label>
		</enumMap>
		<enumMap ruleid="no_yes-em">
			<label>No</label>
			<label>Yes</label>
		</enumMap>

<!-- Data Protocol 5301 state sensors for Circuit Breaker -->
		<stateSensor ruleid="sensor_register_50009">
			<type>state</type>
			<sensorId>id_register_50009</sensorId>
			<value>
				<mapValue mapid="register_50009-vm">
				<formatNumber>
					<getOid>register_50009</getOid>
				</formatNumber>
				</mapValue>
			</value>
			<enum>register_50009-em</enum>
			<label>Operation mode</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<valueMap ruleid="register_50009-vm">
			<valueIn>13280</valueIn> <valueOut>0</valueOut>
			<valueIn>13264</valueIn> <valueOut>1</valueOut>
			<valueIn>13210</valueIn> <valueOut>2</valueOut>
			<valueIn>13260</valueIn> <valueOut>3</valueOut>
			<valueIn>13205</valueIn> <valueOut>4</valueOut>
			<valueIn>13257</valueIn> <valueOut>5</valueOut>
			<valueIn>13279</valueIn> <valueOut>6</valueOut>
			<valueIn>13265</valueIn> <valueOut>7</valueOut>
			<valueIn>13266</valueIn> <valueOut>8</valueOut>
			<valueIn>13267</valueIn> <valueOut>9</valueOut>
			<valueIn>13286</valueIn> <valueOut>10</valueOut>
		</valueMap>
		<enumMap ruleid="register_50009-em">
			<label>CB A request</label>
			<label>Unloading CB A</label>
			<label>CB A dead bus closure</label>
			<label>Synchronization CB A</label>
			<label>Mains settling time running</label>
			<label>Open CB A</label>
			<label>Synchronization mains close CB A</label>
			<label>Synchronization PERMISSIVE</label>
			<label>Synchronization CHECK</label>
			<label>Synchronization OFF</label>
			<label>Synchronization segments close CB A</label>
		</enumMap>
		<stateSensor ruleid="sensor_register_internal_DO1">
			<type>state</type>
			<sensorId>id_register_internal_DO1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output (inverted) to Relay 1 (Ready for operation OFF)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DO2">
			<type>state</type>
			<sensorId>id_register_internal_DO2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output to Relay 2 (Common CB A failure)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DO3">
			<type>state</type>
			<sensorId>id_register_internal_DO3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output to Relay 3 (Missing LS-5)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DO4">
			<type>state</type>
			<sensorId>id_register_internal_DO4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output to Relay 4 (System A or B voltage/frequency not OK)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DO5">
			<type>state</type>
			<sensorId>id_register_internal_DO5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output to Relay 5 (Command: open CB A)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DO6">
			<type>state</type>
			<sensorId>id_register_internal_DO6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50012</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Discrete output to Relay 6 (Close CB A (in CB A: two relay mode))</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_8">
			<type>state</type>
			<sensorId>id_register_50015_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 1 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_9">
			<type>state</type>
			<sensorId>id_register_50015_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 2 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_10">
			<type>state</type>
			<sensorId>id_register_50015_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 3 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_11">
			<type>state</type>
			<sensorId>id_register_50015_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 4 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_12">
			<type>state</type>
			<sensorId>id_register_50015_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 5 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50015_13">
			<type>state</type>
			<sensorId>id_register_50015_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50015</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Command 6 to LS-5 easYgen (OR)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_3">
			<type>state</type>
			<sensorId>id_register_50021_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit3 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>3</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Active second</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_4">
			<type>state</type>
			<sensorId>id_register_50021_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit4 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>4</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Active minute</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_5">
			<type>state</type>
			<sensorId>id_register_50021_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit5 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>5</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Active hour</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_6">
			<type>state</type>
			<sensorId>id_register_50021_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Active day in month</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_7">
			<type>state</type>
			<sensorId>id_register_50021_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Active weekday</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_8">
			<type>state</type>
			<sensorId>id_register_50021_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Time 2 overrun</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_9">
			<type>state</type>
			<sensorId>id_register_50021_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Time 1 overrun</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_11">
			<type>state</type>
			<sensorId>id_register_50021_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Acknowledge was executed</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50021_12">
			<type>state</type>
			<sensorId>id_register_50021_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50021</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Shutdown alarms (alarm C-F)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_15">
			<type>state</type>
			<sensorId>id_register_50024_15</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 1</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_14">
			<type>state</type>
			<sensorId>id_register_50024_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 2</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_13">
			<type>state</type>
			<sensorId>id_register_50024_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 3</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_12">
			<type>state</type>
			<sensorId>id_register_50024_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 4</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_11">
			<type>state</type>
			<sensorId>id_register_50024_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 5</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50024_10">
			<type>state</type>
			<sensorId>id_register_50024_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50024</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Relay 6</label>
			<sensorSet>Output Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_15">
			<type>state</type>
			<sensorId>id_register_50027_15</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 1</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_14">
			<type>state</type>
			<sensorId>id_register_50027_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 2</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_13">
			<type>state</type>
			<sensorId>id_register_50027_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 3</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_12">
			<type>state</type>
			<sensorId>id_register_50027_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 4</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_11">
			<type>state</type>
			<sensorId>id_register_50027_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_10">
			<type>state</type>
			<sensorId>id_register_50027_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 6</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_9">
			<type>state</type>
			<sensorId>id_register_50027_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 7</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_8">
			<type>state</type>
			<sensorId>id_register_50027_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 8</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_4">
			<type>state</type>
			<sensorId>id_register_50027_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit4 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>4</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: External acknowledge</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_2">
			<type>state</type>
			<sensorId>id_register_50027_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Operation mode AUTOMATIC</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50027_1">
			<type>state</type>
			<sensorId>id_register_50027_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50027</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Operation mode MANUAL</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50030_11">
			<type>state</type>
			<sensorId>id_register_50030_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50030</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Lamp test</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50030_10">
			<type>state</type>
			<sensorId>id_register_50030_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50030</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Centralized alarms (alarm B-F)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50030_9">
			<type>state</type>
			<sensorId>id_register_50030_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50030</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>All alarm classes</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50030_8">
			<type>state</type>
			<sensorId>id_register_50030_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50030</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Warning alarms (alarm A, B)</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_9">
			<type>state</type>
			<sensorId>id_register_50033_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 9</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_8">
			<type>state</type>
			<sensorId>id_register_50033_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 10</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_7">
			<type>state</type>
			<sensorId>id_register_50033_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 11</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_6">
			<type>state</type>
			<sensorId>id_register_50033_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 12</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_5">
			<type>state</type>
			<sensorId>id_register_50033_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit5 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>5</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 13</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_4">
			<type>state</type>
			<sensorId>id_register_50033_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit4 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>4</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 14</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_3">
			<type>state</type>
			<sensorId>id_register_50033_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit3 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>3</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 15</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50033_2">
			<type>state</type>
			<sensorId>id_register_50033_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50033</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Internal flag 16</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50039_2">
			<type>state</type>
			<sensorId>id_register_50039_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50039</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Synchronization mode CHECK</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50039_1">
			<type>state</type>
			<sensorId>id_register_50039_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50039</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Synchronization mode PERMISSIVE</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50039_0">
			<type>state</type>
			<sensorId>id_register_50039_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit0 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50039</getOid></op>
							<op>0</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>LogicsManager: Synchronization mode RUN</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI1">
			<type>state</type>
			<sensorId>id_register_internal_DI1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 1 (Lock monitoring)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI2">
			<type>state</type>
			<sensorId>id_register_internal_DI2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 2 (Remote acknowledge)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI3">
			<type>state</type>
			<sensorId>id_register_internal_DI3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 3 (Reply: CB A is closed)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI4">
			<type>state</type>
			<sensorId>id_register_internal_DI4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 4 (Immediate open CB A)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI5">
			<type>state</type>
			<sensorId>id_register_internal_DI5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 5 (Reply: Isolation switch is open)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI6">
			<type>state</type>
			<sensorId>id_register_internal_DI6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 6 (Open CB A (with unloading))</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI7">
			<type>state</type>
			<sensorId>id_register_internal_DI7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 7 (Enable to close CB A)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_internal_DI8">
			<type>state</type>
			<sensorId>id_register_internal_DI8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50045</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>deenergiz_energiz-em</enum>
			<label>Discrete internal input 8 (Reply: CB A is open)</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_15">
			<type>state</type>
			<sensorId>id_register_50060_15</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 16</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_14">
			<type>state</type>
			<sensorId>id_register_50060_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 15</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_13">
			<type>state</type>
			<sensorId>id_register_50060_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 14</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_12">
			<type>state</type>
			<sensorId>id_register_50060_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 13</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_11">
			<type>state</type>
			<sensorId>id_register_50060_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 12</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_10">
			<type>state</type>
			<sensorId>id_register_50060_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 11</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_9">
			<type>state</type>
			<sensorId>id_register_50060_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 10</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_8">
			<type>state</type>
			<sensorId>id_register_50060_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 9</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_7">
			<type>state</type>
			<sensorId>id_register_50060_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 8</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_6">
			<type>state</type>
			<sensorId>id_register_50060_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 7</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_5">
			<type>state</type>
			<sensorId>id_register_50060_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit5 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>5</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 6</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_4">
			<type>state</type>
			<sensorId>id_register_50060_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit4 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>4</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_3">
			<type>state</type>
			<sensorId>id_register_50060_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit3 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>3</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 4</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_2">
			<type>state</type>
			<sensorId>id_register_50060_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 3</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_1">
			<type>state</type>
			<sensorId>id_register_50060_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 2</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50060_0">
			<type>state</type>
			<sensorId>id_register_50060_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit0 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50060</getOid></op>
							<op>0</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Remote control bit 1</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_15">
			<type>state</type>
			<sensorId>id_register_50066_15</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B voltage in range (voltage window)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_14">
			<type>state</type>
			<sensorId>id_register_50066_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B frequency in range (frequency window)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_13">
			<type>state</type>
			<sensorId>id_register_50066_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B voltage and frequency in range (ready for operation)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_12">
			<type>state</type>
			<sensorId>id_register_50066_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A voltage in range (voltage window)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_9">
			<type>state</type>
			<sensorId>id_register_50066_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A frequency in range (frequency window)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50066_6">
			<type>state</type>
			<sensorId>id_register_50066_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50066</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A voltage and frequency in range (ready for operation)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50069_7">
			<type>state</type>
			<sensorId>id_register_50069_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50069</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A phase rotation Counter Clock Wise (CCW, reverse, left turn)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50069_6">
			<type>state</type>
			<sensorId>id_register_50069_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50069</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A phase rotation Clock Wise (CW, forward, right turn)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50072_7">
			<type>state</type>
			<sensorId>id_register_50072_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50072</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B phase rotation Clock Wise (CW, forward, right turn)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50072_6">
			<type>state</type>
			<sensorId>id_register_50072_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50072</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B phase rotation Clock Wise (CW, forward, right turn)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50075_14">
			<type>state</type>
			<sensorId>id_register_50075_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50075</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Synchronous segments closure procedure</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50075_12">
			<type>state</type>
			<sensorId>id_register_50075_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50075</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Synchronization check relay</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50075_11">
			<type>state</type>
			<sensorId>id_register_50075_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50075</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Synchronization condition</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50075_10">
			<type>state</type>
			<sensorId>id_register_50075_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50075</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Dead bus closure condition</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_13">
			<type>state</type>
			<sensorId>id_register_50081_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Unloading CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_11">
			<type>state</type>
			<sensorId>id_register_50081_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Close command CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_10">
			<type>state</type>
			<sensorId>id_register_50081_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Open command CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_9">
			<type>state</type>
			<sensorId>id_register_50081_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Synchronization CB A procedure</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_5">
			<type>state</type>
			<sensorId>id_register_50081_5</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit5 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>5</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Mains settling</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_4">
			<type>state</type>
			<sensorId>id_register_50081_4</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit4 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>4</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Isolation switch is open</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_3">
			<type>state</type>
			<sensorId>id_register_50081_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit3 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>3</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>CB A is closed</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_2">
			<type>state</type>
			<sensorId>id_register_50081_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Lamp test request</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_1">
			<type>state</type>
			<sensorId>id_register_50081_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Operating mode MANUAL</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50081_0">
			<type>state</type>
			<sensorId>id_register_50081_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit0 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50081</getOid></op>
							<op>0</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Operating mode AUTOMATIC</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_13">
			<type>state</type>
			<sensorId>id_register_50082_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Mains parallel operation</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_12">
			<type>state</type>
			<sensorId>id_register_50082_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B mains connected</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_11">
			<type>state</type>
			<sensorId>id_register_50082_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A mains connected</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_2">
			<type>state</type>
			<sensorId>id_register_50082_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Synchronous mains closure procedure</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_1">
			<type>state</type>
			<sensorId>id_register_50082_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Dead bus closure procedure</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50082_0">
			<type>state</type>
			<sensorId>id_register_50082_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit0 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50082</getOid></op>
							<op>0</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Increment close counter CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50083_15">
			<type>state</type>
			<sensorId>id_register_50083_15</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit15 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50083</getOid></op>
							<op>15</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B phase rotation CCW (for ToolKit)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50083_14">
			<type>state</type>
			<sensorId>id_register_50083_14</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit14 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50083</getOid></op>
							<op>14</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System B phase rotation CW (for ToolKit)</label>
			<sensorSet>System B Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50083_13">
			<type>state</type>
			<sensorId>id_register_50083_13</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit13 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50083</getOid></op>
							<op>13</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A phase rotation CCW (for ToolKit)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50083_12">
			<type>state</type>
			<sensorId>id_register_50083_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50083</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>System A phase rotation CW (for ToolKit)</label>
			<sensorSet>System A Voltage Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_12">
			<type>state</type>
			<sensorId>id_register_50085_12</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit12 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>12</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Flag 5 LS-5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_11">
			<type>state</type>
			<sensorId>id_register_50085_11</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit11 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>11</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Flag 4 LS-5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_10">
			<type>state</type>
			<sensorId>id_register_50085_10</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit10 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>10</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Flag 3 LS-5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_9">
			<type>state</type>
			<sensorId>id_register_50085_9</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit9 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>9</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Flag 2 LS-5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_8">
			<type>state</type>
			<sensorId>id_register_50085_8</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit8 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>8</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Flag 1 LS-5</label>
			<sensorSet>Device Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_7">
			<type>state</type>
			<sensorId>id_register_50085_7</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit7 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>7</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Load transfer to System B</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_6">
			<type>state</type>
			<sensorId>id_register_50085_6</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit6 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>6</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>no_yes-em</enum>
			<label>Load transfer to System A</label>
			<sensorSet>Other Sensors</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_3">
			<type>state</type>
			<sensorId>id_register_50085_3</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit3 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>3</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Enable to close CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_2">
			<type>state</type>
			<sensorId>id_register_50085_2</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit2 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>2</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Immediate open CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_1">
			<type>state</type>
			<sensorId>id_register_50085_1</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit1 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>1</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Open CB A</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sensor_register_50085_0">
			<type>state</type>
			<sensorId>id_register_50085_0</sensorId>
			<value>
				<mapValue mapid="inactive_active-vm">
				<formatNumber>
				<!-- Determined by bit0 -->
					<bitwise_and>
						<op>
						<right_shift>
							<op><getOid>register_50085</getOid></op>
							<op>0</op>
						</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
				</mapValue>
			</value>
			<enum>inactive_active-em</enum>
			<label>Enable mains decoupling</label>
			<sensorSet>Operation Status</sensorSet>
		</stateSensor>

<!-- Data Protocol 5301 alarm sensors for Circuit Breaker -->
		<alarmFlags ruleid="alarm_register_50036">
			<value>
				<getOid>register_50036</getOid>
			</value>
			<alarmFlagsTest mask="2" match="2" log="no">
				<name>
					<activeText>Alarm new alarm triggered occurred.</activeText>
					<inactiveText>Alarm new alarm triggered is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Fault</category>
				<description>
					<activeText>Alarm new alarm triggered occurred.</activeText>
					<inactiveText>Alarm new alarm triggered is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						TRUE if any alarm has been triggered until it is acknowledged.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50042">
			<value>
				<getOid>register_50042</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1" log="no">
				<name>
					<activeText>Alarm class A occurred.</activeText>
					<inactiveText>Alarm class A is no longer exists.</inactiveText>
				</name>
				<severity>information</severity>
				<category>Warning Alarm</category>
				<description>
					<activeText>Alarm class A occurred.</activeText>
					<inactiveText>Alarm class A is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						This alarm does not open a breaker. A message output without a centralized alarm occurs:
						 -> Alarm text.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2" log="no">
				<name>
					<activeText>Alarm class B occurred.</activeText>
					<inactiveText>Alarm class B is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Warning Alarm</category>
				<description>
					<activeText>Alarm class B occurred.</activeText>
					<inactiveText>Alarm class B is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						This alarm does not open a breaker. An output of the centralized alarm occurs and the command variable 3.05 (horn) is issued.
						 -> Alarm text + flashing LED "Alarm" + Relay centralized alarm (horn).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4" log="no">
				<name>
					<activeText>Alarm class C occurred.</activeText>
					<inactiveText>Alarm class C is no longer exists.</inactiveText>
				</name>
				<severity>error</severity>
				<category>Fault</category>
				<description>
					<activeText>Alarm class C occurred.</activeText>
					<inactiveText>Alarm class C is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						With this alarm the CB A is opened with unloading.
						 -> Alarm text + flashing LED "Alarm" + Relay centralized alarm (horn) + CB A open with unloading.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8" log="no">
				<name>
					<activeText>Alarm class D occurred.</activeText>
					<inactiveText>Alarm class D is no longer exists.</inactiveText>
				</name>
				<severity>error</severity>
				<category>Fault</category>
				<description>
					<activeText>Alarm class D occurred.</activeText>
					<inactiveText>Alarm class D is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						With this alarm the CB A is opened immediately.
						 -> Alarm text + flashing LED "Alarm" + Relay centralized alarm (horn) + CB A open immediately.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10" log="no">
				<name>
					<activeText>Alarm class E occurred.</activeText>
					<inactiveText>Alarm class E is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Fault</category>
				<description>
					<activeText>Alarm class E occurred.</activeText>
					<inactiveText>Alarm class E is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						With this alarm the CB A is opened immediately.
						 -> Alarm text + flashing LED "Alarm" + Relay centralized alarm (horn) + CB A open immediately.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20" log="no">
				<name>
					<activeText>Alarm class F occurred.</activeText>
					<inactiveText>Alarm class F is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Fault</category>
				<description>
					<activeText>Alarm class F occurred.</activeText>
					<inactiveText>Alarm class F is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						With this alarm the CB A is opened immediately.
						 -> Alarm text + flashing LED "Alarm" + Relay centralized alarm (horn) + CB A open immediately.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50063">
			<value>
				<getOid>register_50063</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1" log="no">
				<name>
					<activeText>Alarm battery undervoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm battery undervoltage, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>error</severity>
				<category>Battery</category>
				<description>
					<activeText>Alarm battery undervoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm battery undervoltage, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The battery voltage has fallen below the limit value 1 for battery undervoltage for at least the configured time
						 and has not exceeded the value of the hysteresis.
						 The default monitoring limit for battery undervoltage is 24 Vdc after 60 seconds.
						 This is because in normal operation the terminal voltage is approximately 26 Vdc (alternator charged battery).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2" log="no">
				<name>
					<activeText>Alarm battery overvoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm battery overvoltage, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>error</severity>
				<category>Battery</category>
				<description>
					<activeText>Alarm battery overvoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm battery overvoltage, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The battery voltage has exceeded the limit value 1 for battery overvoltage for at least the configured time
						 and did not fall below the value of the hysteresis.
						 The default monitoring limit for battery overvoltage is 32 Vdc after 5 seconds.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4" log="no">
				<name>
					<activeText>Alarm battery undervoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm battery undervoltage, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Battery</category>
				<description>
					<activeText>Alarm battery undervoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm battery undervoltage, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The battery voltage has fallen below the limit value 2 for battery undervoltage for at least the configured time
						 and has not exceeded the value of the hysteresis.
						 The default monitoring limit for battery undervoltage is 20 Vdc after 10 seconds.
						 This is because in normal operation the terminal voltage is approximately 26 Vdc (alternator charged battery).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8" log="no">
				<name>
					<activeText>Alarm battery overvoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm battery overvoltage, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Battery</category>
				<description>
					<activeText>Alarm battery overvoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm battery overvoltage, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The battery voltage has exceeded the limit value 2 for battery overvoltage for at least the configured time
						 and did not fall below the value of the hysteresis.
						 The default monitoring limit for battery overvoltage is 35 Vdc after 1 seconds.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50078">
			<value>
				<getOid>register_50078</getOid>
			</value>
			<alarmFlagsTest mask="4" match="4" log="no">
				<name>
					<activeText>Alarm the EEPROM checksum is corrupted occurred.</activeText>
					<inactiveText>Alarm the EEPROM checksum is corrupted is no longer exists.</inactiveText>
				</name>
				<severity>error</severity>
				<category>Device</category>
				<description>
					<activeText>Alarm the EEPROM checksum is corrupted occurred.</activeText>
					<inactiveText>Alarm the EEPROM checksum is corrupted is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The EEPROM check at startup has resulted a defective EEPROM.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8" log="no">
				<name>
					<activeText>Alarm number of member mismatch occurred.</activeText>
					<inactiveText>Alarm number of member mismatch is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Device</category>
				<description>
					<activeText>Alarm number of member mismatch occurred.</activeText>
					<inactiveText>Alarm number of member mismatch is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The multi-unit missing members monitoring function checks whether all participating units are available (sending data on the CAN bus).
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800" log="no">
				<name>
					<activeText>Alarm System A/System B phase rotation mismatch occurred.</activeText>
					<inactiveText>Alarm System A/System B phase rotation mismatch is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A/System B phase rotation mismatch occurred.</activeText>
					<inactiveText>Alarm System A/System B phase rotation mismatch is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						System A or System B has different rotating fields. A CB closure is blocked.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000" log="no">
				<name>
					<activeText>Alarm timeout synchronization CB A occurred.</activeText>
					<inactiveText>Alarm timeout synchronization CB A is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm timeout synchronization CB A occurred.</activeText>
					<inactiveText>Alarm timeout synchronization CB A is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The LS-5 has failed to synchronize the CBA within the configured synchronization time.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50081">
			<value>
				<getOid>register_50081</getOid>
			</value>
			<alarmFlagsTest mask="2" match="2" log="no">
				<name>
					<activeText>MANUAL Operating mode.</activeText>
					<inactiveText>AUTOMATIC Operating mode.</inactiveText>
				</name>
				<severity>information</severity>
				<category>Device</category>
				<description>
					<activeText>MANUAL Operating mode.</activeText>
					<inactiveText>AUTOMATIC Operating mode.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						When MANUAL is selected, breaker control is performed manually via the button.
						 When AUTOMATIC is selected, the control unit manages all breaker control functions.
						 These functions are performed in accordance with how the control unit is configured.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50082">
			<value>
				<getOid>register_50082</getOid>
			</value>
			<alarmFlagsTest mask="4000" match="4000" log="no">
				<name>
					<activeText>Alarm System B is dead occurred.</activeText>
					<inactiveText>Alarm System B is dead is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System B is dead occurred.</activeText>
					<inactiveText>Alarm System B is dead is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						TRUE as long as System B voltage is below the level defined by parameter.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000" log="no">
				<name>
					<activeText>Alarm System A is dead occurred.</activeText>
					<inactiveText>Alarm System A is dead is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A is dead occurred.</activeText>
					<inactiveText>Alarm System A is dead is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						TRUE as long as System A voltage is below the level defined by parameter.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50084">
			<value>
				<getOid>register_50084</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1" log="no">
				<name>
					<activeText>Alarm CANopen error interface 1 occurred.</activeText>
					<inactiveText>Alarm CANopen error interface 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Communication</category>
				<description>
					<activeText>Alarm CANopen error interface 1 occurred.</activeText>
					<inactiveText>Alarm CANopen error interface 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						If the interface does not receive a Receive Process Data Object (RPDO) before the delay expires, an alarm will be initiated.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20" log="no">
				<name>
					<activeText>Alarm CB A open not successful occurred.</activeText>
					<inactiveText>Alarm CB A open not successful is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm CB A open not successful occurred.</activeText>
					<inactiveText>Alarm CB A open not successful is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						If the control is attempting to open the circuit breaker and it fails to see that the CB A is open within the configured time in seconds after issuing the breaker open command then the monitoring CB A alarm will be initiated.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40" log="no">
				<name>
					<activeText>Alarm CB A close not successful occurred.</activeText>
					<inactiveText>Alarm CB A close not successful is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm CB A close not successful occurred.</activeText>
					<inactiveText>Alarm CB A close not successful is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						If the control initiates a close of the breaker and the breaker fails to close after the configured number of attempts the monitoring CB A alarm will be initiated.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50086">
			<value>
				<getOid>register_50086</getOid>
			</value>
			<alarmFlagsTest mask="400" match="400" log="no">
				<name>
					<activeText>Alarm System B phase rotation occurred.</activeText>
					<inactiveText>Alarm System B phase rotation is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System B phase rotation occurred.</activeText>
					<inactiveText>Alarm System B phase rotation is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System B rotating field does not correspond with the configured direction.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50087">
			<value>
				<getOid>register_50087</getOid>
			</value>
			<alarmFlagsTest mask="4" match="4" log="no">
				<name>
					<activeText>Alarm System A phase rotation occurred.</activeText>
					<inactiveText>Alarm System A phase rotation is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A phase rotation occurred.</activeText>
					<inactiveText>Alarm System A phase rotation is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A rotating field does not correspond with the configured direction.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8" log="no">
				<name>
					<activeText>Alarm System A voltage asymmetry (with negative sequence) occurred.</activeText>
					<inactiveText>Alarm System A voltage asymmetry (with negative sequence) is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A voltage asymmetry (with negative sequence) occurred.</activeText>
					<inactiveText>Alarm System A voltage asymmetry (with negative sequence) is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The Sustem A phase-to-phase voltages have higher differences between each other than the configured limit value.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40" log="no">
				<name>
					<activeText>Alarm System A decoupling occurred.</activeText>
					<inactiveText>Alarm System A decoupling is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A decoupling occurred.</activeText>
					<inactiveText>Alarm System A decoupling is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A decoupling function is intended for use in a mains parallel operation and monitors a series of subordinate mains protection thresholds.
						 If a threshold is exceeded, the LS-5 initiates a breaker opening and separates the System B from the mains at the defined breaker.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80" log="no">
				<name>
					<activeText>Alarm System A phase shift occurred.</activeText>
					<inactiveText>Alarm System A phase shift is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A phase shift occurred.</activeText>
					<inactiveText>Alarm System A phase shift is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						 A System A phase shift, which has exceeded the configured limit, has occurred. Triggering this monitoring function causes the System A decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100" log="no">
				<name>
					<activeText>Alarm System A undervoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A undervoltage, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A undervoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A undervoltage, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A voltage has fallen below the limit value 2 for System A undervoltage for at least the configured time and has not exceeded the value of the hysteresis.
						 Triggering this monitoring function causes the mains decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200" log="no">
				<name>
					<activeText>Alarm System A undervoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A undervoltage, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A undervoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A undervoltage, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A voltage has fallen below the limit value 1 for System A undervoltage for at least the configured time and has not exceeded the value of the hysteresis.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400" log="no">
				<name>
					<activeText>Alarm System A overvoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A overvoltage, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A overvoltage, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A overvoltage, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A voltage has exceeded the limit value 2 for System A overvoltage for at least the configured time and did not fall below the value of the hysteresis.
						 Triggering this monitoring function causes the mains decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800" log="no">
				<name>
					<activeText>Alarm System A overvoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A overvoltage, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A overvoltage, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A overvoltage, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A voltage has exceeded the limit value 1 for System A overvoltage for at least the configured time and did not fall below the value of the hysteresis.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000" log="no">
				<name>
					<activeText>Alarm System A underfrequency, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A underfrequency, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A underfrequency, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A underfrequency, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A frequency has fallen below the limit value 2 for System A underfrequency for at least the configured time and has not exceeded the value of the hysteresis.
						 Triggering this monitoring function causes the mains decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000" log="no">
				<name>
					<activeText>Alarm System A underfrequency, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A underfrequency, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A underfrequency, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A underfrequency, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A frequency has fallen below the limit value 1 for System A underfrequency for at least the configured time and has not exceeded the value of the hysteresis.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000" log="no">
				<name>
					<activeText>Alarm System A overfrequency, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A overfrequency, limit value 2 is no longer exists.</inactiveText>
				</name>
				<severity>critical</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A overfrequency, limit value 2 occurred.</activeText>
					<inactiveText>Alarm System A overfrequency, limit value 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A frequency has exceeded the limit value 2 for System A overfrequency for at least the configured time and did not fall below the value of the hysteresis.
						 Triggering this monitoring function causes the mains decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000" log="no">
				<name>
					<activeText>Alarm System A overfrequency, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A overfrequency, limit value 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A overfrequency, limit value 1 occurred.</activeText>
					<inactiveText>Alarm System A overfrequency, limit value 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A frequency has exceeded the limit value 1 for System A overfrequency for at least the configured time and did not fall below the value of the hysteresis.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="alarm_register_50088">
			<value>
				<getOid>register_50088</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1" log="no">
				<name>
					<activeText>Alarm QV monitoring, delay time 2 occurred.</activeText>
					<inactiveText>Alarm QV monitoring, delay time 2 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm QV monitoring, delay time 2 occurred.</activeText>
					<inactiveText>Alarm QV monitoring, delay time 2 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A reactive power has exceeded the limit for at least the configured delay time 2.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2" log="no">
				<name>
					<activeText>Alarm QV monitoring, delay time 1 occurred.</activeText>
					<inactiveText>Alarm QV monitoring, delay time 1 is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm QV monitoring, delay time 1 occurred.</activeText>
					<inactiveText>Alarm QV monitoring, delay time 1 is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The System A reactive power has exceeded the limit for at least the configured delay time 1.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4" log="no">
				<name>
					<activeText>Alarm CB A unload mismatch occurred.</activeText>
					<inactiveText>Alarm CB A unload mismatch is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm CB A unload mismatch occurred.</activeText>
					<inactiveText>Alarm CB A unload mismatch is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						While unloading CB A the defined limit of load is not reached in the defined time.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8" log="no">
				<name>
					<activeText>Alarm System A voltage increase occurred.</activeText>
					<inactiveText>Alarm System A voltage increase is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A voltage increase occurred.</activeText>
					<inactiveText>Alarm System A voltage increase is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The limit for System A voltage increase is reached or exceeded.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20" log="no">
				<name>
					<activeText>Alarm System A time-dependent voltage occurred.</activeText>
					<inactiveText>Alarm System A time-dependent voltage is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A time-dependent voltage occurred.</activeText>
					<inactiveText>Alarm System A time-dependent voltage is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						The measured voltage falls below/exceeds the configured criteria.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80" log="no">
				<name>
					<activeText>Alarm System A df/dt (ROCOF) occurred.</activeText>
					<inactiveText>Alarm System A df/dt (ROCOF) is no longer exists.</inactiveText>
				</name>
				<severity>warning</severity>
				<category>Power</category>
				<description>
					<activeText>Alarm System A df/dt (ROCOF) occurred.</activeText>
					<inactiveText>Alarm System A df/dt (ROCOF) is no longer exists.</inactiveText>
				</description>
				<alarmRecommendedActions>
					<recommendedActionId>
						A System A df/dt, which has exceeded the configured limit, has occurred. Triggering this monitoring function causes the System A decoupling function to trigger.
					</recommendedActionId>
				</alarmRecommendedActions>
			</alarmFlagsTest>
		</alarmFlags>
	</device>

	<protocol>
		<modbus>
<!-- Data Protocol 5301 for Circuit Breaker -->
  			<value_ref_id valid="register_50001"> <!-- System A total reactive power, VAr -->
				<function>3</function>
				<start_addr>50001</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50003"> <!-- System A power factor (- leading, + lagging), 0.001*PF -->
				<function>3</function>
				<start_addr>50003</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50004"> <!-- System A average Wye-Voltage, 0.1*V -->
				<function>3</function>
				<start_addr>50004</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50006"> <!-- System A frequency, 0.01*Hz -->
				<function>3</function>
				<start_addr>50006</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50007"> <!-- System A average Delta-Voltage, 0.1*V -->
				<function>3</function>
				<start_addr>50007</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50009"> <!-- Operation modes -->
				<function>3</function>
				<start_addr>50009</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50010"> <!-- System A total active power, W -->
				<function>3</function>
				<start_addr>50010</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50012"> <!-- State internal Digital Outputs 1-6 -->
				<function>3</function>
				<start_addr>50012</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50013"> <!-- System A average current, 0.001*A -->
				<function>3</function>
				<start_addr>50013</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50015"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50015</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50016"> <!-- System A current I1, 0.001*A -->
				<function>3</function>
				<start_addr>50016</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50018"> <!-- Battery voltage, 0.1*V -->
				<function>3</function>
				<start_addr>50018</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50019"> <!-- System A current I2, 0.001*A -->
				<function>3</function>
				<start_addr>50019</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50021"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50021</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50022"> <!-- System A current I3, 0.001*A -->
				<function>3</function>
				<start_addr>50022</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50024"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50024</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50025"> <!-- System A phase to phase voltage U12, 0.1*V -->
				<function>3</function>
				<start_addr>50025</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50027"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50028"> <!-- System A phase to neutral voltage V1, 0.1*V -->
				<function>3</function>
				<start_addr>50028</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50030"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50031"> <!-- System A phase to phase voltage U23, 0.1*V -->
				<function>3</function>
				<start_addr>50031</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50033"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50033</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50034"> <!-- System A phase to neutral voltage V2, 0.1*V -->
				<function>3</function>
				<start_addr>50034</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50036"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50036</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50037"> <!-- System A phase to phase voltage U31, 0.1*V -->
				<function>3</function>
				<start_addr>50037</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50039"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50039</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50040"> <!-- System A phase to neutral voltage V3, 0.1*V -->
				<function>3</function>
				<start_addr>50040</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50042"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50042</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50045"> <!-- State internal Digital Inputs 1-8 -->
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50046"> <!-- System B average Wye-Voltage, 0.1*V -->
				<function>3</function>
				<start_addr>50046</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50048"> <!-- System B frequency, 0.01*Hz -->
				<function>3</function>
				<start_addr>50048</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50049"> <!-- System B average Delta-Voltage, 0.1*V -->
				<function>3</function>
				<start_addr>50049</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50060"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50060</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50063"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50063</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50064"> <!-- System B phase to phase voltage U12, 0.1*V -->
				<function>3</function>
				<start_addr>50064</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50066"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50067"> <!-- System B phase to neutral voltage V1, 0.1*V -->
				<function>3</function>
				<start_addr>50067</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50069"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50069</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50070"> <!-- System B phase to phase voltage U23, 0.1*V -->
				<function>3</function>
				<start_addr>50070</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50072"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50072</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50073"> <!-- System B phase to neutral voltage V2, 0.1*V -->
				<function>3</function>
				<start_addr>50073</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50075"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50076"> <!-- System B phase to phase voltage U31, 0.1*V -->
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50078"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50079"> <!-- System B phase to neutral voltage V3, 0.1*V -->
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
  			<value_ref_id valid="register_50081"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50081</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50082"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50083"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50083</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50084"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50085"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50086"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50087"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
  			<value_ref_id valid="register_50088"> <!-- Bit register for status and alarms -->
				<function>3</function>
				<start_addr>50088</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

<!--
Bulk read for performance. Recommended max 30 registers to ensure RTU timing...

Remember, the packets length, i.e., the greater the number of registers read simultaneously, the lower immunity
(more CRC errors occurred). Simultaneously, the greater the number of registers to be read individually, the
more time is required for the polling devices.

In my case, no more three to five registers in the packet - a compromise between the minimum amount of CRC errors
and minimum time polling devices on non-quality link.
-->
			<packet>
				<function>3</function>
				<start_addr>50001</start_addr>
				<quantity>30</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>50031</start_addr>
				<quantity>12</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>6</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>50060</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>50063</start_addr>
				<quantity>26</quantity>
			</packet>
        	</modbus>
	</protocol>
</APC_DDF>
