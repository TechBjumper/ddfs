<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="onis_visa_powerfull-s"
	ddfname="Onis_Visa_S.p.A_Powerfull-S"
	ddfversion="1"
	canremove="yes">
  <schemaVersion>1.6</schemaVersion>
  <device deviceid="OnisVisaS.p.A-powerfulls">
    <setProductData ruleid="vendordata" field="vendor">Onis Visa S.p.A</setProductData>
    <setProductData ruleid="modeldata" field="model">POWERFULL S</setProductData>
    <setProductData ruleid="typedata" field="type">Generator</setProductData>
	
    <numSensor ruleid="programmed_maintenance">
      <type>num</type>
      <units />
      <sensorId>_PROGRAMMED_MAINTENANCE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_14</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Programmed maintenance</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="ore0_hours_run">
      <type>runhours</type>
      <units />
      <sensorId>_ORE0_HOURS_RUN</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_15</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Ore0 hours run</label>
      <sensorSet>Run Hours</sensorSet>
    </numSensor>
    <numSensor ruleid="ore1_hours_run">
      <type>runhours</type>
      <units />
      <sensorId>_ORE1_HOURS_RUN</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_16</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Ore1 hours run</label>
      <sensorSet>Run Hours</sensorSet>
    </numSensor>
    <numSensor ruleid="kilowatt_meter_phase_r">
      <type>num/powerKW</type>
      <units />
      <sensorId>_KILOWATT_METER_PHASE_R</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_17</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Kilowatt meter phase r</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="wahr1">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHR1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_18</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Wahr1</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="wahr2">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHR2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_19</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Wahr2</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="wahso">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHSO</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_20</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Wahso</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="wahs1">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHS1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_21</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Wahs1</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="wahs2">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHS2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_22</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Wahs2</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="waht0">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHT0</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_23</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Waht0</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="waht1">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHT1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_24</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Waht1</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="waht2">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WAHT2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_25</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Waht2</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="number_of_starting_attempts">
      <type>num</type>
      <units />
      <sensorId>_NUMBER_OF_STARTING_ATTEMPTS</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_26</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Number of starting attempts</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="number_of_starts">
      <type>num</type>
      <units />
      <sensorId>_NUMBER_OF_STARTS</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_27</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Number of starts</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="au_v_rs_mains_voltage-phase">
      <type>voltage</type>
      <units />
      <sensorId>_AU_V_RS_MAINS_VOLTAGE-PHASE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_50</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Au_v_rs mains voltage-phase</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="au_v_st_mains_voltage-phase-phase_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_AU_V_ST_MAINS_VOLTAGE-PHASE-PHASE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_51</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Au_v_st mains voltage-phase-phase in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="au_v_tr_mains_voltage-phase-phase_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_AU_V_TR_MAINS_VOLTAGE-PHASE-PHASE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_52</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Au_v_tr mains voltage-phase-phase in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="au_frq_mains-frequency">
      <type>frequency</type>
      <units />
      <sensorId>_AU_FRQ_MAINS-FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_53</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Au_frq mains-frequency</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="analogue_input_1m2">
      <type>num</type>
      <units />
      <sensorId>_ANALOGUE_INPUT_1M2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_58</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Analogue input 1m2</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="vacb_alternator_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_VACB_ALTERNATOR_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_60</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Vacb alternator voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="oil_pressure1">
      <type>pressure</type>
      <units />
      <sensorId>_OIL_PRESSURE1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_61</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Oil pressure1</label>
      <sensorSet>Pressure</sensorSet>
    </numSensor>
    <numSensor ruleid="water_temperature">
      <type>temp</type>
      <units />
      <sensorId>_WATER_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_62</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Water temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="vbat_battery_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_VBAT_BATTERY_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_63</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Vbat battery voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="oil_temperature">
      <type>temp</type>
      <units />
      <sensorId>_OIL_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_64</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Oil temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="alternator_ptc">
      <type>num</type>
      <units />
      <sensorId>_ALTERNATOR_PTC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_65</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Alternator ptc</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="fuel_level">
      <type>num</type>
      <units>percent</units>
      <sensorId>_FUEL_LEVEL</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_66</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Fuel level</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="maximum_current">
      <type>amperage</type>
      <units />
      <sensorId>_MAXIMUM_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_67</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Maximum current</label>
      <sensorSet>Current</sensorSet>
    </numSensor>
    <numSensor ruleid="maximum_genset_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_MAXIMUM_GENSET_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_68</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Maximum genset voltage</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="frequency">
      <type>frequency</type>
      <units />
      <sensorId>_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_69</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Frequency</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_r_phase-neutral_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_R_PHASE-NEUTRAL_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_70</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_r phase-neutral voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_s_phase-neutral_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_S_PHASE-NEUTRAL_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_71</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_s phase-neutral voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_t_phase-neutral_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_T_PHASE-NEUTRAL_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_72</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_t phase-neutral voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_rs_phase-phase_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_RS_PHASE-PHASE_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_73</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_rs phase-phase voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_st_phase-phase_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_ST_PHASE-PHASE_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_74</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_st phase-phase voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="v_tr_phase-phase_voltage_in_v">
      <type>voltage</type>
      <units />
      <sensorId>_V_TR_PHASE-PHASE_VOLTAGE_IN_V</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_75</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>V_tr phase-phase voltage in v</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="c_r_phase_current_in_a">
      <type>amperage</type>
      <units />
      <sensorId>_C_R_PHASE_CURRENT_IN_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_76</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>C_r phase current in a</label>
      <sensorSet>Current</sensorSet>
    </numSensor>
    <numSensor ruleid="c_s_phase_current_in_a">
      <type>amperage</type>
      <units />
      <sensorId>_C_S_PHASE_CURRENT_IN_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_77</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>C_s phase current in a</label>
      <sensorSet>Current</sensorSet>
    </numSensor>
    <numSensor ruleid="c_t_phase_current_in_a">
      <type>amperage</type>
      <units />
      <sensorId>_C_T_PHASE_CURRENT_IN_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_78</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>C_t phase current in a</label>
      <sensorSet>Current</sensorSet>
    </numSensor>
    <numSensor ruleid="vaa_r_apparent_power">
      <type>powerVA</type>
      <units />
      <sensorId>_VAA_R_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_79</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Vaa_r apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="vaa_s_apparent_power">
      <type>powerVA</type>
      <units />
      <sensorId>_VAA_S_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_80</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Vaa_s apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="vaa_t_apparent_power">
      <type>powerVA</type>
      <units />
      <sensorId>_VAA_T_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_81</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Vaa_t apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="watt_r_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WATT_R_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_82</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Watt_r active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="watt_s_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WATT_S_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_83</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Watt_s active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="watt_t_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_WATT_T_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_84</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Watt_t active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="cosfi_r_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_COSFI_R_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_85</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Cosfi_r power factor</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="cosfi_s_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_COSFI_S_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_86</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Cosfi_s power factor</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="cosfi_t_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_COSFI_T_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_87</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Cosfi_t power factor</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="var_r_reactive_powerr">
      <type>powerVA/powerVAR</type>
      <units />
      <sensorId>_VAR_R_REACTIVE_POWERR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_88</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Var_r reactive powerr</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="var_s_reactive_powerr">
      <type>powerVA/powerVAR</type>
      <units />
      <sensorId>_VAR_S_REACTIVE_POWERR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_89</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Var_s reactive powerr</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="var_t_reactive_powerr">
      <type>powerVA/powerVAR</type>
      <units />
      <sensorId>_VAR_T_REACTIVE_POWERR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_90</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Var_t reactive powerr</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
    <stateSensor ruleid="contactor_control_in_block">
      <type>state</type>
      <sensorId>_CONTACTOR_CONTROL_IN_BLOCK</sensorId>
      <value>
        <mapValue mapid="enable_disable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Contactor control in block</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="engine_cooling_-_protections_inserted">
      <type>state</type>
      <sensorId>_ENGINE_COOLING_-_PROTECTIONS_INSERTED</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Engine cooling - protections inserted</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="engine_running_-_protections_excluded">
      <type>state</type>
      <sensorId>_ENGINE_RUNNING_-_PROTECTIONS_EXCLUDED</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Engine running - protections excluded</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="engine_running_-_protections_inserted">
      <type>state</type>
      <sensorId>_ENGINE_RUNNING_-_PROTECTIONS_INSERTED</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Engine running - protections inserted</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="engine_stopping">
      <type>state</type>
      <sensorId>_ENGINE_STOPPING</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Engine stopping</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
	
    <stateSensor ruleid="manual_test_with_load">
      <type>state</type>
      <sensorId>_MANUAL_TEST_WITH_LOAD</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Manual test with load</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="start-cranking">
      <type>state</type>
      <sensorId>_START-CRANKING</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Start-cranking</label>
      <enum>yes_no_vm</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="start-pause">
      <type>state</type>
      <sensorId>_START-PAUSE</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Start-pause</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="start-wait">
      <type>state</type>
      <sensorId>_START-WAIT</sensorId>
      <value>
        <mapValue mapid="yes_no_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Start-wait</label>
      <enum>yes_no_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="type_of_start">
      <type>state</type>
      <sensorId>_TYPE_OF_START</sensorId>
      <value>
        <mapValue mapid="multicycle_onecycle_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Type of start</label>
      <enum>multicycle_onecycle_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
	    <valueMap ruleid="multicycle_onecycle_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="multicycle_onecycle_em">
			<label>One Cycle</label>
			<label>Multi Cycle</label>
		</enumMap>
		
		<valueMap ruleid="yes_no_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="yes_no_em">
			<label>No</label>
			<label>Yes</label>
		</enumMap>
	
    <stateSensor ruleid="alarms_on_d">
      <type>state</type>
      <sensorId>_ALARMS_ON_D</sensorId>
      <value>
        <mapValue mapid="disable_enable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarms on d</label>
      <enum>disable_enable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="disable_enable_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="disable_enable_em">
			<label>Enable</label>
			<label>Disable</label>
		</enumMap>
	
    <stateSensor ruleid="alternator_voltage">
      <type>state</type>
      <sensorId>_ALTERNATOR_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="alternator_voltage_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alternator voltage</label>
      <enum>alternator_voltage_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="alternator_voltage_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="alternator_voltage_em">
			<label>50Hz</label>
			<label>60Hz</label>
		</enumMap>
	
	
    <stateSensor ruleid="battery_voltage">
      <type>state</type>
      <sensorId>_BATTERY_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="battery_voltage_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery voltage</label>
      <enum>battery_voltage_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="battery_voltage_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="battery_voltage_em">
			<label>12Vdc</label>
			<label>24Vdc</label>
		</enumMap>
	
	
    <stateSensor ruleid="change_alarms_into_warnings">
      <type>state</type>
      <sensorId>_CHANGE_ALARMS_INTO_WARNINGS</sensorId>
      <value>
        <mapValue mapid="enable_disable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Change alarms into warnings</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="check_isolated_ipo_wire">
      <type>state</type>
      <sensorId>_CHECK_ISOLATED_IPO_WIRE</sensorId>
      <value>
        <mapValue mapid="disable_enable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Check isolated ipo wire</label>
      <enum>disable_enable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
	
    <stateSensor ruleid="measurement_system">
      <type>state</type>
      <sensorId>_MEASUREMENT_SYSTEM</sensorId>
      <value>
        <mapValue mapid="measurement_system_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Measurement system</label>
      <enum>measurement_system_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
	<valueMap ruleid="measurement_system_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="measurement_system_em">
			<label>m,k,s</label>
			<label>Imperial</label>
		</enumMap>
	
	
    <stateSensor ruleid="overspeed_protection">
      <type>state</type>
      <sensorId>_OVERSPEED_PROTECTION</sensorId>
      <value>
        <mapValue mapid="disable_enable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Overspeed protection</label>
      <enum>disable_enable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="power_measurement">
      <type>state</type>
      <sensorId>_POWER_MEASUREMENT</sensorId>
      <value>
        <mapValue mapid="enable_disable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Power measurement</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="remote_function">
      <type>state</type>
      <sensorId>_REMOTE_FUNCTION</sensorId>
      <value>
        <mapValue mapid="enable_disable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Remote function</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="underspeed_protection">
      <type>state</type>
      <sensorId>_UNDERSPEED_PROTECTION</sensorId>
      <value>
        <mapValue mapid="disable_enable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Underspeed protection</label>
      <enum>disable_enable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="warning_if_not_in_automatic_mode">
      <type>state</type>
      <sensorId>_WARNING_IF_NOT_IN_AUTOMATIC_MODE</sensorId>
      <value>
        <mapValue mapid="enable_disable_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning if not in automatic mode</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="warning_:_alarms_in_warning_mode">
      <type>state</type>
      <sensorId>_WARNING_:_ALARMS_IN_WARNING_MODE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : alarms in warning mode</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
	
	    <valueMap ruleid="enable_disable_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="enable_disable_em">
			<label>Inactive</label>
			<label>Active</label>
		</enumMap>
	
    <stateSensor ruleid="warning_:_analogue_input_3">
      <type>state</type>
      <sensorId>_WARNING_:_ANALOGUE_INPUT_3</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : analogue input 3</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_cooling_liquid_level">
      <type>state</type>
      <sensorId>_WARNING_:_COOLING_LIQUID_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : cooling liquid level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_free_automatic_input_1">
      <type>state</type>
      <sensorId>_WARNING_:_FREE_AUTOMATIC_INPUT_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : free automatic input 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_fuel_level,_alno">
      <type>state</type>
      <sensorId>_WARNING_:_FUEL_LEVEL,_ALNO</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : fuel level, alno</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_fuel_reserve">
      <type>state</type>
      <sensorId>_WARNING_:_FUEL_RESERVE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : fuel reserve</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_high_engine_temperature">
      <type>state</type>
      <sensorId>_WARNING_:_HIGH_ENGINE_TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : high engine temperature</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_maximum_fuel_level_-_warning_flag">
      <type>state</type>
      <sensorId>_WARNING_:_MAXIMUM_FUEL_LEVEL_-_WARNING_FLAG</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : maximum fuel level - warning flag</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_minimum_fuel_level_-_warning_flag">
      <type>state</type>
      <sensorId>_WARNING_:_MINIMUM_FUEL_LEVEL_-_WARNING_FLAG</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : minimum fuel level - warning flag</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_oil_level">
      <type>state</type>
      <sensorId>_WARNING_:_OIL_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : oil level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_oil_pressure">
      <type>state</type>
      <sensorId>_WARNING_:_OIL_PRESSURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : oil pressure</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_oil_temperature,_aln2">
      <type>state</type>
      <sensorId>_WARNING_:_OIL_TEMPERATURE,_ALN2</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : oil temperature, aln2</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_ventilator_blocked">
      <type>state</type>
      <sensorId>_WARNING_:_VENTILATOR_BLOCKED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_5</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : ventilator blocked</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:__d+_wire_isolated">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:__D+_WIRE_ISOLATED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2:  d+ wire isolated</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_alternator_not_energised">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_ALTERNATOR_NOT_ENERGISED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: alternator not energised</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_automatic_card_fault">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_AUTOMATIC_CARD_FAULT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: automatic card fault</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_battery_charger_fault">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_BATTERY_CHARGER_FAULT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: battery charger fault</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_genset_not_in_automatic_mode">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_GENSET_NOT_IN_AUTOMATIC_MODE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: genset not in automatic mode</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_genset_voltage_asymmetry">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_GENSET_VOLTAGE_ASYMMETRY</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: genset voltage asymmetry</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_high_genset_current">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_HIGH_GENSET_CURRENT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: high genset current</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_high_genset_voltage">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_HIGH_GENSET_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: high genset voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_high_v_bat">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_HIGH_V_BAT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: high v bat</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_low_engine_temperature">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_LOW_ENGINE_TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: low engine temperature</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_low_genset_voltage">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_LOW_GENSET_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: low genset voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_low_v_bat">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_LOW_V_BAT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: low v bat</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_maintenance_required">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_MAINTENANCE_REQUIRED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: maintenance required</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_maximum_fuel_level_2">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_MAXIMUM_FUEL_LEVEL_2</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: maximum fuel level 2</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_overspeed">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_OVERSPEED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: overspeed</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_flag_2:_underspeed">
      <type>state</type>
      <sensorId>_WARNING_FLAG_2:_UNDERSPEED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_6</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning flag 2: underspeed</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Warning Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_alarms_in_warning_mode">
      <type>state</type>
      <sensorId>_ALARM_:_ALARMS_IN_WARNING_MODE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : alarms in warning mode</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_analogue_input_3,">
      <type>state</type>
      <sensorId>_ALARM_:_ANALOGUE_INPUT_3,</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : analogue input 3,</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_cooling_liquid_level">
      <type>state</type>
      <sensorId>_ALARM_:_COOLING_LIQUID_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : cooling liquid level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_emergency_button">
      <type>state</type>
      <sensorId>_ALARM_:_EMERGENCY_BUTTON</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : emergency button</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_free_automatic_input_1">
      <type>state</type>
      <sensorId>_ALARM_:_FREE_AUTOMATIC_INPUT_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : free automatic input 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_fuel_level,_alno,">
      <type>state</type>
      <sensorId>_ALARM_:_FUEL_LEVEL,_ALNO,</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : fuel level, alno,</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_fuel_reserve">
      <type>state</type>
      <sensorId>_ALARM_:_FUEL_RESERVE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : fuel reserve</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_high_engine_temperature">
      <type>state</type>
      <sensorId>_ALARM_:_HIGH_ENGINE_TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : high engine temperature</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_maximum_fuel_level-alarm_flag_1">
      <type>state</type>
      <sensorId>_ALARM_:_MAXIMUM_FUEL_LEVEL-ALARM_FLAG_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : maximum fuel level-alarm flag 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_minimum_fuel_level-alarm_flag_1">
      <type>state</type>
      <sensorId>_ALARM_:_MINIMUM_FUEL_LEVEL-ALARM_FLAG_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : minimum fuel level-alarm flag 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_oil_level">
      <type>state</type>
      <sensorId>_ALARM_:_OIL_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : oil level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_oil_pressure">
      <type>state</type>
      <sensorId>_ALARM_:_OIL_PRESSURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : oil pressure</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_oil_temperature,_aln2">
      <type>state</type>
      <sensorId>_ALARM_:_OIL_TEMPERATURE,_ALN2</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : oil temperature, aln2</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_ventilator_blocked">
      <type>state</type>
      <sensorId>_ALARM_:_VENTILATOR_BLOCKED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_7</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : ventilator blocked</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 1</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_alternator_not_energised">
      <type>state</type>
      <sensorId>_ALARM_:_ALTERNATOR_NOT_ENERGISED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : alternator not energised</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_d+_wire_isolated">
      <type>state</type>
      <sensorId>_ALARM_:_D+_WIRE_ISOLATED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : d+ wire isolated</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_general_system">
      <type>state</type>
      <sensorId>_ALARM_:_GENERAL_SYSTEM</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : general system</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_genset_voltage_asymmetry">
      <type>state</type>
      <sensorId>_ALARM_:_GENSET_VOLTAGE_ASYMMETRY</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : genset voltage asymmetry</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_high_genset_current">
      <type>state</type>
      <sensorId>_ALARM_:_HIGH_GENSET_CURRENT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : high genset current</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_high_genset_voltage">
      <type>state</type>
      <sensorId>_ALARM_:_HIGH_GENSET_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : high genset voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_isolated_oil_pressure_wire">
      <type>state</type>
      <sensorId>_ALARM_:_ISOLATED_OIL_PRESSURE_WIRE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : isolated oil pressure wire</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_low_genset_voltage">
      <type>state</type>
      <sensorId>_ALARM_:_LOW_GENSET_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : low genset voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_mechanical_arrest">
      <type>state</type>
      <sensorId>_ALARM_:_MECHANICAL_ARREST</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : mechanical arrest</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_missed_engine_stop">
      <type>state</type>
      <sensorId>_ALARM_:_MISSED_ENGINE_STOP</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : missed engine stop</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_missed_start">
      <type>state</type>
      <sensorId>_ALARM_:_MISSED_START</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : missed start</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_overspeed">
      <type>state</type>
      <sensorId>_ALARM_:_OVERSPEED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : overspeed</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_ptc_alternator_intervention">
      <type>state</type>
      <sensorId>_ALARM_:_PTC_ALTERNATOR_INTERVENTION</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : ptc alternator intervention</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_underspeed">
      <type>state</type>
      <sensorId>_ALARM_:_UNDERSPEED</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_8</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : underspeed</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm Flag 2</sensorSet>
    </stateSensor>
    <stateSensor ruleid="_analogue_input_3">
      <type>state</type>
      <sensorId>__ANALOGUE_INPUT_3</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>analogue input 3</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarms_in_warning_mode">
      <type>state</type>
      <sensorId>_ALARMS_IN_WARNING_MODE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarms in warning mode</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="blocked_ventilator">
      <type>state</type>
      <sensorId>_BLOCKED_VENTILATOR</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Blocked ventilator</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="cooling_liquid_level">
      <type>state</type>
      <sensorId>_COOLING_LIQUID_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Cooling liquid level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="emergency_button">
      <type>state</type>
      <sensorId>_EMERGENCY_BUTTON</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Emergency button</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="free_automatic_input_1">
      <type>state</type>
      <sensorId>_FREE_AUTOMATIC_INPUT_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Free automatic input 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="fuel_level,_alno">
      <type>state</type>
      <sensorId>_FUEL_LEVEL,_ALNO</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Fuel level, alno</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="high_engine_temperature">
      <type>state</type>
      <sensorId>_HIGH_ENGINE_TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>High engine temperature</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="maximum_fuel_level-digital_inputs">
      <type>state</type>
      <sensorId>_MAXIMUM_FUEL_LEVEL-DIGITAL_INPUTS</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Maximum fuel level-digital inputs</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="minimum_fuel_level-digital_inputs">
      <type>state</type>
      <sensorId>_MINIMUM_FUEL_LEVEL-DIGITAL_INPUTS</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Minimum fuel level-digital inputs</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="oil_level">
      <type>state</type>
      <sensorId>_OIL_LEVEL</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Oil level</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="oil_pressure">
      <type>state</type>
      <sensorId>_OIL_PRESSURE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Oil pressure</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="oil_temperature1">
      <type>state</type>
      <sensorId>_OIL_TEMPERATURE1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Oil temperature1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="remote_contact_1">
      <type>state</type>
      <sensorId>_REMOTE_CONTACT_1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Remote contact 1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="remote_contact_2">
      <type>state</type>
      <sensorId>_REMOTE_CONTACT_2</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_9</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Remote contact 2</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Digital Inputs</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_high_mains_voltage">
      <type>state</type>
      <sensorId>_ALARM_:_HIGH_MAINS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_33</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : high mains voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm : Automatic Alarm Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_low_mains_voltage">
      <type>state</type>
      <sensorId>_ALARM_:_LOW_MAINS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_33</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : low mains voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm : Automatic Alarm Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_mains_voltage_assymmetry">
      <type>state</type>
      <sensorId>_ALARM_:_MAINS_VOLTAGE_ASSYMMETRY</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_33</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : mains voltage assymmetry</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm : Automatic Alarm Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="alarm_:_one_phase_missing">
      <type>state</type>
      <sensorId>_ALARM_:_ONE_PHASE_MISSING</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_33</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alarm : one phase missing</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Alarm : Automatic Alarm Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_high_mains_voltage">
      <type>state</type>
      <sensorId>_WARNING_:_HIGH_MAINS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_34</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : high mains voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Warning Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_low_mains_voltage">
      <type>state</type>
      <sensorId>_WARNING_:_LOW_MAINS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_34</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : low mains voltage</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Warning Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_mains_voltage_asymmetry">
      <type>state</type>
      <sensorId>_WARNING_:_MAINS_VOLTAGE_ASYMMETRY</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_34</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : mains voltage asymmetry</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Warning Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="warning_:_one_phase_missing">
      <type>state</type>
      <sensorId>_WARNING_:_ONE_PHASE_MISSING</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_34</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Warning : one phase missing</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Warning Flag</sensorSet>
    </stateSensor>
    <stateSensor ruleid="automatic_selector_switch">
      <type>state</type>
      <sensorId>_AUTOMATIC_SELECTOR_SWITCH</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Automatic selector switch</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="free_input">
      <type>state</type>
      <sensorId>_FREE_INPUT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Free input</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="manual_selector_switch">
      <type>state</type>
      <sensorId>_MANUAL_SELECTOR_SWITCH</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Manual selector switch</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="maximum_fuel_level-automatic:_digital_inputs">
      <type>state</type>
      <sensorId>_MAXIMUM_FUEL_LEVEL-AUTOMATIC:_DIGITAL_INPUTS</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Maximum fuel level-automatic: digital inputs</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="minimum_fuel_level-automatic:_digital_inputs">
      <type>state</type>
      <sensorId>_MINIMUM_FUEL_LEVEL-AUTOMATIC:_DIGITAL_INPUTS</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Minimum fuel level-automatic: digital inputs</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="running_input">
      <type>state</type>
      <sensorId>_RUNNING_INPUT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Running input</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="stop_input">
      <type>state</type>
      <sensorId>_STOP_INPUT</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_35</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Stop input</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Automatic : Digital Input</sensorSet>
    </stateSensor>
    <stateSensor ruleid="system_status">
      <type>state</type>
      <sensorId>_SYSTEM_STATUS</sensorId>
      <value>
        <mapValue mapid="system_status_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_0</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>15</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>System status</label>
      <enum>system_status_em</enum>
      <sensorSet>System Status</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="system_status_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>3</valueIn><valueOut>3</valueOut>
			<valueIn>4</valueIn><valueOut>4</valueOut>
			<valueIn>5</valueIn><valueOut>5</valueOut>
			<valueIn>6</valueIn><valueOut>6</valueOut>
			<valueIn>7</valueIn><valueOut>7</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="system_status_em">
			<label>Power On</label>
			<label>Change Parameters</label>
			<label>Alarm</label>
			<label>Reserved</label>
			<label>Blocked</label>
			<label>Manual</label>
			<label>Automatic</label>
			<label>Test</label>
		</enumMap>
	
	
    <stateSensor ruleid="automatic_test">
      <type>state</type>
      <sensorId>_AUTOMATIC_TEST</sensorId>
      <value>
        <mapValue mapid="automatic_test_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Automatic test</label>
      <enum>automatic_test_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="automatic_test_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>3</valueIn><valueOut>3</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="automatic_test_em">
			<label>Disabled</label>
			<label>Daily</label>
			<label>Weekly</label>
			<label>Monthly</label>
		</enumMap>
		
<!--DCES-->
    <stateSensor ruleid="programmed_maintenance">
      <type>state</type>
      <sensorId>_MANUP_PROGRAMMED_MAINTENANCE</sensorId>
      <value>
        <mapValue mapid="enable_disable_em">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Programmed maintenance</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="current_alarm_function">
      <type>state</type>
      <sensorId>_CURRENT_ALARM_FUNCTION</sensorId>
      <value>
        <mapValue mapid="alarm_warning_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Current alarm function</label>
      <enum>alarm_warning_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="save_status_for_next_power-on">
      <type>state</type>
      <sensorId>_SAVE_STATUS_FOR_NEXT_POWER-ON</sensorId>
      <value>
        <mapValue mapid="enable_disable_em">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Save status for next power-on</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="mains_release_delay">
      <type>state</type>
      <sensorId>_MAINS_RELEASE_DELAY</sensorId>
      <value>
        <mapValue mapid="enable_disable_em">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Mains release delay</label>
      <enum>enable_disable_em</enum>
      <sensorSet>Engine Status</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="enable_disable_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="enable_disable_em">
			<label>Disable</label>
			<label>Enable</label>
		</enumMap>
	
		<valueMap ruleid="alarm_warning_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="alarm_warning_em">
			<label>Warning</label>
			<label>Alarm</label>
		</enumMap>
		
<!--DCES-->		
		
    <stateSensor ruleid="alternator_type">
      <type>state</type>
      <sensorId>_ALTERNATOR_TYPE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Alternator type</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
    <stateSensor ruleid="generating_set_type">
      <type>state</type>
      <sensorId>_GENERATING_SET_TYPE</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Generating set type</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
    <stateSensor ruleid="generating_set_type1">
      <type>state</type>
      <sensorId>_GENERATING_SET_TYPE1</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_2</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Generating set type1</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Device Configuration</sensorSet>
    </stateSensor>
    <stateSensor ruleid="contractor_status">
      <type>state</type>
      <sensorId>_CONTRACTOR_STATUS</sensorId>
      <value>
        <mapValue mapid="active_inactive_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_3</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Contractor status</label>
      <enum>active_inactive_em</enum>
      <sensorSet>Contractor Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_charger_current">
      <type>amperage</type>
      <sensorId>_BATTERY_CHARGER_CURRENT</sensorId>
      <value>
        <mapValue mapid="battery_charger_current_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_46</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery charger current</label>
      <enum>battery_charger_current_em</enum>
      <sensorSet>Battery Charger Current</sensorSet>
    </stateSensor>
  </device>
   
        <valueMap ruleid="enable_disable_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>3</valueIn><valueOut>3</valueOut>
			<valueIn>4</valueIn><valueOut>4</valueOut>
			<valueIn>5</valueIn><valueOut>5</valueOut>
			<valueIn>6</valueIn><valueOut>6</valueOut>
			<valueIn>7</valueIn><valueOut>7</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="enable_disable_em">
			<label>Battery charger not connected</label>
			<label>Slow charge</label>
			<label>Fast charge</label>
			<label>Pause</label>
			<label>Low Input voltage</label>
			<label>Battery not connected</label>
			<label>Low Battery voltage</label>
			<label>Charge failed</label>	
		</enumMap>
  
 <protocol>
    <modbus>
      <value_ref_id valid="Function_3_Reg_0">
        <function>3</function>
        <start_addr>-1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1">
        <function>3</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_2">
        <function>3</function>
        <start_addr>1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_3">
        <function>3</function>
        <start_addr>2</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
	  
      <value_ref_id valid="Function_3_Reg_5">
        <function>3</function>
        <start_addr>4</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      
	  <value_ref_id valid="Function_3_Reg_6">
        <function>3</function>
        <start_addr>5</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_7">
        <function>3</function>
        <start_addr>6</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
	  <value_ref_id valid="Function_3_Reg_8">
        <function>3</function>
        <start_addr>7</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_9">
        <function>3</function>
        <start_addr>8</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_14">
        <function>3</function>
        <start_addr>13</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_15">
        <function>3</function>
        <start_addr>14</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_16">
        <function>3</function>
        <start_addr>15</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_17">
        <function>3</function>
        <start_addr>16</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_18">
        <function>3</function>
        <start_addr>17</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_19">
        <function>3</function>
        <start_addr>18</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_20">
        <function>3</function>
        <start_addr>19</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_21">
        <function>3</function>
        <start_addr>20</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_22">
        <function>3</function>
        <start_addr>21</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_23">
        <function>3</function>
        <start_addr>22</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_24">
        <function>3</function>
        <start_addr>23</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_25">
        <function>3</function>
        <start_addr>24</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_26">
        <function>3</function>
        <start_addr>25</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_27">
        <function>3</function>
        <start_addr>26</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_33">
        <function>3</function>
        <start_addr>32</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_34">
        <function>3</function>
        <start_addr>33</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_35">
        <function>3</function>
        <start_addr>34</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_46">
        <function>3</function>
        <start_addr>45</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_50">
        <function>3</function>
        <start_addr>49</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_51">
        <function>3</function>
        <start_addr>50</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_52">
        <function>3</function>
        <start_addr>51</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_53">
        <function>3</function>
        <start_addr>52</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_58">
        <function>3</function>
        <start_addr>57</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_60">
        <function>3</function>
        <start_addr>59</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_61">
        <function>3</function>
        <start_addr>60</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_62">
        <function>3</function>
        <start_addr>61</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_63">
        <function>3</function>
        <start_addr>62</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_64">
        <function>3</function>
        <start_addr>63</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_65">
        <function>3</function>
        <start_addr>64</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_66">
        <function>3</function>
        <start_addr>65</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_67">
        <function>3</function>
        <start_addr>66</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_68">
        <function>3</function>
        <start_addr>67</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_69">
        <function>3</function>
        <start_addr>68</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_70">
        <function>3</function>
        <start_addr>69</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_71">
        <function>3</function>
        <start_addr>70</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_72">
        <function>3</function>
        <start_addr>71</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_73">
        <function>3</function>
        <start_addr>72</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_74">
        <function>3</function>
        <start_addr>73</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_75">
        <function>3</function>
        <start_addr>74</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_76">
        <function>3</function>
        <start_addr>75</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_77">
        <function>3</function>
        <start_addr>76</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_78">
        <function>3</function>
        <start_addr>77</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_79">
        <function>3</function>
        <start_addr>78</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_80">
        <function>3</function>
        <start_addr>79</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_81">
        <function>3</function>
        <start_addr>80</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_82">
        <function>3</function>
        <start_addr>81</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_83">
        <function>3</function>
        <start_addr>82</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_84">
        <function>3</function>
        <start_addr>83</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_85">
        <function>3</function>
        <start_addr>84</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_86">
        <function>3</function>
        <start_addr>85</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_87">
        <function>3</function>
        <start_addr>86</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_88">
        <function>3</function>
        <start_addr>87</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_89">
        <function>3</function>
        <start_addr>88</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_90">
        <function>3</function>
        <start_addr>89</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
    </modbus>
  </protocol>
</APC_DDF>
