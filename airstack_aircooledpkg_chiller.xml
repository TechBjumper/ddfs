<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
    ddfid="airstack_aircooledpkg_chiller"
    ddfname="Airstack Air Cooled Package Chiller"
    ddfversion="11"
    canremove="yes">
  <schemaVersion>1.6</schemaVersion>

  <device deviceid="airstack_aircooledpkg_chiller_num_sensors">
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

    <setProductData ruleid="vendordata" field="vendor">Airstack</setProductData>
    <setProductData ruleid="modeldata" field="model">Air Cooled Package Chiller</setProductData>
    <setProductData ruleid="typedata" field="type">Cooling Device</setProductData>
    <setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>

    <!-- System -->
    <numSensor ruleid="system_entering_chw_temp">
      <type>temp</type>
      <sensorId>SYSTEM_ENTERING_CHW_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>SYSTEM_ENTERING_CHW_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>System Entering CHW Temperature</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="system_lchw_temp">
      <type>temp</type>
      <sensorId>SYSTEM_LCHW_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>SYSTEM_LCHW_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>System LCHW Temperature</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="chiller_capacity">
      <type>num</type>
      <units>percent</units>
      <sensorId>CHILLER_CAPACITY</sensorId>
      <value>
        <getOid>CHILLER_CAPACITY</getOid>
      </value>
      <label>Chiller Capacity</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="chiller_demand">
      <type>num</type>
      <units>percent</units>
      <sensorId>CHILLER_DEMAND</sensorId>
      <value>
        <getOid>CHILLER_DEMAND</getOid>
      </value>
      <label>Chiller Demand</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="number_faults">
      <type>num</type>
      <sensorId>NUM_FAULTS</sensorId>
      <value>
        <getOid>NUM_OF_FAULTS</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Current Number Of Faults</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>
    
    <numSensor ruleid="lead_compressor">
      <type>num</type>
      <sensorId>LEAD_COMPRESSOR</sensorId>
      <value>
        <getOid>LEAD_COMPRESSOR</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Lead Compressor</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="total_load_profile_hours">
      <type>timeinhrs</type>
      <sensorId>TOTAL_LOAD_PROFILE_HOURS</sensorId>
      <value>
        <getOid>TOTAL_LOAD_PROFILE_HOURS</getOid>
      </value>
      <label>Total Load Profile Hours</label>
      <sensorSet>System Sensors</sensorSet>
    </numSensor>


    <!-- MODULE 1 -->
    <numSensor ruleid="mod_1_lchw_temp">
      <type>temp</type>
      <sensorId>MOD_1_LCHW_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_1_LCHW_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 1 - LCHW Temperature</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_circuit_1_suction_temp">
      <type>temp</type>
      <sensorId>MOD_1_CIRCUIT_1_SUCTION_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_1_CIR_1_SUCTION_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 1 - Circuit 1 - Suction Temperature</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_circuit_2_suction_temp">
      <type>temp</type>
      <sensorId>MOD_1_CIRCUIT_2_SUCTION_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_1_CIR_2_SUCTION_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 1 - Circuit 2 - Suction Temperature</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_1_run_hours">
      <type>timeinhrs</type>
      <sensorId>MOD_1_COMP_1_RUN_HOURS</sensorId>
      <value>
        <getOid>MOD_1_COMP_1_RUN_HOURS</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 1 - Run Hours</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_2_run_hours">
      <type>timeinhrs</type>
      <sensorId>MOD_1_COMP_2_RUN_HOURS</sensorId>
      <value>
        <getOid>MOD_1_COMP_2_RUN_HOURS</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 2 - Run Hours</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_1_high_pressure">
      <type>pressure</type>
      <sensorId>MOD_1_COMP_1_HIGH_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_1_COMP_1_HIGH_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 1 - High Pressure</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_1_low_pressure">
      <type>pressure</type>
      <sensorId>MOD_1_COMP_1_LOW_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_1_COMP_1_LOW_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 1 - Low Pressure</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_2_high_pressure">
      <type>pressure</type>
      <sensorId>MOD_1_COMP_2_HIGH_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_1_COMP_2_HIGH_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 2 - High Pressure</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_1_comp_2_low_pressure">
      <type>pressure</type>
      <sensorId>MOD_1_COMP_2_LOW_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_1_COMP_2_LOW_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 1 - Compressor 2 - Low Pressure</label>
      <sensorSet>Module 1 Sensors</sensorSet>
    </numSensor>

    <!-- MODULE 2 -->
    <numSensor ruleid="mod_2_lchw_temp">
      <type>temp</type>
      <sensorId>MOD_2_LCHW_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_2_LCHW_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 2 - LCHW Temperature</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_circuit_1_suction_temp">
      <type>temp</type>
      <sensorId>MOD_2_CIRCUIT_1_SUCTION_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_2_CIR_1_SUCTION_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 2 - Circuit 1 - Suction Temperature</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_circuit_2_suction_temp">
      <type>temp</type>
      <sensorId>MOD_2_CIRCUIT_2_SUCTION_TEMP</sensorId>
      <value>
        <!-- scaling: in / 10 = out  (Scale value before conversion) -->
        <!-- convert: (F - 32) / 1.8 = C -->
        <div>
          <op>
            <sub>
              <op>
                <div>
                  <op><getOid>MOD_2_CIR_2_SUCTION_TEMP</getOid></op>
                  <op>10</op>
                </div>
              </op>
              <op>32</op>
            </sub>
          </op>
          <op>1.8</op>
        </div>
      </value>
      <label>Module 2 - Circuit 2 - Suction Temperature</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_1_run_hours">
      <type>timeinhrs</type>
      <sensorId>MOD_2_COMP_1_RUN_HOURS</sensorId>
      <value>
        <getOid>MOD_2_COMP_1_RUN_HOURS</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 1 - Run Hours</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_2_run_hours">
      <type>timeinhrs</type>
      <sensorId>MOD_2_COMP_2_RUN_HOURS</sensorId>
      <value>
        <getOid>MOD_2_COMP_2_RUN_HOURS</getOid>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 2 - Run Hours</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_1_high_pressure">
      <type>pressure</type>
      <sensorId>MOD_2_COMP_1_HIGH_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_2_COMP_1_HIGH_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 1 - High Pressure</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_1_low_pressure">
      <type>pressure</type>
      <sensorId>MOD_2_COMP_1_LOW_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_2_COMP_1_LOW_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 1 - Low Pressure</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_2_high_pressure">
      <type>pressure</type>
      <sensorId>MOD_2_COMP_2_HIGH_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_2_COMP_2_HIGH_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 2 - High Pressure</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

    <numSensor ruleid="mod_2_comp_2_low_pressure">
      <type>pressure</type>
      <sensorId>MOD_2_COMP_2_LOW_PRESSURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>MOD_2_COMP_2_LOW_PRESSURE</getOid>
          </op>
          <op>6.89475 </op>
        </mult>
      </value>
      <!-- Make the number show up as a whole number -->
      <valueInc>1.0</valueInc>
      <label>Module 2 - Compressor 2 - Low Pressure</label>
      <sensorSet>Module 2 Sensors</sensorSet>
    </numSensor>

  </device>

  <device deviceid="airstack_aircooledpkg_chiller_state_sensors">
    <oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

    <!-- System -->
    <stateSensor ruleid="chiller_status">
      <type>state</type>
      <sensorId>CHILLER_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>CHILLER_STATUS</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Chiller Status</label>
      <enum>off_on_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="low_chw_flow">
      <type>state</type>
      <sensorId>LOW_CHW_FLOW</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                       <getOid>LOW_CHW_FLOW</getOid>
                    </op>
                    <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Low CHW Flow</label>
      <enum>normal_low_flow_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="power_phase_monitor">
      <type>state</type>
      <sensorId>POWER_PHASE_MONITOR</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>POWER_PHASE_MONITOR</getOid>
                    </op>
                    <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Power Phase Monitor</label>
      <enum>normal_alarm_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="remote_start_stop">
      <type>state</type>
      <sensorId>REMOTE_START_STOP</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>REMOTE_START_STOP</getOid>
                    </op>
                    <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Remote Start/Stop</label>
      <enum>start_stop_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="ex_1_fault">
      <type>state</type>
      <sensorId>EX_1_FAULT</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>EX_1_FAULT</getOid>
                    </op>
                    <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>EX 1 Input Fault</label>
      <enum>normal_alarm_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="system_low_lchw_temp">
      <type>state</type>
      <sensorId>SYSTEM_LOW_LCHW_TEMP</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>SYSTEM_LOW_LCHW_TEMP</getOid>
                    </op>
                    <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>System Low LCHW Temp</label>
      <enum>normal_low_temp_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="system_lchw_sensor_status">
      <type>state</type>
      <sensorId>SYSTEM_LCHW_SENSOR_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>SYSTEM_LCHW_SENSOR_STATUS</getOid>
                    </op>
                    <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>System LCHW Sensor Failure</label>
      <enum>normal_failed_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="system_echw_sensor_status">
      <type>state</type>
      <sensorId>SYSTEM_ECHW_SENSOR_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>SYSTEM_ECHW_SENSOR_STATUS</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>System ECHW Sensor Failure</label>
      <enum>normal_failed_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="global_alarm">
      <type>state</type>
      <sensorId>GLOBAL_ALARM</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>CHILLER_GLOBAL_ALARM</getOid>
                    </op>
                    <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Global Alarm</label>
      <enum>normal_alarm_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="chiller_ctrl">
      <type>state</type>
      <sensorId>CHILLER_CTRL</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>CHILLER_CTRL</getOid>
                    </op>
                    <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Chiller Control</label>
      <enum>off_on_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <!-- MODULE 1 -->
    <stateSensor ruleid="mod_1_fault_cond">
      <type>state</type>
      <sensorId>MOD_1_FAULT_COND</sensorId>
      <value>
        <mapValue mapid="module_fault_vm">
          <getOid>MOD_1_FAULT_COND</getOid>
        </mapValue>
      </value>
      <label>Module 1 - Fault Condition</label>
      <enum>module_fault_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_ctrl_mode">
      <type>state</type>
      <sensorId>MOD_1_CTRL_MODE</sensorId>
      <value>
        <mapValue mapid="ctrl_mode_vm">
          <getOid>MOD_1_CTRL_MODE</getOid>
        </mapValue>
      </value>
      <label>Module 1 - Control Mode</label>
      <enum>ctrl_mode_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_comp_1_run_status">
      <type>state</type>
      <sensorId>MOD_1_COMP_1_RUN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>MOD_1_COMP_1_RUN_STATUS</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 1 - Compressor 1 - Run Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_comp_2_run_status">
      <type>state</type>
      <sensorId>MOD_1_COMP_2_RUN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_1_COMP_2_RUN_STATUS</getOid>
                    </op>
                    <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 1 - Compressor 2 - Run Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_comm_status">
      <type>state</type>
      <sensorId>MOD_1_COMM_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_1_COMM_STATUS</getOid>
                    </op>
                    <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 1 - Communications Status</label>
      <enum>normal_failed_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_comp_1_fan_status">
      <type>state</type>
      <sensorId>MOD_1_COMP_1_FAN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_1_COMP_1_FAN_STATUS</getOid>
                    </op>
                    <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 1 - Compressor 1 - Fan Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_1_comp_2_fan_status">
      <type>state</type>
      <sensorId>MOD_1_COMP_2_FAN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_1_COMP_2_FAN_STATUS</getOid>
                    </op>
                    <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 1 - Compressor 2 - Fan Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 1 Sensors</sensorSet>
    </stateSensor>

    <!-- MODULE 2 -->
    <stateSensor ruleid="mod_2_fault_cond">
      <type>state</type>
      <sensorId>MOD_2_FAULT_COND</sensorId>
      <value>
        <mapValue mapid="module_fault_vm">
          <getOid>MOD_2_FAULT_COND</getOid>
        </mapValue>
      </value>
      <label>Module 2 - Fault Condition</label>
      <enum>module_fault_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_ctrl_mode">
      <type>state</type>
      <sensorId>MOD_2_CTRL_MODE</sensorId>
      <value>
        <mapValue mapid="ctrl_mode_vm">
          <getOid>MOD_2_CTRL_MODE</getOid>
        </mapValue>
      </value>
      <label>Module 2 - Control Mode</label>
      <enum>ctrl_mode_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_comp_1_run_status">
      <type>state</type>
      <sensorId>MOD_2_COMP_1_RUN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_2_COMP_1_RUN_STATUS</getOid>
                    </op>
                    <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 2 - Compressor 1 - Run Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_comp_2_run_status">
      <type>state</type>
      <sensorId>MOD_2_COMP_2_RUN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_2_COMP_2_RUN_STATUS</getOid>
                    </op>
                    <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 2 - Compressor 2 - Run Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_comm_status">
      <type>state</type>
      <sensorId>MOD_2_COMM_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_2_COMM_STATUS</getOid>
                    </op>
                    <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 2 - Communications Status</label>
      <enum>normal_failed_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_comp_1_fan_status">
      <type>state</type>
      <sensorId>MOD_2_COMP_1_FAN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_2_COMP_1_FAN_STATUS</getOid>
                    </op>
                    <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 2 - Compressor 1 - Fan Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="mod_2_comp_2_fan_status">
      <type>state</type>
      <sensorId>MOD_2_COMP_2_FAN_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <!-- Coil registers are combined into packets.  Need to get just bit for this rule -->
          <formatNumber>
            <bitwise_and>
              <op>
                <right_shift>
                    <op>
                <getOid>MOD_2_COMP_2_FAN_STATUS</getOid>
                    </op>
                    <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module 2 - Compressor 2 - Fan Status</label>
      <enum>off_on_em</enum>
      <sensorSet>Module 2 Sensors</sensorSet>
    </stateSensor>


    <stateSensor ruleid="hi_lchw_temp_warning_status">
      <type>state</type>
      <sensorId>HI_LCHW_TEMP_WARNING_STATUS</sensorId>
      <value>
        <mapValue mapid="state_vm">
          <getOid>HI_LCHW_WARNING_STATUS</getOid>
        </mapValue>
      </value>
      <label>High Chiller Water Temp Status</label>
      <enum>normal_alarm_em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <!-- All State sensors (except Control Mode and Module Fault) use state_vm or state_reversed_vm -->
    <valueMap ruleid="state_vm">
      <valueIn>0</valueIn><valueOut>0</valueOut>
      <valueIn>1</valueIn><valueOut>1</valueOut>
      <valueIn>*</valueIn><valueOut>*</valueOut>
    </valueMap>

    <valueMap ruleid="state_reversed_vm">
      <valueIn>0</valueIn><valueOut>1</valueOut>
      <valueIn>1</valueIn><valueOut>0</valueOut>
      <valueIn>*</valueIn><valueOut>2</valueOut>
    </valueMap>

    <enumMap ruleid="off_on_em">
      <label>Off</label>
      <label>On</label>
      <label>Unknown</label>
    </enumMap>

    <enumMap ruleid="normal_low_flow_em">
      <label>Normal</label>
      <label>Low Flow</label>
      <label>Unknown</label>
    </enumMap>

    <enumMap ruleid="normal_low_temp_em">
      <label>Normal</label>
      <label>Low Temp</label>
      <label>Unknown</label>
    </enumMap>

    <enumMap ruleid="normal_alarm_em">
      <label>Normal</label>
      <label>Alarm</label>
      <label>Unknown</label>
    </enumMap>

    <enumMap ruleid="normal_failed_em">
      <label>Normal</label>
      <label>Failed</label>
      <label>Unknown</label>
    </enumMap>

    <enumMap ruleid="start_stop_em">
      <label>Start</label>
      <label>Stopped</label>
      <label>Unknown</label>
    </enumMap>

    <valueMap ruleid="ctrl_mode_vm">
      <valueIn>1</valueIn><valueOut>1</valueOut>
      <valueIn>2</valueIn><valueOut>2</valueOut>
      <valueIn>3</valueIn><valueOut>3</valueOut>
      <valueIn>4</valueIn><valueOut>4</valueOut>
      <valueIn>*</valueIn><valueOut>0</valueOut>
    </valueMap>

    <enumMap ruleid="ctrl_mode_em">
      <label>Unknown</label>
      <label>Auto</label>
      <label>Manual</label>
      <label>Disabled</label>
      <label>Override</label>
    </enumMap>

    <valueMap ruleid="module_fault_vm">
      <valueIn>0</valueIn><valueOut>0</valueOut>
      <valueIn>1</valueIn><valueOut>1</valueOut>
      <valueIn>2</valueIn><valueOut>2</valueOut>
      <valueIn>3</valueIn><valueOut>3</valueOut>
      <valueIn>4</valueIn><valueOut>4</valueOut>
      <valueIn>5</valueIn><valueOut>5</valueOut>
      <valueIn>6</valueIn><valueOut>6</valueOut>
      <valueIn>7</valueIn><valueOut>7</valueOut>
      <valueIn>8</valueIn><valueOut>8</valueOut>
      <valueIn>9</valueIn><valueOut>9</valueOut>
      <valueIn>10</valueIn><valueOut>10</valueOut>
      <valueIn>11</valueIn><valueOut>11</valueOut>
      <valueIn>12</valueIn><valueOut>12</valueOut>
      <valueIn>13</valueIn><valueOut>13</valueOut>
      <valueIn>14</valueIn><valueOut>14</valueOut>
      <valueIn>15</valueIn><valueOut>15</valueOut>
      <valueIn>16</valueIn><valueOut>16</valueOut>
      <valueIn>17</valueIn><valueOut>17</valueOut>
      <valueIn>18</valueIn><valueOut>18</valueOut>
      <valueIn>19</valueIn><valueOut>19</valueOut>
      <valueIn>20</valueIn><valueOut>20</valueOut>
      <valueIn>21</valueIn><valueOut>21</valueOut>
      <valueIn>22</valueIn><valueOut>22</valueOut>
      <valueIn>*</valueIn><valueOut>23</valueOut>
    </valueMap>

    <enumMap ruleid="module_fault_em">
      <label>No Alarms</label>                  <!-- 00 -->
      <label>Not Used</label>                   <!-- 01 -->
      <label>Circuit Fault CIR 2</label>        <!-- 02 -->
      <label>Circuit Fault CIR 1</label>        <!-- 03 -->
      <label>High Pressure CIR 1</label>        <!-- 04 -->
      <label>Low Pressure CIR 1</label>         <!-- 05 -->
      <label>Low LCHW Temp Fault</label>        <!-- 06 -->
      <label>Low Suction Temp CIR 1</label>     <!-- 07 -->
      <label>Suction CIR 1 Sensor Fail</label>  <!-- 08 -->
      <label>LCHW Sensor Fail</label>           <!-- 09 -->
      <label>Disabled</label>                   <!-- 10 -->
      <label>Manual Mode</label>                <!-- 11 -->
      <label>HP CIR 1 Sensor Fail</label>       <!-- 12 -->
      <label>LP CIR 1 Sensor Fail</label>       <!-- 13 -->
      <label>HP CIR 2 Sensor Fail</label>       <!-- 14 -->
      <label>LP CIR 2 Sensor Fail</label>       <!-- 15 -->
      <label>Suction CIR 2 Sensor Fail</label>  <!-- 16 -->
      <label>High Pressure CIR 2</label>        <!-- 17 -->
      <label>Low Pressure CIR 2</label>         <!-- 18 -->
      <label>Low Suction Temp CIR 2</label>     <!-- 19 -->
      <label>Module - Phase Alarm</label>       <!-- 20 -->
      <label>Module - No CHW Flow</label>       <!-- 21 -->
      <label>Override Operation</label>         <!-- 22 -->
      <label>Unknown</label>                    <!-- 23 -->
    </enumMap>
  </device>

  <protocol>
    <modbus>
      <value_ref_id valid="SYSTEM_ENTERING_CHW_TEMP">
        <function>3</function>
        <start_addr>0001</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="SYSTEM_LCHW_TEMP">
        <function>3</function>
        <start_addr>0002</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_LCHW_TEMP">
        <function>3</function>
        <start_addr>0009</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="MOD_1_CIR_1_SUCTION_TEMP">
        <function>3</function>
        <start_addr>0010</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_CIR_2_SUCTION_TEMP">
        <function>3</function>
        <start_addr>0011</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="MOD_2_LCHW_TEMP">
        <function>3</function>
        <start_addr>0012</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_CIR_1_SUCTION_TEMP">
        <function>3</function>
        <start_addr>0013</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_CIR_2_SUCTION_TEMP">
        <function>3</function>
        <start_addr>0014</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="CHILLER_CAPACITY">
        <function>3</function>
        <start_addr>0129</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="CHILLER_DEMAND">
        <function>3</function>
        <start_addr>0130</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="NUM_OF_FAULTS">
        <function>3</function>
        <start_addr>0133</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="LEAD_COMPRESSOR">
        <function>3</function>
        <start_addr>0134</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="TOTAL_LOAD_PROFILE_HOURS">
        <function>3</function>
        <start_addr>0160</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_FAULT_COND">
        <function>3</function>
        <start_addr>0161</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_1_RUN_HOURS">
        <function>3</function>
        <start_addr>0162</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_2_RUN_HOURS">
        <function>3</function>
        <start_addr>0163</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="MOD_1_COMP_1_HIGH_PRESSURE">
        <function>3</function>
        <start_addr>0164</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_1_LOW_PRESSURE">
        <function>3</function>
        <start_addr>0165</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_2_HIGH_PRESSURE">
        <function>3</function>
        <start_addr>0166</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_2_LOW_PRESSURE">
        <function>3</function>
        <start_addr>0167</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_CTRL_MODE">
        <function>3</function>
        <start_addr>0168</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_FAULT_COND">
        <function>3</function>
        <start_addr>0169</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_1_RUN_HOURS">
        <function>3</function>
        <start_addr>0170</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_2_RUN_HOURS">
        <function>3</function>
        <start_addr>0171</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_1_HIGH_PRESSURE">
        <function>3</function>
        <start_addr>0172</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_1_LOW_PRESSURE">
        <function>3</function>
        <start_addr>0173</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_2_HIGH_PRESSURE">
        <function>3</function>
        <start_addr>0174</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_2_LOW_PRESSURE">
        <function>3</function>
        <start_addr>0175</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_CTRL_MODE">
        <function>3</function>
        <start_addr>0176</start_addr>
        <quantity>1</quantity>
        <type>int_16</type>
      </value_ref_id>

      <value_ref_id valid="CHILLER_STATUS">
        <function>1</function>
        <start_addr>0001</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="LOW_CHW_FLOW">
        <function>1</function>
        <start_addr>0002</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="POWER_PHASE_MONITOR">
        <function>1</function>
        <start_addr>0003</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="REMOTE_START_STOP">
        <function>1</function>
        <start_addr>0004</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="EX_1_FAULT">
        <function>1</function>
        <start_addr>0005</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="SYSTEM_LOW_LCHW_TEMP">
        <function>1</function>
        <start_addr>0006</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="SYSTEM_LCHW_SENSOR_STATUS">
        <function>1</function>
        <start_addr>0007</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="SYSTEM_ECHW_SENSOR_STATUS">
        <function>1</function>
        <start_addr>0008</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="CHILLER_GLOBAL_ALARM">
        <function>1</function>
        <start_addr>0009</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="CHILLER_CTRL">
        <function>1</function>
        <start_addr>0010</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="MOD_1_COMP_1_RUN_STATUS">
        <function>1</function>
        <start_addr>0018</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_2_RUN_STATUS">
        <function>1</function>
        <start_addr>0019</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMM_STATUS">
        <function>1</function>
        <start_addr>0020</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_1_FAN_STATUS">
        <function>1</function>
        <start_addr>0021</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_1_COMP_2_FAN_STATUS">
        <function>1</function>
        <start_addr>0022</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="MOD_2_COMP_1_RUN_STATUS">
        <function>1</function>
        <start_addr>0023</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_2_RUN_STATUS">
        <function>1</function>
        <start_addr>0024</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMM_STATUS">
        <function>1</function>
        <start_addr>0025</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_1_FAN_STATUS">
        <function>1</function>
        <start_addr>0026</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="MOD_2_COMP_2_FAN_STATUS">
        <function>1</function>
        <start_addr>0027</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="HI_LCHW_WARNING_STATUS">
        <function>1</function>
        <start_addr>0064</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <packet>
        <function>1</function>
        <start_addr>0001</start_addr>
        <quantity>10</quantity>
      </packet>
      <packet>
        <function>1</function>
        <start_addr>0018</start_addr>
        <quantity>10</quantity>
      </packet>


      <packet>
        <function>3</function>
        <start_addr>0009</start_addr>
        <quantity>6</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>0129</start_addr>
        <quantity>6</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>0160</start_addr>
        <quantity>16</quantity>
      </packet>

    </modbus>
  </protocol>
</APC_DDF>