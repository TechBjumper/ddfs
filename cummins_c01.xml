<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="cummins_c01"
	ddfname="Cummins C01"
	ddfversion="1"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="cummins_c01">

		<setProductData ruleid="vendordata" field="vendor">Cummins</setProductData>
		<setProductData ruleid="modeldata" field="model">C01</setProductData>
		<setProductData ruleid="typedata" field="type">Generator</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		

		<numSensor ruleid="GENSET_CURRENT_AND_POWER_SENSOR">
            <type>num</type>
            <sensorId>genset_current_and_power</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>gensetcurrentandpower</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Genset Current and Power</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="VOLTAGE_REGISTER_2_SENSOR">
            <type>voltage</type>
            <sensorId>voltage_register_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>voltageregister2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Voltage Register 2</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="VOLTAGE_REGISTER_4_SENSOR">
            <type>voltage</type>
            <sensorId>voltage_register_4</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>voltageregister4</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Voltage Register 4</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="VOLTAGE_REGISTER_6_SENSOR">
            <type>voltage</type>
            <sensorId>voltage_register_6</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>voltageregister6</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Voltage Register 6</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="VOLTAGE_REGISTER_8_SENSOR">
            <type>voltage</type>
            <sensorId>voltage_register_8</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>voltageregister8</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Voltage Register 8</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="CURRENT_REGISTER_10_SENSOR">
            <type>amperage</type>
            <sensorId>current_register_10</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>currentregister10</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Current Register 10</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="CURRENT_REGISTER_12_SENSOR">
            <type>amperage</type>
            <sensorId>current_register_12</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>currentregister12</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Current Register 12</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="CURRENT_REGISTER_14_SENSOR">
            <type>amperage</type>
            <sensorId>current_register_14</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>currentregister14</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Current Register 14</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="CURRENT_REGISTER_16_SENSOR">
            <type>amperage</type>
            <sensorId>current_register_16</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>currentregister16</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Current Register 16</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="POWER_REGISTER_18_SENSOR">
            <type>num/powerKW</type>
            <sensorId>power_register_18</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>powerregister18</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Power Register 18</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="POWER_REGISTER_20_SENSOR">
            <type>num/powerKW</type>
            <sensorId>power_register_20</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>powerregister20</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Power Register 20</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="POWER_REGISTER_22_SENSOR">
            <type>num/powerKW</type>
            <sensorId>power_register_22</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>powerregister22</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Power Register 22</label>
            <sensorSet>ACM</sensorSet>
        </numSensor>
        <numSensor ruleid="ANALOG_INPUTS_SENSOR">
            <type>num</type>
            <sensorId>analog_inputs</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>analoginputs</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Analog Inputs</label>
            <sensorSet>ASI</sensorSet>
        </numSensor>
        <numSensor ruleid="CAN_INPUT_MESSAGES_REGISTER_26_SENSOR">
            <type>num</type>
            <sensorId>can_input_messages_register_26</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>caninputmessagesregister26</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>CAN Input Messages Register 26</label>
            <sensorSet>CAN</sensorSet>
        </numSensor>
        <numSensor ruleid="CAN_INPUT_MESSAGES_REGISTER_28_SENSOR">
            <type>num</type>
            <sensorId>can_input_messages_register_28</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>caninputmessagesregister28</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>CAN Input Messages Register 28</label>
            <sensorSet>CAN</sensorSet>
        </numSensor>
        <numSensor ruleid="CAN_INPUT_MESSAGES_REGISTER_30_SENSOR">
            <type>num</type>
            <sensorId>can_input_messages_register_30</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>caninputmessagesregister30</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>CAN Input Messages Register 30</label>
            <sensorSet>CAN</sensorSet>
        </numSensor>
        
		<enumMap ruleid="auto_em">
			<label>Off</label>
			<label>Auto</label>
			<label>Manual</label>
			<label>Unknown</label>
		</enumMap>

		<stateSensor ruleid="GC_START_STOP_CONTROL_SENSOR">
            <type>state</type>
            <sensorId>gc_start_stop_control</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>gcstartstopcontrol</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>GC Start Stop Control</label>
			<enum>auto_em</enum>            
			<sensorSet>CAN</sensorSet>
        </stateSensor>

		<enumMap ruleid="online_offline_em">
			<label>On Line</label>
			<label>Off Line</label>
			<label>Unkown</label>
		</enumMap>


        <stateSensor ruleid="COMMUNICATION_STATUS_SENSOR">
            <type>state</type>
            <sensorId>communication_status</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Communication Status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="COMMON_ALARM_SENSOR">
            <type>state</type>
            <sensorId>common_alarm</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Common Alarm</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="GENSET_RUNNING_SENSOR">
            <type>state</type>
            <sensorId>genset_running</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Genset Running</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="LOW_BATTERY_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>low_battery_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low Battery Voltage</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="FAIL_TO_START_SENSOR">
            <type>state</type>
            <sensorId>fail_to_start</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Fail to Start</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="LOW_COOLANT_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>low_coolant_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low Coolant Temperature</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="PRE_HIGH_ENGINE_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>pre_high_engine_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Pre-high Engine Temperature</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="HIGH_ENGINE_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>high_engine_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>High Engine Temperature</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="PRE_LOW_OIL_PRESSURE_SENSOR">
            <type>state</type>
            <sensorId>pre_low_oil_pressure</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Pre-low Oil Pressure</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="LOW_OIL_PRESSURE_SENSOR">
            <type>state</type>
            <sensorId>low_oil_pressure</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low Oil Pressure</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="OVERSPEED_SENSOR">
            <type>state</type>
            <sensorId>overspeed</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Overspeed</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="LOW_COOLANT_LEVEL_SENSOR">
            <type>state</type>
            <sensorId>low_coolant_level</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low Coolant Level</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="DESCRIPTION_SENSOR">
            <type>state</type>
            <sensorId>description</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Description</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="HIGH_AC_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>high_ac_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>High AC Voltage</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="LOW_AC_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>low_ac_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low AC Voltage</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="UNDER_FREQUENCY_SENSOR">
            <type>state</type>
            <sensorId>under_frequency</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Under Frequency</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Overload</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="OVERCURRENT_SENSOR">
            <type>state</type>
            <sensorId>overcurrent</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Overcurrent</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="REVERSE_KW_SENSOR">
            <type>state</type>
            <sensorId>reverse_kw</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reverse KW</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="REVERSE_KVAR_SENSOR">
            <type>state</type>
            <sensorId>reverse_kvar</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Overload</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="FAIL_TO_SYNC_SENSOR">
            <type>state</type>
            <sensorId>fail_to_sync</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Fail to Sync</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="FAIL_TO_CLOSE_SENSOR">
            <type>state</type>
            <sensorId>fail_to_close</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Fail to Close</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="EMERGENCY_STOP_SENSOR">
            <type>state</type>
            <sensorId>emergency_stop</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Emergency Stop</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

    </device>
    <protocol>
        <modbus>
            <value_ref_id valid="gensetcurrentandpower">
                <function>3</function>
                <start_addr>0</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="voltageregister2">
                <function>3</function>
                <start_addr>2</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="voltageregister4">
                <function>3</function>
                <start_addr>4</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="voltageregister6">
                <function>3</function>
                <start_addr>6</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="voltageregister8">
                <function>3</function>
                <start_addr>8</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="currentregister10">
                <function>3</function>
                <start_addr>10</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="currentregister12">
                <function>3</function>
                <start_addr>12</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="currentregister14">
                <function>3</function>
                <start_addr>14</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="currentregister16">
                <function>3</function>
                <start_addr>16</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="powerregister18">
                <function>3</function>
                <start_addr>18</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="powerregister20">
                <function>3</function>
                <start_addr>20</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="powerregister22">
                <function>3</function>
                <start_addr>22</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="analoginputs">
                <function>3</function>
                <start_addr>24</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="caninputmessagesregister26">
                <function>3</function>
                <start_addr>26</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="caninputmessagesregister28">
                <function>3</function>
                <start_addr>28</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="caninputmessagesregister30">
                <function>3</function>
                <start_addr>30</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="gcstartstopcontrol">
                <function>3</function>
                <start_addr>32</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="statusregister">
                <function>3</function>
                <start_addr>1000</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

			<value_ref_id valid="statusregister2">
                <function>3</function>
                <start_addr>1001</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>


		</modbus>
	</protocol>
</APC_DDF>