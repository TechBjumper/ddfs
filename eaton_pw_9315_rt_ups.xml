<?xml version="1.0"?>
<!-- Eaton Powerware 9315 RT UPS -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
        ddfid ="eaton_pw_9315_rt_ups" ddfname="Eaton Powerware 9315 RT UPS"
        ddfversion ="3" canremove="yes">
  <schemaVersion>1.6</schemaVersion>

  <device deviceid="Eaton_9315_header">
    <oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>
    <setProductData ruleid="typedata" field="type">UPS</setProductData>
    <setProductData ruleid="vendordata" field="vendor">Eaton Powerware</setProductData>
    <setProductData ruleid="modeldata" field="model">9315 RT UPS</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname/> - Slave <commSetting field="slaveaddress"/>
		</setDefaultLabel>

  </device>

  <device deviceid="Eaton_9315_sensors">
    <oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

    <stateSensor ruleid="system_status_Sensor">
      <type>state</type>
      <sensorId>SYSTEM_STATUS</sensorId>
      <value>
        <mapValue mapid="systemState-vm">
					<getOid>system_status_0</getOid>
					<getOid>system_status_1</getOid>
					<getOid>system_status_2</getOid>
					<getOid>system_status_3</getOid>
        </mapValue>
      </value>
      <label>System Status</label>
      <enum>systemState-em</enum>
      <sensorSet>State</sensorSet>
    </stateSensor>

    <valueMap ruleid="systemState-vm" >
			<valueIn>1100</valueIn>
			<valueOut>0</valueOut>
			<valueIn>0000</valueIn>
			<valueOut>1</valueOut>
			<valueIn>0110</valueIn>
			<valueOut>2</valueOut>
			<valueIn>0101</valueIn>
			<valueOut>3</valueOut>
			<valueIn>*</valueIn>
			<valueOut>4</valueOut>
    </valueMap>

    <enumMap ruleid="systemState-em">
      <label>On Battery</label>
      <label>On Bypass</label>
      <label>Normal</label>
      <label>UPS Off</label>
      <label>Unknown</label>
    </enumMap>

    <stateSensor ruleid="rectifier_status_Sensor">
      <type>state</type>
      <sensorId>RECTIVIER_STATUS</sensorId>
      <value>
        <mapValue mapid="reverseStatus-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>rectifier_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="bypass_status_Sensor">
      <type>state</type>
      <sensorId>BYPASS_STATUS</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>bypass_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="battery_disconnect_status_Sensor">
      <type>state</type>
      <sensorId>BATTERY_DISCONNECT_STATUS</sensorId>
      <value>
        <mapValue mapid="reverseStatus-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>battery_disconnect_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery Disconnect Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="inverter_status_Sensor">
      <type>state</type>
      <sensorId>INVERTER_STATUS</sensorId>
      <value>
        <mapValue mapid="reverseStatus-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>inverter_status</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="upm_notice_Sensor">
      <type>state</type>
      <sensorId>UPM_NOTICE</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>upm_notice</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>UPM Notice Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="upm_alarm_Sensor">
      <type>state</type>
      <sensorId>UPM_ALARM</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>upm_alarm</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>UPM Alarm Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_6_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_6</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_6</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 6 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_5_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_5</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_5</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 5 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_4_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_4</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_4</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 4 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_3_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_3</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_3</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 3 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_2_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_2</sensorId>
      <value>
        <mapValue mapid="reverseStatus-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_2</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 2 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="building_alarm_1_Sensor">
      <type>state</type>
      <sensorId>BUILDING_ALARM_1</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>building_alarm_1</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Building Alarm 1 Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="output_overload_Sensor">
      <type>state</type>
      <sensorId>OUTPUT_OVERLOAD</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>output_overload</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Output Overload Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="shutdown_imminent_Sensor">
      <type>state</type>
      <sensorId>SHUTDOWN_IMMINENT</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>shutdown_imminent</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Shutdown Imminent Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="battery_low_Sensor">
      <type>state</type>
      <sensorId>BATTERY_LOW</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>battery_low</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery Low Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="power_supply_failure_Sensor">
      <type>state</type>
      <sensorId>POWER_SUPPLY_FAILURE</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>power_supply_failure</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Power Supply Failure Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="battery_totally_discharged_Sensor">
      <type>state</type>
      <sensorId>BATTERY_TOTALLY_DISCHARGED</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>battery_totally_discharged</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery Totally Discharged Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="load_dumped_load_power_off_Sensor">
      <type>state</type>
      <sensorId>LOAD_DUMPED_LOAD_POWER_OFF</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>load_dumped_load_power_off</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Load Dumped (Load Power Off) Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="fan_failure_Sensor">
      <type>state</type>
      <sensorId>FAN_FAILURE</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>fan_failure</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Fan Failure Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="transformer_over_temperature_Sensor">
      <type>state</type>
      <sensorId>TRANSFORMER_OVER_TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>transformer_over_temperature</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Transformer Over Temperature Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <stateSensor ruleid="input_breaker_failed_Sensor">
      <type>state</type>
      <sensorId>INPUT_BREAKER_FAILED</sensorId>
      <value>
        <mapValue mapid="status-vm">
          <formatNumber>
            <bitwise_and>
              <op>
                <getOid>input_breaker_failed</getOid>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Input Breaker Failed Status</label>
      <enum>alarm-em</enum>
      <sensorSet>State Sensors</sensorSet>
    </stateSensor>

    <numSensor ruleid="output_voltage_line_ab_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_LINE_AB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_line_ab</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Line AB</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="output_voltage_line_bc_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_LINE_BC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_line_bc</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Line BC</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="output_voltage_line_ca_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_LINE_CA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_line_ca</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Line CA</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="input_voltage_line_ab_Sensor">
      <type>voltage</type>
      <sensorId>INPUT_VOLTAGE_LINE_AB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_voltage_line_ab</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Voltage Line AB</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="input_voltage_line_bc_Sensor">
      <type>voltage</type>
      <sensorId>INPUT_VOLTAGE_LINE_BC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_voltage_line_bc</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Voltage Line BC</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="input_voltage_line_ca_Sensor">
      <type>voltage</type>
      <sensorId>INPUT_VOLTAGE_LINE_CA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_voltage_line_ca</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Voltage Line CA</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="input_current_phase_a_Sensor">
      <type>amperage</type>
      <sensorId>INPUT_CURRENT_PHASE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_current_phase_a</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Current Phase A</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="input_current_phase_b_Sensor">
      <type>amperage</type>
      <sensorId>INPUT_CURRENT_PHASE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_current_phase_b</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Current Phase B</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="input_current_phase_c_Sensor">
      <type>amperage</type>
      <sensorId>INPUT_CURRENT_PHASE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_current_phase_c</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Current Phase C</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="output_true_power_Sensor">
      <type>num/powerKW</type>
      <sensorId>OUTPUT_TRUE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_true_power</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output True Power</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="input_true_power_Sensor">
      <type>num/powerKW</type>
      <sensorId>INPUT_TRUE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_true_power</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input True Power</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="output_apparent_power_Sensor">
      <type>num/powerKVA</type>
      <sensorId>OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_apparent_power</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Apparent Power</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="input_apparent_power_Sensor">
      <type>num/powerKVA</type>
      <sensorId>INPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_apparent_power</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Apparent Power</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="output_power_factor_Sensor">
      <type>num/powerfactor</type>
      <sensorId>OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_power_factor</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <valueInc>0.01</valueInc>
      <label>Output Power Factor</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="input_power_factor_Sensor">
      <type>num/powerfactor</type>
      <sensorId>INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_power_factor</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <valueInc>0.01</valueInc>
      <label>Input Power Factor</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="output_frequency_Sensor">
      <type>frequency</type>
      <sensorId>OUTPUT_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_frequency</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Frequency</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="input_frequency_Sensor">
      <type>frequency</type>
      <sensorId>INPUT_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>input_frequency</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Input Frequency</label>
      <sensorSet>Input</sensorSet>
    </numSensor>

    <numSensor ruleid="battery_current_Sensor">
      <type>amperage</type>
      <sensorId>BATTERY_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>battery_current</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Battery Current</label>
      <sensorSet>Battery</sensorSet>
    </numSensor>

    <numSensor ruleid="battery_voltage_Sensor">
      <type>voltageDC</type>
      <sensorId>BATTERY_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>battery_voltage</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Battery Voltage</label>
      <sensorSet>Battery</sensorSet>
    </numSensor>

    <numSensor ruleid="battery_capacity_Sensor">
      <type>pctofcapacity</type>
      <sensorId>BATTERY_CAPACITY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>battery_capacity</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Battery Capacity</label>
      <sensorSet>Battery</sensorSet>
    </numSensor>

    <numSensor ruleid="run_time_remaining_Sensor">
      <type>timeinmin</type>
      <sensorId>RUN_TIME_REMAINING</sensorId>
      <value>
        <mult>
          <op>
            <getOid>run_time_remaining</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Run Time Remaining</label>
      <sensorSet>Battery</sensorSet>
    </numSensor>

    <numSensor ruleid="load_current_phase_a_Sensor">
      <type>amperage</type>
      <sensorId>LOAD_CURRENT_PHASE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>load_current_phase_a</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Load Current Phase A</label>
      <sensorSet>Load</sensorSet>
    </numSensor>

    <numSensor ruleid="load_current_phase_b_Sensor">
      <type>amperage</type>
      <sensorId>LOAD_CURRENT_PHASE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>load_current_phase_b</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Load Current Phase B</label>
      <sensorSet>Load</sensorSet>
    </numSensor>

    <numSensor ruleid="load_current_phase_c_Sensor">
      <type>amperage</type>
      <sensorId>LOAD_CURRENT_PHASE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>load_current_phase_c</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Load Current Phase C</label>
      <sensorSet>Load</sensorSet>
    </numSensor>

    <numSensor ruleid="output_voltage_phase_a_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_PHASE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_phase_a</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Phase A</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="output_voltage_phase_b_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_PHASE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_phase_b</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Phase B</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <numSensor ruleid="output_voltage_phase_c_Sensor">
      <type>voltage</type>
      <sensorId>OUTPUT_VOLTAGE_PHASE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>output_voltage_phase_c</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <valueInc>0.1</valueInc>
      <label>Output Voltage Phase C</label>
      <sensorSet>Output</sensorSet>
    </numSensor>

    <valueMap ruleid="status-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>2</valueOut>
    </valueMap>

    <valueMap ruleid="reverseStatus-vm">
			<valueIn>0</valueIn>
			<valueOut>1</valueOut>
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>*</valueIn>
			<valueOut>2</valueOut>
    </valueMap>

    <enumMap ruleid="alarm-em">
      <label>Normal</label>
      <label>Alarm</label>
      <label>Unknown</label>
    </enumMap>



		<!-- Update request change (DDF - 1502) -->

		<numSensor ruleid="_output_volts_ab">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_AB</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_1</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts ab</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_volts_bc">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_BC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_2</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts bc</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_volts_ca">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_CA</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_3</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts ca</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_ab">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_AB</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_4</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts ab</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_bc">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_BC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_5</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts bc</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_ca">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_CA</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_6</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts ca</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_ab">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_AB</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_10</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts ab</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_bc">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_BC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_11</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts bc</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_ca">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_CA</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_12</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts ca</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_current_phase_a">
			<type>amperage</type>
			<units />
			<sensorId>__INPUT_CURRENT_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_19</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input current phase a</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_current_phase_b">
			<type>amperage</type>
			<units />
			<sensorId>__INPUT_CURRENT_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_20</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input current phase b</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_current_phase_c">
			<type>amperage</type>
			<units />
			<sensorId>__INPUT_CURRENT_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_21</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input current phase c</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_true_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>__OUTPUT_TRUE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_22</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output true power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_true_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>__INPUT_TRUE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_23</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input true power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>__OUTPUT_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_24</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output apparent power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>__INPUT_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_25</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input apparent power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_power_factor">
			<type>num</type>
			<units />
			<sensorId>__OUTPUT_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_26</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<label>output power factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_power_factor">
			<type>num</type>
			<units />
			<sensorId>__INPUT_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_27</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<label>input power factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_frequency">
			<type>frequency</type>
			<units />
			<sensorId>__OUTPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_28</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_frequency">
			<type>frequency</type>
			<units />
			<sensorId>__INPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_29</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_frequency">
			<type>frequency</type>
			<units />
			<sensorId>__BYPASS_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_31</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="_battery_current">
			<type>amperage</type>
			<units />
			<sensorId>__BATTERY_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_33</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>battery current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_battery_voltage">
			<type>voltage</type>
			<units />
			<sensorId>__BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_34</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>battery voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_%_battery_left">
			<type>pctofcapacity</type>
			<units />
			<sensorId>__%_BATTERY_LEFT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_35</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>% battery left</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="_battery_time_remaining">
			<type>timeinmin</type>
			<units />
			<sensorId>__BATTERY_TIME_REMAINING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_36</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>battery time remaining</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="_(avg_bypass_volts_3_phase_sum)">
			<type>voltage</type>
			<units />
			<sensorId>__(AVG_BYPASS_VOLTS_3_PHASE_SUM)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_48</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>(avg bypass volts 3 phase sum)</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_(avg_output_volts_3_phase_sum)">
			<type>voltage</type>
			<units />
			<sensorId>__(AVG_OUTPUT_VOLTS_3_PHASE_SUM)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_49</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>(avg output volts 3 phase sum)</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_(avg_dc__volts_3_phase_sum)">
			<type>voltage</type>
			<units />
			<sensorId>__(AVG_DC__VOLTS_3_PHASE_SUM)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_50</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>(avg dc  volts 3 phase sum)</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_phase_a">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_54</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts phase a</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_phase_b">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_55</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts phase b</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_bypass_volts_phase_c">
			<type>voltage</type>
			<units />
			<sensorId>__BYPASS_VOLTS_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_56</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>bypass volts phase c</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_phase_a">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_57</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts phase a</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_phase_b">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_58</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts phase b</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_input_volts_phase_c">
			<type>voltage</type>
			<units />
			<sensorId>__INPUT_VOLTS_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_59</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>input volts phase c</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_ambient_temperature">
			<type>temp</type>
			<units />
			<sensorId>__AMBIENT_TEMPERATURE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_63</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>ambient temperature</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_a">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_66</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase a</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_b">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_67</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase b</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_c">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_68</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase c</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_a_bar_chart">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_A_BAR_CHART</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_69</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase a bar chart</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_b_bar_chart">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_B_BAR_CHART</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_70</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase b bar chart</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_load_current_phase_c_bar_chart">
			<type>amperage</type>
			<units />
			<sensorId>__LOAD_CURRENT_PHASE_C_BAR_CHART</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_71</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>load current phase c bar chart</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_volts_a">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_79</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts a</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_volts_b">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_80</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts b</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_output_volts_c">
			<type>voltage</type>
			<units />
			<sensorId>__OUTPUT_VOLTS_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_81</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>output volts c</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="_neutral_current">
			<type>amperage</type>
			<units />
			<sensorId>__NEUTRAL_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_4_Reg_82</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>neutral current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<stateSensor ruleid="_on_battery">
			<type>state</type>
			<sensorId>__ON_BATTERY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_1</getOid>
				</mapValue>
			</value>
			<label>on battery</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_on_bypass">
			<type>state</type>
			<sensorId>__ON_BYPASS</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_10</getOid>
				</mapValue>
			</value>
			<label>on bypass</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_system_normal">
			<type>state</type>
			<sensorId>__SYSTEM_NORMAL</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_11</getOid>
				</mapValue>
			</value>
			<label>system normal</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ups_off">
			<type>state</type>
			<sensorId>__UPS_OFF</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_16</getOid>
				</mapValue>
			</value>
			<label>ups off</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_ac_over_voltage">
			<type>state</type>
			<sensorId>__INVERTER_AC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_144</getOid>
				</mapValue>
			</value>
			<label>inverter ac over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_ac_under_voltage">
			<type>state</type>
			<sensorId>__INVERTER_AC_UNDER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_145</getOid>
				</mapValue>
			</value>
			<label>inverter ac under voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_under_or_over_frequency">
			<type>state</type>
			<sensorId>__INVERTER_UNDER_OR_OVER_FREQUENCY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_146</getOid>
				</mapValue>
			</value>
			<label>inverter under or over frequency</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_ac_over_voltage">
			<type>state</type>
			<sensorId>__BYPASS_AC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_147</getOid>
				</mapValue>
			</value>
			<label>bypass ac over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_ac_under_voltage">
			<type>state</type>
			<sensorId>__BYPASS_AC_UNDER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_148</getOid>
				</mapValue>
			</value>
			<label>bypass ac under voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_under_or_over_frequency">
			<type>state</type>
			<sensorId>__BYPASS_UNDER_OR_OVER_FREQUENCY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_149</getOid>
				</mapValue>
			</value>
			<label>bypass under or over frequency</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_input_ac_over_voltage">
			<type>state</type>
			<sensorId>__INPUT_AC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_150</getOid>
				</mapValue>
			</value>
			<label>input ac over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_input_ac_under_voltage">
			<type>state</type>
			<sensorId>__INPUT_AC_UNDER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_151</getOid>
				</mapValue>
			</value>
			<label>input ac under voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_input_under_or_over_frequency">
			<type>state</type>
			<sensorId>__INPUT_UNDER_OR_OVER_FREQUENCY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_152</getOid>
				</mapValue>
			</value>
			<label>input under or over frequency</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_ac_over_voltage">
			<type>state</type>
			<sensorId>__OUTPUT_AC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_153</getOid>
				</mapValue>
			</value>
			<label>output ac over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_ac_under_voltage">
			<type>state</type>
			<sensorId>__OUTPUT_AC_UNDER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_154</getOid>
				</mapValue>
			</value>
			<label>output ac under voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_under_or_over_frequency">
			<type>state</type>
			<sensorId>__OUTPUT_UNDER_OR_OVER_FREQUENCY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_155</getOid>
				</mapValue>
			</value>
			<label>output under or over frequency</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_remote_emergency_power_off">
			<type>state</type>
			<sensorId>__REMOTE_EMERGENCY_POWER_OFF</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_156</getOid>
				</mapValue>
			</value>
			<label>remote emergency power off</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_6">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_6</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_158</getOid>
				</mapValue>
			</value>
			<label>building alarm 6</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_5">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_5</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_159</getOid>
				</mapValue>
			</value>
			<label>building alarm 5</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_4">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_4</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_160</getOid>
				</mapValue>
			</value>
			<label>building alarm 4</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_3">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_3</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_161</getOid>
				</mapValue>
			</value>
			<label>building alarm 3</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_2">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_2</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_162</getOid>
				</mapValue>
			</value>
			<label>building alarm 2</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_building_alarm_1">
			<type>state</type>
			<sensorId>__BUILDING_ALARM_1</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_163</getOid>
				</mapValue>
			</value>
			<label>building alarm 1</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_static_switch_over_temperature">
			<type>state</type>
			<sensorId>__STATIC_SWITCH_OVER_TEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_164</getOid>
				</mapValue>
			</value>
			<label>static switch over temperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_charger_over_temperature">
			<type>state</type>
			<sensorId>__CHARGER_OVER_TEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_165</getOid>
				</mapValue>
			</value>
			<label>charger over temperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_charger_logic_power_fail">
			<type>state</type>
			<sensorId>__CHARGER_LOGIC_POWER_FAIL</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_166</getOid>
				</mapValue>
			</value>
			<label>charger logic power fail</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_charger_over_voltage_or_current">
			<type>state</type>
			<sensorId>__CHARGER_OVER_VOLTAGE_OR_CURRENT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_167</getOid>
				</mapValue>
			</value>
			<label>charger over voltage or current</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_over_temperature">
			<type>state</type>
			<sensorId>__INVERTER_OVER_TEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_168</getOid>
				</mapValue>
			</value>
			<label>inverter over temperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_overload">
			<type>state</type>
			<sensorId>__OUTPUT_OVERLOAD</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_169</getOid>
				</mapValue>
			</value>
			<label>output overload</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_rectifier_input_over_current">
			<type>state</type>
			<sensorId>__RECTIFIER_INPUT_OVER_CURRENT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_170</getOid>
				</mapValue>
			</value>
			<label>rectifier input over current</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_output_over_current">
			<type>state</type>
			<sensorId>__INVERTER_OUTPUT_OVER_CURRENT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_171</getOid>
				</mapValue>
			</value>
			<label>inverter output over current</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_dc_link_over_voltage">
			<type>state</type>
			<sensorId>__DC_LINK_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_172</getOid>
				</mapValue>
			</value>
			<label>dc link over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_dc_link_under_voltage">
			<type>state</type>
			<sensorId>__DC_LINK_UNDER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_173</getOid>
				</mapValue>
			</value>
			<label>dc link under voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_rectifier_failed">
			<type>state</type>
			<sensorId>__RECTIFIER_FAILED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_174</getOid>
				</mapValue>
			</value>
			<label>rectifier failed</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_fault">
			<type>state</type>
			<sensorId>__INVERTER_FAULT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_175</getOid>
				</mapValue>
			</value>
			<label>inverter fault</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_contactor_fail">
			<type>state</type>
			<sensorId>__BATTERY_CONTACTOR_FAIL</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_176</getOid>
				</mapValue>
			</value>
			<label>battery contactor fail</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_breaker_fail">
			<type>state</type>
			<sensorId>__BYPASS_BREAKER_FAIL</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_177</getOid>
				</mapValue>
			</value>
			<label>bypass breaker fail</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_charger_failure">
			<type>state</type>
			<sensorId>__CHARGER_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_178</getOid>
				</mapValue>
			</value>
			<label>charger failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_static_switch_failure">
			<type>state</type>
			<sensorId>__STATIC_SWITCH_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_180</getOid>
				</mapValue>
			</value>
			<label>static switch failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_current_limit">
			<type>state</type>
			<sensorId>__BATTERY_CURRENT_LIMIT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_191</getOid>
				</mapValue>
			</value>
			<label>battery current limit</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_ground_fault">
			<type>state</type>
			<sensorId>__BATTERY_GROUND_FAULT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_195</getOid>
				</mapValue>
			</value>
			<label>battery ground fault</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_shutdown_imminent">
			<type>state</type>
			<sensorId>__SHUTDOWN_IMMINENT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_199</getOid>
				</mapValue>
			</value>
			<label>shutdown imminent</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_low">
			<type>state</type>
			<sensorId>__BATTERY_LOW</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_200</getOid>
				</mapValue>
			</value>
			<label>battery low</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_utility_fail">
			<type>state</type>
			<sensorId>__UTILITY_FAIL</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_201</getOid>
				</mapValue>
			</value>
			<label>utility fail</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_short_circuit">
			<type>state</type>
			<sensorId>__OUTPUT_SHORT_CIRCUIT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_202</getOid>
				</mapValue>
			</value>
			<label>output short circuit</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_utility_not_present">
			<type>state</type>
			<sensorId>__UTILITY_NOT_PRESENT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_203</getOid>
				</mapValue>
			</value>
			<label>utility not present</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_input_line_voltage_loss">
			<type>state</type>
			<sensorId>__INPUT_LINE_VOLTAGE_LOSS</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_211</getOid>
				</mapValue>
			</value>
			<label>input line voltage loss</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_dc_over_voltage">
			<type>state</type>
			<sensorId>__BATTERY_DC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_212</getOid>
				</mapValue>
			</value>
			<label>battery dc over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_power_supply_failure">
			<type>state</type>
			<sensorId>__POWER_SUPPLY_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_214</getOid>
				</mapValue>
			</value>
			<label>power supply failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_rectifier_current_over_125%">
			<type>state</type>
			<sensorId>__RECTIFIER_CURRENT_OVER_125%</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_219</getOid>
				</mapValue>
			</value>
			<label>rectifier current over 125%</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_dc_over_voltage">
			<type>state</type>
			<sensorId>__OUTPUT_DC_OVER_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_233</getOid>
				</mapValue>
			</value>
			<label>output dc over voltage</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_not_available">
			<type>state</type>
			<sensorId>__BYPASS_NOT_AVAILABLE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_249</getOid>
				</mapValue>
			</value>
			<label>bypass not available</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_rectifier_breaker_open">
			<type>state</type>
			<sensorId>__RECTIFIER_BREAKER_OPEN</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_250</getOid>
				</mapValue>
			</value>
			<label>rectifier breaker open</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_contactor_open">
			<type>state</type>
			<sensorId>__BATTERY_CONTACTOR_OPEN</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_251</getOid>
				</mapValue>
			</value>
			<label>battery contactor open</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_inverter_contactor_open">
			<type>state</type>
			<sensorId>__INVERTER_CONTACTOR_OPEN</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_252</getOid>
				</mapValue>
			</value>
			<label>inverter contactor open</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_breaker_open">
			<type>state</type>
			<sensorId>__BYPASS_BREAKER_OPEN</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_253</getOid>
				</mapValue>
			</value>
			<label>bypass breaker open</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_totally_discharged">
			<type>state</type>
			<sensorId>__BATTERY_TOTALLY_DISCHARGED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_270</getOid>
				</mapValue>
			</value>
			<label>battery totally discharged</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_loss_of_redundancy">
			<type>state</type>
			<sensorId>__LOSS_OF_REDUNDANCY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_276</getOid>
				</mapValue>
			</value>
			<label>loss of redundancy</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_loss_of_sync_bus">
			<type>state</type>
			<sensorId>__LOSS_OF_SYNC_BUS</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_277</getOid>
				</mapValue>
			</value>
			<label>loss of sync bus</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_rectifier_breaker_shunt_tripped">
			<type>state</type>
			<sensorId>__RECTIFIER_BREAKER_SHUNT_TRIPPED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_278</getOid>
				</mapValue>
			</value>
			<label>rectifier breaker shunt tripped</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_loss_of_charger_sync">
			<type>state</type>
			<sensorId>__LOSS_OF_CHARGER_SYNC</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_279</getOid>
				</mapValue>
			</value>
			<label>loss of charger sync</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_breaker_open">
			<type>state</type>
			<sensorId>__OUTPUT_BREAKER_OPEN</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_281</getOid>
				</mapValue>
			</value>
			<label>output breaker open</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_power_loss">
			<type>state</type>
			<sensorId>__BYPASS_POWER_LOSS</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_286</getOid>
				</mapValue>
			</value>
			<label>bypass power loss</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_check_battery_flag">
			<type>state</type>
			<sensorId>__CHECK_BATTERY_FLAG</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_293</getOid>
				</mapValue>
			</value>
			<label>check battery flag</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_output_breaker/relay_failure">
			<type>state</type>
			<sensorId>__OUTPUT_BREAKER/RELAY_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_301</getOid>
				</mapValue>
			</value>
			<label>output breaker/relay failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_106%_overload_on_phase_a">
			<type>state</type>
			<sensorId>__GREATER_THAN_106%_OVERLOAD_ON_PHASE_A</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_303</getOid>
				</mapValue>
			</value>
			<label>greater than 106% overload on phase a</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_106%_overload_on_phase_b">
			<type>state</type>
			<sensorId>__GREATER_THAN_106%_OVERLOAD_ON_PHASE_B</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_304</getOid>
				</mapValue>
			</value>
			<label>greater than 106% overload on phase b</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_106%_overload_on_phase_c">
			<type>state</type>
			<sensorId>__GREATER_THAN_106%_OVERLOAD_ON_PHASE_C</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_305</getOid>
				</mapValue>
			</value>
			<label>greater than 106% overload on phase c</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_125%_overload_on_phase_a">
			<type>state</type>
			<sensorId>__GREATER_THAN_125%_OVERLOAD_ON_PHASE_A</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_306</getOid>
				</mapValue>
			</value>
			<label>greater than 125% overload on phase a</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_125%_overload_on_phase_b">
			<type>state</type>
			<sensorId>__GREATER_THAN_125%_OVERLOAD_ON_PHASE_B</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_307</getOid>
				</mapValue>
			</value>
			<label>greater than 125% overload on phase b</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_125%_overload_on_phase_c">
			<type>state</type>
			<sensorId>__GREATER_THAN_125%_OVERLOAD_ON_PHASE_C</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_308</getOid>
				</mapValue>
			</value>
			<label>greater than 125% overload on phase c</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_150%_overload_on_phase_a">
			<type>state</type>
			<sensorId>__GREATER_THAN_150%_OVERLOAD_ON_PHASE_A</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_309</getOid>
				</mapValue>
			</value>
			<label>greater than 150% overload on phase a</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_150%_overload_on_phase_b">
			<type>state</type>
			<sensorId>__GREATER_THAN_150%_OVERLOAD_ON_PHASE_B</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_310</getOid>
				</mapValue>
			</value>
			<label>greater than 150% overload on phase b</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_greater_than_150%_overload_on_phase_c">
			<type>state</type>
			<sensorId>__GREATER_THAN_150%_OVERLOAD_ON_PHASE_C</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_311</getOid>
				</mapValue>
			</value>
			<label>greater than 150% overload on phase c</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ups_on_battery">
			<type>state</type>
			<sensorId>__UPS_ON_BATTERY</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_312</getOid>
				</mapValue>
			</value>
			<label>ups on battery</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ups_on_bypass">
			<type>state</type>
			<sensorId>__UPS_ON_BYPASS</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_313</getOid>
				</mapValue>
			</value>
			<label>ups on bypass</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_failure">
			<type>state</type>
			<sensorId>__BYPASS_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_332</getOid>
				</mapValue>
			</value>
			<label>bypass failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_battery_test_failed">
			<type>state</type>
			<sensorId>__BATTERY_TEST_FAILED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_335</getOid>
				</mapValue>
			</value>
			<label>battery test failed</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_fuse_failure">
			<type>state</type>
			<sensorId>__FUSE_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_336</getOid>
				</mapValue>
			</value>
			<label>fuse failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_fan_failure">
			<type>state</type>
			<sensorId>__FAN_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_337</getOid>
				</mapValue>
			</value>
			<label>fan failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_site_wiring_fault">
			<type>state</type>
			<sensorId>__SITE_WIRING_FAULT</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_338</getOid>
				</mapValue>
			</value>
			<label>site wiring fault</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_backfeed_contactor_failure">
			<type>state</type>
			<sensorId>__BACKFEED_CONTACTOR_FAILURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_339</getOid>
				</mapValue>
			</value>
			<label>backfeed contactor failure</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_batteries_disconnected">
			<type>state</type>
			<sensorId>__BATTERIES_DISCONNECTED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_343</getOid>
				</mapValue>
			</value>
			<label>batteries disconnected</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ups_cabinet_overtemperature">
			<type>state</type>
			<sensorId>__UPS_CABINET_OVERTEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_344</getOid>
				</mapValue>
			</value>
			<label>ups cabinet overtemperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_transformer_overtemperature">
			<type>state</type>
			<sensorId>__TRANSFORMER_OVERTEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_345</getOid>
				</mapValue>
			</value>
			<label>transformer overtemperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ambient_undertemperature">
			<type>state</type>
			<sensorId>__AMBIENT_UNDERTEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_346</getOid>
				</mapValue>
			</value>
			<label>ambient undertemperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ambient_overtemperature">
			<type>state</type>
			<sensorId>__AMBIENT_OVERTEMPERATURE</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_347</getOid>
				</mapValue>
			</value>
			<label>ambient overtemperature</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_unable_to_charge_batteries">
			<type>state</type>
			<sensorId>__UNABLE_TO_CHARGE_BATTERIES</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_352</getOid>
				</mapValue>
			</value>
			<label>unable to charge batteries</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_input_breaker_failed">
			<type>state</type>
			<sensorId>__INPUT_BREAKER_FAILED</sensorId>
			<value>
				<mapValue mapid="offon_vm">
					<getOid>Function_2_Reg_361</getOid>
				</mapValue>
			</value>
			<label>input breaker failed</label>
			<enum>offon_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>

		<valueMap ruleid="offon_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="offon_em">
			<label>Off</label>
			<label>On</label>
		</enumMap>

  </device>
  <protocol>
    <modbus>
      <value_ref_id valid="system_status_0">
        <function>2</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>bit</type>
      </value_ref_id>
      <value_ref_id valid="system_status_1">
        <function>2</function>
        <start_addr>9</start_addr>
        <quantity>1</quantity>
        <type>bit</type>
      </value_ref_id>
      <value_ref_id valid="system_status_2">
        <function>2</function>
        <start_addr>10</start_addr>
        <quantity>1</quantity>
        <type>bit</type>
      </value_ref_id>
      <value_ref_id valid="system_status_3">
        <function>2</function>
        <start_addr>15</start_addr>
        <quantity>1</quantity>
        <type>bit</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_line_ab">
        <function>4</function>
        <start_addr>0</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_line_bc">
        <function>4</function>
        <start_addr>1</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_line_ca">
        <function>4</function>
        <start_addr>2</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_voltage_line_ab">
        <function>4</function>
        <start_addr>3</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_voltage_line_bc">
        <function>4</function>
        <start_addr>4</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_voltage_line_ca">
        <function>4</function>
        <start_addr>5</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_current_phase_a">
        <function>4</function>
        <start_addr>18</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_current_phase_b">
        <function>4</function>
        <start_addr>19</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_current_phase_c">
        <function>4</function>
        <start_addr>20</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_true_power">
        <function>4</function>
        <start_addr>21</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_true_power">
        <function>4</function>
        <start_addr>22</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_apparent_power">
        <function>4</function>
        <start_addr>23</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_apparent_power">
        <function>4</function>
        <start_addr>24</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_power_factor">
        <function>4</function>
        <start_addr>25</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_power_factor">
        <function>4</function>
        <start_addr>26</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_frequency">
        <function>4</function>
        <start_addr>27</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_frequency">
        <function>4</function>
        <start_addr>28</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_current">
        <function>4</function>
        <start_addr>32</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_voltage">
        <function>4</function>
        <start_addr>33</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_capacity">
        <function>4</function>
        <start_addr>34</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="run_time_remaining">
        <function>4</function>
        <start_addr>35</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="load_current_phase_a">
        <function>4</function>
        <start_addr>65</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="load_current_phase_b">
        <function>4</function>
        <start_addr>66</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="load_current_phase_c">
        <function>4</function>
        <start_addr>67</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_phase_a">
        <function>4</function>
        <start_addr>78</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_phase_b">
        <function>4</function>
        <start_addr>79</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_voltage_phase_c">
        <function>4</function>
        <start_addr>80</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="rectifier_status">
        <function>2</function>
        <start_addr>111</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="bypass_status">
        <function>2</function>
        <start_addr>113</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_disconnect_status">
        <function>2</function>
        <start_addr>116</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="inverter_status">
        <function>2</function>
        <start_addr>118</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="upm_notice">
        <function>2</function>
        <start_addr>122</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="upm_alarm">
        <function>2</function>
        <start_addr>123</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_6">
        <function>2</function>
        <start_addr>157</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_5">
        <function>2</function>
        <start_addr>158</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_4">
        <function>2</function>
        <start_addr>159</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_3">
        <function>2</function>
        <start_addr>160</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_2">
        <function>2</function>
        <start_addr>161</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="building_alarm_1">
        <function>2</function>
        <start_addr>162</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="output_overload">
        <function>2</function>
        <start_addr>168</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="shutdown_imminent">
        <function>2</function>
        <start_addr>198</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_low">
        <function>2</function>
        <start_addr>199</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="power_supply_failure">
        <function>2</function>
        <start_addr>213</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="battery_totally_discharged">
        <function>2</function>
        <start_addr>269</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="load_dumped_load_power_off">
        <function>2</function>
        <start_addr>313</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="fan_failure">
        <function>2</function>
        <start_addr>336</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="transformer_over_temperature">
        <function>2</function>
        <start_addr>344</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

      <value_ref_id valid="input_breaker_failed">
        <function>2</function>
        <start_addr>360</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>

			<value_ref_id valid="Function_4_Reg_36">
				<function>4</function>
				<start_addr>35</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_79">
				<function>4</function>
				<start_addr>78</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_16">
				<function>2</function>
				<start_addr>15</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_21">
				<function>4</function>
				<start_addr>20</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_347">
				<function>2</function>
				<start_addr>346</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_279">
				<function>2</function>
				<start_addr>278</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_155">
				<function>2</function>
				<start_addr>154</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_176">
				<function>2</function>
				<start_addr>175</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_309">
				<function>2</function>
				<start_addr>308</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_63">
				<function>4</function>
				<start_addr>62</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_202">
				<function>2</function>
				<start_addr>201</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_159">
				<function>2</function>
				<start_addr>158</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_22">
				<function>4</function>
				<start_addr>21</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_286">
				<function>2</function>
				<start_addr>285</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_312">
				<function>2</function>
				<start_addr>311</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_6">
				<function>4</function>
				<start_addr>5</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_161">
				<function>2</function>
				<start_addr>160</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_305">
				<function>2</function>
				<start_addr>304</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_49">
				<function>4</function>
				<start_addr>48</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_66">
				<function>4</function>
				<start_addr>65</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_34">
				<function>4</function>
				<start_addr>33</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_337">
				<function>2</function>
				<start_addr>336</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_149">
				<function>2</function>
				<start_addr>148</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_281">
				<function>2</function>
				<start_addr>280</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_166">
				<function>2</function>
				<start_addr>165</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_145">
				<function>2</function>
				<start_addr>144</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_175">
				<function>2</function>
				<start_addr>174</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_276">
				<function>2</function>
				<start_addr>275</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_24">
				<function>4</function>
				<start_addr>23</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_308">
				<function>2</function>
				<start_addr>307</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_68">
				<function>4</function>
				<start_addr>67</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_19">
				<function>4</function>
				<start_addr>18</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_171">
				<function>2</function>
				<start_addr>170</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_304">
				<function>2</function>
				<start_addr>303</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_154">
				<function>2</function>
				<start_addr>153</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_346">
				<function>2</function>
				<start_addr>345</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_251">
				<function>2</function>
				<start_addr>250</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_201">
				<function>2</function>
				<start_addr>200</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_48">
				<function>4</function>
				<start_addr>47</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_177">
				<function>2</function>
				<start_addr>176</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_293">
				<function>2</function>
				<start_addr>292</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_332">
				<function>2</function>
				<start_addr>331</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_162">
				<function>2</function>
				<start_addr>161</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_81">
				<function>4</function>
				<start_addr>80</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_158">
				<function>2</function>
				<start_addr>157</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_219">
				<function>2</function>
				<start_addr>218</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_23">
				<function>4</function>
				<start_addr>22</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_336">
				<function>2</function>
				<start_addr>335</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_313">
				<function>2</function>
				<start_addr>312</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_1">
				<function>2</function>
				<start_addr>0</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_82">
				<function>4</function>
				<start_addr>81</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_33">
				<function>4</function>
				<start_addr>32</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_144">
				<function>2</function>
				<start_addr>143</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_233">
				<function>2</function>
				<start_addr>232</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_148">
				<function>2</function>
				<start_addr>147</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_5">
				<function>4</function>
				<start_addr>4</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_153">
				<function>2</function>
				<start_addr>152</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_214">
				<function>2</function>
				<start_addr>213</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_167">
				<function>2</function>
				<start_addr>166</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_67">
				<function>4</function>
				<start_addr>66</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_11">
				<function>2</function>
				<start_addr>10</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_172">
				<function>2</function>
				<start_addr>171</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_195">
				<function>2</function>
				<start_addr>194</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_28">
				<function>4</function>
				<start_addr>27</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_270">
				<function>2</function>
				<start_addr>269</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_307">
				<function>2</function>
				<start_addr>306</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_303">
				<function>2</function>
				<start_addr>302</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_191">
				<function>2</function>
				<start_addr>190</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_57">
				<function>4</function>
				<start_addr>56</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_345">
				<function>2</function>
				<start_addr>344</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_29">
				<function>4</function>
				<start_addr>28</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_3">
				<function>4</function>
				<start_addr>2</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_178">
				<function>2</function>
				<start_addr>177</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_71">
				<function>4</function>
				<start_addr>70</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_199">
				<function>2</function>
				<start_addr>198</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_252">
				<function>2</function>
				<start_addr>251</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_10">
				<function>2</function>
				<start_addr>9</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_352">
				<function>2</function>
				<start_addr>351</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_163">
				<function>2</function>
				<start_addr>162</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_150">
				<function>2</function>
				<start_addr>149</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_58">
				<function>4</function>
				<start_addr>57</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_339">
				<function>2</function>
				<start_addr>338</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_12">
				<function>4</function>
				<start_addr>11</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_10">
				<function>4</function>
				<start_addr>9</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_80">
				<function>4</function>
				<start_addr>79</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_27">
				<function>4</function>
				<start_addr>26</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_4">
				<function>4</function>
				<start_addr>3</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_59">
				<function>4</function>
				<start_addr>58</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_335">
				<function>2</function>
				<start_addr>334</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_70">
				<function>4</function>
				<start_addr>69</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_168">
				<function>2</function>
				<start_addr>167</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_253">
				<function>2</function>
				<start_addr>252</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_310">
				<function>2</function>
				<start_addr>309</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_211">
				<function>2</function>
				<start_addr>210</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_152">
				<function>2</function>
				<start_addr>151</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_278">
				<function>2</function>
				<start_addr>277</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_56">
				<function>4</function>
				<start_addr>55</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_160">
				<function>2</function>
				<start_addr>159</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_147">
				<function>2</function>
				<start_addr>146</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_173">
				<function>2</function>
				<start_addr>172</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_50">
				<function>4</function>
				<start_addr>49</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_25">
				<function>4</function>
				<start_addr>24</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_344">
				<function>2</function>
				<start_addr>343</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_180">
				<function>2</function>
				<start_addr>179</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_31">
				<function>4</function>
				<start_addr>30</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_250">
				<function>2</function>
				<start_addr>249</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_361">
				<function>2</function>
				<start_addr>360</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_203">
				<function>2</function>
				<start_addr>202</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_1">
				<function>4</function>
				<start_addr>0</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_164">
				<function>2</function>
				<start_addr>163</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_156">
				<function>2</function>
				<start_addr>155</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_11">
				<function>4</function>
				<start_addr>10</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_54">
				<function>4</function>
				<start_addr>53</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_311">
				<function>2</function>
				<start_addr>310</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_26">
				<function>4</function>
				<start_addr>25</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_69">
				<function>4</function>
				<start_addr>68</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_306">
				<function>2</function>
				<start_addr>305</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_20">
				<function>4</function>
				<start_addr>19</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_170">
				<function>2</function>
				<start_addr>169</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_55">
				<function>4</function>
				<start_addr>54</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_249">
				<function>2</function>
				<start_addr>248</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_2">
				<function>4</function>
				<start_addr>1</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_200">
				<function>2</function>
				<start_addr>199</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_165">
				<function>2</function>
				<start_addr>164</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_212">
				<function>2</function>
				<start_addr>211</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_169">
				<function>2</function>
				<start_addr>168</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_4_Reg_35">
				<function>4</function>
				<start_addr>34</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_174">
				<function>2</function>
				<start_addr>173</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_146">
				<function>2</function>
				<start_addr>145</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_301">
				<function>2</function>
				<start_addr>300</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_151">
				<function>2</function>
				<start_addr>150</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_343">
				<function>2</function>
				<start_addr>342</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_277">
				<function>2</function>
				<start_addr>276</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>
			<value_ref_id valid="Function_2_Reg_338">
				<function>2</function>
				<start_addr>337</start_addr>
				<quantity>1</quantity>
				<type>bit</type>
			</value_ref_id>

      <packet>
        <function>2</function>
        <start_addr>157</start_addr>
        <quantity>6</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>0</start_addr>
        <quantity>6</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>18</start_addr>
        <quantity>11</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>32</start_addr>
        <quantity>4</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>65</start_addr>
        <quantity>3</quantity>
      </packet>

      <packet>
        <function>3</function>
        <start_addr>78</start_addr>
        <quantity>3</quantity>
      </packet>


    </modbus>
  </protocol>

</APC_DDF>

