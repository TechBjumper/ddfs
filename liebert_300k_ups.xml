<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="liebert_300k_ups"
	ddfname="Liebert 300K UPS"
	ddfversion="1"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="liebert_300k_ups">

		<setProductData ruleid="vendordata" field="vendor">Liebert</setProductData>
		<setProductData ruleid="modeldata" field="model">300K</setProductData>
		<setProductData ruleid="typedata" field="type">UPS</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		
        <numSensor ruleid="OUTPUT_LINE_VOLTAGE_U12_SENSOR">
            <type>voltage</type>
            <sensorId>output_line_voltage_u12</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputlinevoltageu12</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Line Voltage U12</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_LINE_VOLTAGE_U23_SENSOR">
            <type>voltage</type>
            <sensorId>output_line_voltage_u23</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputlinevoltageu23</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Line Voltage U23</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_LINE_VOLTAGE_U31_SENSOR">
            <type>voltage</type>
            <sensorId>output_line_voltage_u31</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputlinevoltageu31</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Line Voltage U31</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_VOLTAGE_L1_SENSOR">
            <type>voltage</type>
            <sensorId>output_phase_voltage_l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasevoltagel1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Voltage L1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_VOLTAGE_L2_SENSOR">
            <type>voltage</type>
            <sensorId>output_phase_voltage_l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasevoltagel2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Voltage L2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_VOLTAGE_L3_SENSOR">
            <type>voltage</type>
            <sensorId>output_phase_voltage_l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasevoltagel3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Voltage L3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_CURRENT_L1_SENSOR">
            <type>amperage</type>
            <sensorId>output_phase_current_l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasecurrentl1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Current L1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_CURRENT_L2_SENSOR">
            <type>amperage</type>
            <sensorId>output_phase_current_l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasecurrentl2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Current L2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_PHASE_CURRENT_L3_SENSOR">
            <type>amperage</type>
            <sensorId>output_phase_current_l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputphasecurrentl3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Phase Current L3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_NEUTRAL_LINE_CURRENT_SENSOR">
            <type>amperage</type>
            <sensorId>output_neutral_line_current</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputneutrallinecurrent</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Neutral Line Current</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_ACTIVE_POWER_L1_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_active_power_l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputactivepowerl1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Active Power L1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_ACTIVE_POWER_L2_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_active_power_l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputactivepowerl2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Active Power L2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_ACTIVE_POWER_L3_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_active_power_l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputactivepowerl3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Active Power L3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_FREQUENCY_SENSOR">
            <type>frequency</type>
            <sensorId>bypass_frequency</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypassfrequency</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Frequency</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="INVERTER_FREQUENCY_SENSOR">
            <type>frequency</type>
            <sensorId>inverter_frequency</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inverterfrequency</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Inverter Frequency</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_LINE_VOLTAGE_L1L2_SENSOR">
            <type>voltage</type>
            <sensorId>bypass_line_voltage_l1l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypasslinevoltagel1l2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Line Voltage L1L2</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_LINE_VOLTAGE_L2L3_SENSOR">
            <type>voltage</type>
            <sensorId>bypass_line_voltage_l2l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypasslinevoltagel2l3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Line Voltage L2L3</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_LINE_VOLTAGE_L3L1_SENSOR">
            <type>voltage</type>
            <sensorId>bypass_line_voltage_l3l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypasslinevoltagel3l1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Line Voltage L3L1</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_VOLTAGE_SENSOR">
            <type>voltage</type>
            <sensorId>battery_voltage</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batteryvoltage</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Voltage</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_CURRENT_SENSOR">
            <type>amperage</type>
            <sensorId>battery_current</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterycurrent</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Current</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_APPARENT_POWER_L1_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_apparent_power_l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputapparentpowerl1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Apparent Power L1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_APPARENT_POWER_L2_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_apparent_power_l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputapparentpowerl2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Apparent Power L2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_APPARENT_POWER_L3_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_apparent_power_l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputapparentpowerl3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Apparent Power L3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_LOAD_FACTOR_L1_SENSOR">
            <type>num</type>
            <sensorId>output_load_factor_l1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputloadfactorl1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Load Factor L1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_LOAD_FACTOR_L2_SENSOR">
            <type>num</type>
            <sensorId>output_load_factor_l2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputloadfactorl2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Load Factor L2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_LOAD_FACTOR_L3_SENSOR">
            <type>num</type>
            <sensorId>output_load_factor_l3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputloadfactorl3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Load Factor L3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_CHARGING_CAPACITY_SENSOR">
            <type>num</type>
            <sensorId>battery_charging_capacity</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterychargingcapacity</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Charging Capacity</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_BACKUP_TIME_SENSOR">
            <type>num</type>
            <sensorId>battery_backup_time</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterybackuptime</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Backup Time</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_TEMPERATURE_SENSOR">
            <type>temp</type>
            <sensorId>battery_temperature</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterytemperature</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Temperature</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>




		<enumMap ruleid="normal_alarm_em">
			<label>Normal</label>
			<label>Alarm</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="online_offline_em">
			<label>Normal</label>
			<label>Alarm</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="inverter_em">
			<label>Inverter Off</label>
			<label>Inverter On</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="bypass_em">
			<label>Bypass Off</label>
			<label>Bypass On</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="rectifier_em">
			<label>Rectifier Off</label>
			<label>Rectifier On</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="auto_manual_em">
			<label>Auto Run</label>
			<label>Manually</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="equalize_em">
			<label>No Equalized Charging</label>
			<label>Equalized Charging</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="testing_em">
			<label>Testing</label>
			<label>Battery Testing</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="alarm_status_em">
			<label>No Alarm</label>
			<label>Alarm</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="other_em">
			<label>On Line</label>
			<label>Other</label>
			<label>Unknown</label>
		</enumMap>



		<stateSensor ruleid="REGISTER_0_BIT_0">
            <type>state</type>
            <sensorId>register_0_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>communication status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		
		<stateSensor ruleid="REGISTER_0_BIT_1">
            <type>state</type>
            <sensorId>register_0_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Single</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_2">
            <type>state</type>
            <sensorId>register_0_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Internal Bypass Parallel</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		
		<stateSensor ruleid="REGISTER_0_BIT_3">
            <type>state</type>
            <sensorId>register_0_bit_3</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Bypass Parallel</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="REGISTER_0_BIT_4">
            <type>state</type>
            <sensorId>register_0_bit_4</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>ECO Single</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_5">
            <type>state</type>
            <sensorId>register_0_bit_5</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Status</label>
			<enum>inverter_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_6">
            <type>state</type>
            <sensorId>register_0_bit_6</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Status</label>
			<enum>bypass_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_7">
            <type>state</type>
            <sensorId>register_0_bit_7</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Status</label>
			<enum>rectifier_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_8">
            <type>state</type>
            <sensorId>register_0_bit_8</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Working Type</label>
			<enum>auto_manual_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="REGISTER_0_BIT_9">
            <type>state</type>
            <sensorId>register_0_bit_9</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Charging Status</label>
			<enum>equalize_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_10">
            <type>state</type>
            <sensorId>register_0_bit_10</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Testing Status</label>
			<enum>testing_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_11">
            <type>state</type>
            <sensorId>register_0_bit_11</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Alarm Status</label>
			<enum>alarm_status_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<!-- Not Needed
		<stateSensor ruleid="REGISTER_0_BIT_12">
            <type>state</type>
            <sensorId>register_0_bit_12</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>M1_dehumidification 1 (auch CW)</label>
			<enum>on_off_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		-->

		<stateSensor ruleid="REGISTER_0_BIT_13">
            <type>state</type>
            <sensorId>register_0_bit_13</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>On Line</label>
			<enum>other_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		
		<stateSensor ruleid="REGISTER_0_BIT_14">
            <type>state</type>
            <sensorId>register_0_bit_14</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Switch Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="REGISTER_0_BIT_15">
            <type>state</type>
            <sensorId>register_0_bit_15</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output Switch Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_0">
            <type>state</type>
            <sensorId>register_1_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Main Switch Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		

		<stateSensor ruleid="register_1_BIT_1">
            <type>state</type>
            <sensorId>register_1_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Switch Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		
		<stateSensor ruleid="register_1_BIT_2">
            <type>state</type>
            <sensorId>register_1_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Maintain Switch Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_3">
            <type>state</type>
            <sensorId>register_1_bit_3</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>ECO Mode</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_4">
            <type>state</type>
            <sensorId>register_1_bit_4</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Fan Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_5">
            <type>state</type>
            <sensorId>register_1_bit_5</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Out of Power</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_6">
            <type>state</type>
            <sensorId>register_1_bit_6</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Voltage High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_7">
            <type>state</type>
            <sensorId>register_1_bit_7</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Voltage Low</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_8">
            <type>state</type>
            <sensorId>register_1_bit_8</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Frequency Error</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		

		<stateSensor ruleid="register_1_BIT_9">
            <type>state</type>
            <sensorId>register_1_bit_9</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Main/Bypass Phase Sequence Error</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_10">
            <type>state</type>
            <sensorId>register_1_bit_10</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Thyristor Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_11">
            <type>state</type>
            <sensorId>register_1_bit_11</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_12">
            <type>state</type>
            <sensorId>register_1_bit_12</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Manually Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_13">
            <type>state</type>
            <sensorId>register_1_bit_13</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Power Supply</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		
		<stateSensor ruleid="register_1_BIT_14">
            <type>state</type>
            <sensorId>register_1_bit_14</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass Temperature High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_1_BIT_15">
            <type>state</type>
            <sensorId>register_1_bit_15</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_0">
            <type>state</type>
            <sensorId>register_2_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Manually Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="register_2_BIT_1">
            <type>state</type>
            <sensorId>register_2_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Block</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="register_2_BIT_2">
            <type>state</type>
            <sensorId>register_2_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Current-Limiting</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_3">
            <type>state</type>
            <sensorId>register_2_bit_3</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Temperature High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_4">
            <type>state</type>
            <sensorId>register_2_bit_4</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Fuse Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_5">
            <type>state</type>
            <sensorId>register_2_bit_5</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Power Supply</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_6">
            <type>state</type>
            <sensorId>register_2_bit_6</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_7">
            <type>state</type>
            <sensorId>register_2_bit_7</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Manually Close</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_8">
            <type>state</type>
            <sensorId>register_2_bit_8</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Block</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		

		<stateSensor ruleid="register_2_BIT_9">
            <type>state</type>
            <sensorId>register_2_bit_9</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Current-Limiting</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_10">
            <type>state</type>
            <sensorId>register_2_bit_10</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Temp High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_11">
            <type>state</type>
            <sensorId>register_2_bit_11</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Out-Of-Sync</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_12">
            <type>state</type>
            <sensorId>register_2_bit_12</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Voltage High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_13">
            <type>state</type>
            <sensorId>register_2_bit_13</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Voltage Low</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		
		<stateSensor ruleid="register_2_BIT_14">
            <type>state</type>
            <sensorId>register_2_bit_14</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Fuse Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_2_BIT_15">
            <type>state</type>
            <sensorId>register_2_bit_15</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output Voltage High</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_0">
            <type>state</type>
            <sensorId>register_3_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output Voltage Low</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="register_3_BIT_1">
            <type>state</type>
            <sensorId>register_3_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output No Voltage</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>



		<stateSensor ruleid="register_3_BIT_2">
            <type>state</type>
            <sensorId>register_3_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output Wave Error</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_3">
            <type>state</type>
            <sensorId>register_3_bit_3</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output Frequency Error</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_4">
            <type>state</type>
            <sensorId>register_3_bit_4</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Parallel Error</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_5">
            <type>state</type>
            <sensorId>register_3_bit_5</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Contactor Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_6">
            <type>state</type>
            <sensorId>register_3_bit_6</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter Not Enough</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_7">
            <type>state</type>
            <sensorId>register_3_bit_7</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Parallel Cable Disconnect</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_8">
            <type>state</type>
            <sensorId>register_3_bit_8</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>One UPS Out of Work</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		

		<stateSensor ruleid="register_3_BIT_9">
            <type>state</type>
            <sensorId>register_3_bit_9</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Charge Failure (PLANT)</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_10">
            <type>state</type>
            <sensorId>register_3_bit_10</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Self-Test</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_11">
            <type>state</type>
            <sensorId>register_3_bit_11</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Self-Test Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_12">
            <type>state</type>
            <sensorId>register_3_bit_12</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Power Supply</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_13">
            <type>state</type>
            <sensorId>register_3_bit_13</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Discharge Over</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="register_3_BIT_14">
            <type>state</type>
            <sensorId>register_3_bit_14</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Limited Equalized Charge Time</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_3_BIT_15">
            <type>state</type>
            <sensorId>register_3_bit_15</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bus Over Voltage Slowly</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_0">
            <type>state</type>
            <sensorId>register_4_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Mother Line Voltage Low</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
	

		<stateSensor ruleid="register_4_BIT_1">
            <type>state</type>
            <sensorId>register_4_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Fuse Open</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_2">
            <type>state</type>
            <sensorId>register_4_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bus Transient Overvoltage</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


		<stateSensor ruleid="register_4_BIT_3">
            <type>state</type>
            <sensorId>register_4_bit_3</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Earth Connection Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_4">
            <type>state</type>
            <sensorId>register_4_bit_4</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Out of Output Switching Times</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_5">
            <type>state</type>
            <sensorId>register_4_bit_5</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Over Load Turn Off</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_6">
            <type>state</type>
            <sensorId>register_4_bit_6</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Over Temp Turn Off</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_7">
            <type>state</type>
            <sensorId>register_4_bit_7</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Urgent Turn Off</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_8">
            <type>state</type>
            <sensorId>register_4_bit_8</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Current Feed Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_9">
            <type>state</type>
            <sensorId>register_4_bit_9</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Over Load</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_10">
            <type>state</type>
            <sensorId>register_4_bit_10</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Over Load Time Relay</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_11">
            <type>state</type>
            <sensorId>register_4_bit_11</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Capacity Unset</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_12">
            <type>state</type>
            <sensorId>register_4_bit_12</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Parameter 1 LRC Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_13">
            <type>state</type>
            <sensorId>register_4_bit_13</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Parameter 2 LRC Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_14">
            <type>state</type>
            <sensorId>register_4_bit_14</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Parameter 3 LRC Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_4_BIT_15">
            <type>state</type>
            <sensorId>register_4_bit_15</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>History Alarm LRC Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_5_BIT_0">
            <type>state</type>
            <sensorId>register_5_bit_0</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister5</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>History Events LRC Failure</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>
		

		<stateSensor ruleid="register_5_BIT_1">
            <type>state</type>
            <sensorId>register_5_bit_1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister5</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Mother Board Battery Low Voltage</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="register_5_BIT_2">
            <type>state</type>
            <sensorId>register_5_bit_2</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister5</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>CAN BUS No Action</label>
			<enum>normal_alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

    </device>
    <protocol>
        <modbus>

            <value_ref_id valid="outputlinevoltageu12">
                <function>3</function>
                <start_addr>0</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputlinevoltageu23">
                <function>3</function>
                <start_addr>2</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputlinevoltageu31">
                <function>3</function>
                <start_addr>4</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasevoltagel1">
                <function>3</function>
                <start_addr>6</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasevoltagel2">
                <function>3</function>
                <start_addr>8</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasevoltagel3">
                <function>3</function>
                <start_addr>10</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasecurrentl1">
                <function>3</function>
                <start_addr>12</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasecurrentl2">
                <function>3</function>
                <start_addr>14</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputphasecurrentl3">
                <function>3</function>
                <start_addr>16</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputneutrallinecurrent">
                <function>3</function>
                <start_addr>18</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputactivepowerl1">
                <function>3</function>
                <start_addr>20</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputactivepowerl2">
                <function>3</function>
                <start_addr>22</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputactivepowerl3">
                <function>3</function>
                <start_addr>24</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypassfrequency">
                <function>3</function>
                <start_addr>26</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inverterfrequency">
                <function>3</function>
                <start_addr>28</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypasslinevoltagel1l2">
                <function>3</function>
                <start_addr>30</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypasslinevoltagel2l3">
                <function>3</function>
                <start_addr>32</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypasslinevoltagel3l1">
                <function>3</function>
                <start_addr>34</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batteryvoltage">
                <function>3</function>
                <start_addr>36</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterycurrent">
                <function>3</function>
                <start_addr>38</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputapparentpowerl1">
                <function>3</function>
                <start_addr>40</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputapparentpowerl2">
                <function>3</function>
                <start_addr>42</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputapparentpowerl3">
                <function>3</function>
                <start_addr>44</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputloadfactorl1">
                <function>3</function>
                <start_addr>46</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputloadfactorl2">
                <function>3</function>
                <start_addr>48</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputloadfactorl3">
                <function>3</function>
                <start_addr>50</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterychargingcapacity">
                <function>3</function>
                <start_addr>52</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterybackuptime">
                <function>3</function>
                <start_addr>54</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterytemperature">
                <function>3</function>
                <start_addr>56</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>

            <value_ref_id valid="statusregister0">
                <function>3</function>
                <start_addr>1000</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister1">
                <function>3</function>
                <start_addr>1001</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister2">
                <function>3</function>
                <start_addr>1002</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister3">
                <function>3</function>
                <start_addr>1003</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister4">
                <function>3</function>
                <start_addr>1004</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister5">
                <function>3</function>
                <start_addr>1005</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

		</modbus>
	</protocol>
</APC_DDF>