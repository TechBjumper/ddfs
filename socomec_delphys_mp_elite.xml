<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="socomec_delphys_mp_elite"
	ddfname="Socomec Delphys MP Elite"
	ddfversion="1"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="socomec_delphys_mp_elite">

		<setProductData ruleid="vendordata" field="vendor">Socomec</setProductData>
		<setProductData ruleid="modeldata" field="model">Delphys MP Elite</setProductData>
		<setProductData ruleid="typedata" field="type">Generic Device</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		

		<numSensor ruleid="UPS_CODE_SENSOR">
            <type>num</type>
            <sensorId>ups_code</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>upscode</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>UPS Code</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="UPS_POWER_SENSOR">
            <type>num</type>
            <sensorId>ups_power</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>upspower</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>UPS Power</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="MODULE_NUMBER_SENSOR">
            <type>num</type>
            <sensorId>module_number</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>modulenumber</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Module Number</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="SERIAL_NUMBER_SENSOR">
            <type>num</type>
            <sensorId>serial_number</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>serialnumber</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Serial Number</label>
            <sensorSet>General</sensorSet>
        </numSensor>

		<enumMap ruleid="true_false_em">
			<label>0</label>
			<label>1</label>
			<label>Unknown</label>
		</enumMap>


        <stateSensor ruleid="STATUS_REGISTER_0_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier Input supply present</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_0_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter ON</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_0_BIT_2_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_2</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier ON</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_0_BIT_3_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_3</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Load protected by inverter</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_0_BIT_4_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_4</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Load on automatic bypass</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_0_BIT_5_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_5</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Load on Battery</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_0_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Remote controls disable</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_0_BIT_7_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_7</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Eco-mode ON</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_0_BIT_14_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_14</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery test failed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_0_BIT_15_SENSOR">
            <type>state</type>
            <sensorId>status_register_0_bit_15</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery near end of backup time</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_1_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery discharged</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_1_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery OK</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_1_BIT_10_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_10</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass input supply present</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_1_BIT_11_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_11</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Charging</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_1_BIT_12_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_12</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass input frequency out of tolerance</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_1_BIT_14_SENSOR">
            <type>state</type>
            <sensorId>status_register_1_bit_14</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister1</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>UPS on parallel system</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_2_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Unit operating (available or coupled)</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Input 1</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_7_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_7</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Input 2</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_8_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_8</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Input 3</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_9_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_9</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Input 4</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_10_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_10</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Controls permission table manage</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_2_BIT_14_SENSOR">
            <type>state</type>
            <sensorId>status_register_2_bit_14</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Operating on Gen Set</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_3_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>status_register_3_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Maintenance Mode Active</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_3_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>status_register_3_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>End of first maintenance period</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="STATUS_REGISTER_4_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Boost charge ON</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_2_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_2</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter switch closed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_3_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_3</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass breaker closed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_4_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_4</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Maintenance bypass breaker closed (Q5)</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_5_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_5</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Remote maintenance bypass breaker closed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Output breaker closed (Q3)</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_7_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_7</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Q21 closed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_8_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_8</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Q22 closed</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_9_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_9</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Unit working</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="STATUS_REGISTER_4_BIT_12_SENSOR">
            <type>state</type>
            <sensorId>status_register_4_bit_12</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister4</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Normal mode active</label><enum>true_false_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>









        <stateSensor ruleid="ALARM_REGISTER_0_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>General Alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_0_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Failure</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_0_BIT_2_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_2</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>UPS overload</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_0_BIT_4_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_4</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Control Failure (com, internal supply...)</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_0_BIT_5_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_5</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier input supply out of tolerance</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_0_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass input supply out of tolerance</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_0_BIT_7_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_7</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Over temperature alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_0_BIT_8_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_0_bit_8</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister0</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Maintenance bypass closed</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_1_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Improper condition of use (Q3 and Q5 closed)</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_1_BIT_2_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_2</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter stopped for overload (or bypass transfer)</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_1_BIT_3_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_3</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Microprocessor control system</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>




        <stateSensor ruleid="ALARM_REGISTER_1_BIT_5_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_5</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Synchronisation fault (PLL fault)</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_1_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier input supply fault</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_1_BIT_7_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_7</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier preventative alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_1_BIT_9_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_9</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter preventative alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_1_BIT_10_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_10</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Charger general alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_1_BIT_13_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_13</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass preventative alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_1_BIT_15_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_1_bit_15</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister1</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Imminent STOP</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_2_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Unit 1 general alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_2_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>External Alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>

        <stateSensor ruleid="ALARM_REGISTER_2_BIT_10_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_10</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>e-Service</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>



        <stateSensor ruleid="ALARM_REGISTER_2_BIT_12_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_12</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Servicing alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_2_BIT_13_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_13</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Automatic and manual transfer disable</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_2_BIT_14_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_14</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Automatic transfer disable</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>




        <stateSensor ruleid="ALARM_REGISTER_2_BIT_15_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_2_bit_15</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister2</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery room alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_0_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_0</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Maintenance bypass alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_1_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_1</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery Discharged</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_3_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_3</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Synoptic alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_4_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_4</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Rectifier fault</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_6_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_6</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Inverter fault</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_10_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_10</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>ESD activated</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_11_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_11</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Battery circuit open</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>


        <stateSensor ruleid="ALARM_REGISTER_3_BIT_14_SENSOR">
            <type>state</type>
            <sensorId>alarm_register_3_bit_14</sensorId>
            <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>alarmregister3</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Bypass critical alarm</label><enum>true_false_em</enum>
            <sensorSet>Alarms</sensorSet>
        </stateSensor>



        <numSensor ruleid="LOAD_RATE_PHASE_1_SENSOR">
            <type>num</type>
			<units>percent</units>
            <sensorId>load_rate_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>loadratephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Load Rate Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="LOAD_RATE_PHASE_3_SENSOR">
            <type>num</type>
			<units>percent</units>
            <sensorId>load_rate_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>loadratephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Load Rate Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="LOAD_RATE_PHASE_2_SENSOR">
            <type>num</type>
			<units>percent</units>
            <sensorId>load_rate_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>loadratephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Load Rate Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>

        <numSensor ruleid="UPS_LOAD_RATE_SENSOR">
            <type>num</type>
			<units>percent</units>
            <sensorId>ups_load_rate</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>upsloadrate</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>UPS Load Rate</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_CAPACITY_PERCENT_SENSOR">
            <type>num</type>
			<units>percent</units>
            <sensorId>battery_capacity_percent</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterycapacitypercent</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Capacity Percent</label>
            <sensorSet>General</sensorSet>
        </numSensor>

        <numSensor ruleid="BATTERY_CAPACITY_AH_SENSOR">
            <type>num</type>
			<units>amphours</units>
            <sensorId>battery_capacity_ah</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterycapacityah</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Battery Capacity AH</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_BYPASS_VOLTAGE_PHASE_1_SENSOR">
            <type>voltage</type>
            <sensorId>input_bypass_voltage_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputbypassvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Bypass Voltage Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_BYPASS_VOLTAGE_PHASE_2_SENSOR">
            <type>voltage</type>
            <sensorId>input_bypass_voltage_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputbypassvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Bypass Voltage Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_BYPASS_VOLTAGE_PHASE_3_SENSOR">
            <type>voltage</type>
            <sensorId>input_bypass_voltage_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputbypassvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Bypass Voltage Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_PHASE_1_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_PHASE_2_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_PHASE_3_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_PHASE_1_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase1</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Current Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_PHASE_2_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase2</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Current Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_PHASE_3_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase3</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Current Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_BYPASS_FREQUENCY_SENSOR">
            <type>frequency</type>
            <sensorId>input_bypass_frequency</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputbypassfrequency</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Input Bypass Frequency</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_VOLTAGE_POSITIVE_SENSOR">
            <type>voltage</type>
            <sensorId>battery_voltage_positive</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batteryvoltagepositive</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Battery Voltage Positive</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_VOLTAGE_NEGATIVE_SENSOR">
            <type>voltage</type>
            <sensorId>battery_voltage_negative</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batteryvoltagenegative</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Battery Voltage Negative</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="AMBIENT_TEMPERATURE_SENSOR">
            <type>temp</type>
            <sensorId>ambient_temperature</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>ambienttemperature</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Ambient Temperature</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="REMAINING_BACKUP_TIME_SENSOR">
            <type>timeinmin</type>
            <sensorId>remaining_backup_time</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>remainingbackuptime</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Remaining Backup Time</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_CURRENT_SENSOR">
            <type>amperage</type>
            <sensorId>battery_current</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterycurrent</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Battery Current</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_VOLTAGE_POSITIVE_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_voltage_positive</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfiervoltagepositive</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Voltage Positive</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_VOLTAGE_POSITIVE_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_voltage_positive</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfiervoltagepositive</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Voltage Positive</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_VOLTAGE_NEGATIVE_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_voltage_negative</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfiervoltagenegative</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Voltage Negative</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_INPUT_VOLTAGE_PHASE_1_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_input_voltage_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfierinputvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Input Voltage Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_INPUT_VOLTAGE_PHASE_2_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_input_voltage_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfierinputvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Input Voltage Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="RECITFIER_INPUT_VOLTAGE_PHASE_3_SENSOR">
            <type>voltage</type>
            <sensorId>recitfier_input_voltage_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>recitfierinputvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Recitfier Input Voltage Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="UPS_OUTPUT_POWER_SENSOR">
            <type>voltage</type>
            <sensorId>ups_output_power</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>upsoutputpower</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>UPS Output Power</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_PHASE_1_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase1</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Power Phase 1</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_PHASE_2_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase2</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Power Phase 2</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_PHASE_3_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase3</getOid>
                    </op>
                    <op>0.1</op>
                </mult>
            </value>
            <label>Output Power Phase 3</label>
            <sensorSet>General</sensorSet>
        </numSensor>
    </device>
    <protocol>
        <modbus>
            <value_ref_id valid="upscode">
                <function>3</function>
                <start_addr>4096</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="upspower">
                <function>3</function>
                <start_addr>4097</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="modulenumber">
                <function>3</function>
                <start_addr>4098</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="serialnumber">
                <function>3</function>
                <start_addr>4099</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="statusregister1">
                <function>3</function>
                <start_addr>4128</start_addr>
                <quantity>1</quantity>
                <type>uint_32</type>
            </value_ref_id>
            <value_ref_id valid="alarm">
                <function>3</function>
                <start_addr>4160</start_addr>
                <quantity>1</quantity>
                <type>uint_32</type>
            </value_ref_id>
            <value_ref_id valid="loadratephase1">
                <function>3</function>
                <start_addr>4192</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
			<value_ref_id valid="loadratephase2">
                <function>3</function>
                <start_addr>4193</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="loadratephase3">
                <function>3</function>
                <start_addr>4194</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="upsloadrate">
                <function>3</function>
                <start_addr>4195</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batterycapacitypercent">
                <function>3</function>
                <start_addr>4196</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batterycapacityah">
                <function>3</function>
                <start_addr>4196</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inputbypassvoltagephase1">
                <function>3</function>
                <start_addr>4197</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inputbypassvoltagephase2">
                <function>3</function>
                <start_addr>4198</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inputbypassvoltagephase3">
                <function>3</function>
                <start_addr>4199</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase1">
                <function>3</function>
                <start_addr>4200</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase2">
                <function>3</function>
                <start_addr>4201</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase3">
                <function>3</function>
                <start_addr>4202</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase1">
                <function>3</function>
                <start_addr>4207</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase2">
                <function>3</function>
                <start_addr>4208</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase3">
                <function>3</function>
                <start_addr>4209</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inputbypassfrequency">
                <function>3</function>
                <start_addr>4210</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batteryvoltagepositive">
                <function>3</function>
                <start_addr>4212</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batteryvoltagenegative">
                <function>3</function>
                <start_addr>4213</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="ambienttemperature">
                <function>3</function>
                <start_addr>4214</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="remainingbackuptime">
                <function>3</function>
                <start_addr>4215</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batterycurrent">
                <function>3</function>
                <start_addr>4216</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfiervoltagepositive">
                <function>3</function>
                <start_addr>4220</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfiervoltagepositive">
                <function>3</function>
                <start_addr>4220</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfiervoltagenegative">
                <function>3</function>
                <start_addr>4221</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfierinputvoltagephase1">
                <function>3</function>
                <start_addr>4225</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfierinputvoltagephase2">
                <function>3</function>
                <start_addr>4226</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="recitfierinputvoltagephase3">
                <function>3</function>
                <start_addr>4227</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="upsoutputpower">
                <function>3</function>
                <start_addr>4228</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase1">
                <function>3</function>
                <start_addr>4229</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase2">
                <function>3</function>
                <start_addr>4230</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase3">
                <function>3</function>
                <start_addr>4231</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister0">
                <function>3</function>
                <start_addr>4128</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
		
            <value_ref_id valid="statusregister1">
                <function>3</function>
                <start_addr>4129</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister2">
                <function>3</function>
                <start_addr>4130</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister3">
                <function>3</function>
                <start_addr>4131</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="statusregister4">
                <function>3</function>
                <start_addr>4132</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="alarmregister0">
                <function>3</function>
                <start_addr>4160</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

            <value_ref_id valid="alarmregister1">
                <function>3</function>
                <start_addr>4161</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="alarmregister2">
                <function>3</function>
                <start_addr>4162</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="alarmregister3">
                <function>3</function>
                <start_addr>4163</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>


		</modbus>
	</protocol>
</APC_DDF>