<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd" ddfid="woodward_dtsc200" ddfname="Woodward DTSC200" ddfversion="1" canremove="yes">
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="woodward_dtsc200">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
		<setProductData ruleid="vendordata" field="vendor">Woodward</setProductData>
		<setProductData ruleid="modeldata" field="model">DTSC200</setProductData>
		<setProductData ruleid="typedata" field="type">Transfer Switch</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname />
      - Slave
			<commSetting field="slaveaddress" />
		</setDefaultLabel>
		<numSensor ruleid="protocol_id">
			<type>num</type>
			<units />
			<sensorId>_TS_ANALOG_VALUE_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>PROTOCOL_ID</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Protocol ID</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_12">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_12</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 12</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_frequency">
			<type>frequency</type>
			<units />
			<sensorId>_INPUT_2_FREQ</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_FREQUENCY</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<valueInc>0.01</valueInc>
			<label>Source 2 Frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_1n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_1N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 1N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_frequency">
			<type>frequency</type>
			<units />
			<sensorId>_INPUT_1_FREQ</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_FREQUENCY</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<valueInc>0.01</valueInc>
			<label>Source 1 Frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_23">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_23</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 23</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_power_factor">
			<type>num/powerfactor</type>
			<units />
			<sensorId>_XATS_OUTPUT_PHASE_1_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_POWER_FACTOR</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 2 Power Factor</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_2n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_2N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 2N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_31">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_31</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 31</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_voltage_3n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_VOLTAGE_3N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Voltage 3N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY_VOLTAGE_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>BATTERY_VOLTAGE</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Battery voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_voltage_12">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_4</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_12</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 12</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_voltage_1n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_4</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_1N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 1N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_voltage_23">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_5</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_23</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 23</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<stateSensor ruleid="discrete_input_1">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_1</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_2">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_2</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_3">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_3</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_3</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 3</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_4">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_4</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_4</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 4</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_5">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_5</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_5</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 5</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_6">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_6</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_6</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 6</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_7">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_7</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_7</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 7</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_8">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_8</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_8</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 8</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_9">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_9</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_9</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 9</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_10">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_10</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_10</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 10</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_11">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_11</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_11</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 11</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="discrete_input_12">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_12</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>DISCRETE_INPUT_12</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Discrete input 12</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_1_voltage_2n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_5</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_2N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 2N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<stateSensor ruleid="relay_output_1">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY1_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_1</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_2">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY2_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_2</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_3">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY3_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_3</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 3</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_4">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY4_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_4</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 4</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_5">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY5_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_5</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 5</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_6">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY6_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_6</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 6</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_7">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY7_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_7</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 7</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_8">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY8_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_8</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 8</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="relay_output_9">
			<type>state</type>
			<sensorId>_XATS_OUTPUT_RELAY9_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>RELAY_OUTPUT_9</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Relay Output 9</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_1_voltage_31">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2L_6</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_31</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 31</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_voltage_3n">
			<type>voltage</type>
			<units />
			<sensorId>_LOAD_OUTPUT_VOLTAGE_L2N_6</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_VOLTAGE_3N</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Voltage 3N</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_current_phase_a">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_2_CURRENT_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_CURRENT_PHASE_A</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 2 Current Phase A</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_current_phase_b">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_2_CURRENT_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_CURRENT_PHASE_B</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 2 Current Phase B</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<stateSensor ruleid="can_interface_error">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>CAN_INTERFACE_ERROR</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CAN interface Error</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_2_current_phase_c">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_2_CURRENT_3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_CURRENT_PHASE_C</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 2 Current Phase C</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<stateSensor ruleid="load_overcurrent_limit_1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_OVERCURRENT_LIMIT_1</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load Overcurrent Limit 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_overcurrent_limit_2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_3</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_OVERCURRENT_LIMIT_2</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load Overcurrent Limit 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_overcurrent_limit_3">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_4</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_OVERCURRENT_LIMIT_3</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load Overcurrent Limit 3</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_overload_limit_1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_5</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_OVERLOAD_LIMIT_1</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load Overload Limit 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_overload_limit_2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_6</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_OVERLOAD_LIMIT_2</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load Overload Limit 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_1_power_factor">
			<type>num/powerfactor</type>
			<units />
			<sensorId>_XATS_OUTPUT_PHASE_2_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_POWER_FACTOR</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 1 Power factor</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_reactive_power_reg_50050">
			<type>powerVA/powerVAR</type>
			<units />
			<sensorId>_SOURCE_2_REACTIVE_POWER_REG_50050</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_REACTIVE_POWER_REG_50050</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 2 Reactive Power Reg 50050</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_real_power_reg_50053">
			<type>powerW</type>
			<units />
			<sensorId>_OUTPUT_2_POWER_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_REAL_POWER_REG_50053</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 2 Real Power Reg 50053</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<stateSensor ruleid="battery_overvoltage_limit_2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_7</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>BATTERY_OVERVOLTAGE_LIMIT_2</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery overvoltage Limit 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_undervoltage_limit_2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_8</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>BATTERY_UNDERVOLTAGE_LIMIT_2</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery undervoltage Limit 2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_overvoltage_limit_1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_9</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>BATTERY_OVERVOLTAGE_LIMIT_1</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery overvoltage Limit 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_undervoltage_limit_1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_10</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>BATTERY_UNDERVOLTAGE_LIMIT_1</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery undervoltage Limit 1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_1_reactive_power_reg_50056">
			<type>powerVA/powerVAR</type>
			<units />
			<sensorId>_SOURCE_1_REACTIVE_POWER_REG_50056</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_REACTIVE_POWER_REG_50056</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 1 Reactive Power Reg 50056</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_power_factor_reg_50058">
			<type>num/powerfactor</type>
			<units />
			<sensorId>_XATS_OUTPUT_PHASE_3_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_POWER_FACTOR_REG_50058</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<valueInc>0.01</valueInc>
			<label>Source 2 Power Factor Reg 50058</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_real_power_reg_50059">
			<type>powerW</type>
			<units />
			<sensorId>_OUTPUT_1_POWER_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_REAL_POWER_REG_50059</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 1 Real Power Reg 50059</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_real_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>SINGLE_PHASE_KW_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_REAL_POWER</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Real power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_reactive_power">
			<type>num/powerKVAR</type>
			<units />
			<sensorId>_TRANSFER_SWITCH_KVAR_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_REACTIVE_POWER</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 2 Reactive power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_2_positive_active_energy_counter">
			<type>num/kwatthr</type>
			<units />
			<sensorId>SINGLE_PHASE_KWH_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_POSITIVE_ACTIVE_ENERGY_COUNTER</getOid>
					</op>
					<op>100000</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 2 Positive active energy counter</label>
			<sensorSet>Energy</sensorSet>
		</numSensor>
		<stateSensor ruleid="logicsmanager_flag_1_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_11</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_1_IS_TRUE</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 1 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_2_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_12</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_2_IS_TRUE</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 2 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_3_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_13</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_3_IS_TRUE</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 3 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_4_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_14</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_4_IS_TRUE</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 4 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_5_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_15</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_5_IS_TRUE</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 5 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_6_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_16</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_6_IS_TRUE</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 6 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_7_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_17</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_7_IS_TRUE</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 7 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_flag_8_is_true">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_18</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_FLAG_8_IS_TRUE</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Flag 8 is TRUE</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="source_2_positive_reactive_energy_counter">
			<type>num/kVARhr</type>
			<units />
			<sensorId>_TRANSFER_SWITCH_KVARH_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_2_POSITIVE_REACTIVE_ENERGY_COUNTER</getOid>
					</op>
					<op>100000</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 2 Positive reactive energy counter</label>
			<sensorSet>Energy</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_power_factor_reg_50071">
			<type>num/powerfactor</type>
			<units />
			<sensorId>_XATS_OUTPUT_PHASE_4_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_POWER_FACTOR_REG_50071</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<valueInc>0.01</valueInc>
			<label>Source 1 Power Factor Reg 50071</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<stateSensor ruleid="external_discrete_output_16_rex16">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_19</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_16_REX16</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 16 Rex16</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_15_rex15">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_20</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_15_REX15</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 15 Rex15</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_14_rex14">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_21</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_14_REX14</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 14 Rex14</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_13_rex13">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_22</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_13_REX13</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 13 Rex13</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_12_rex12">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_23</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_12_REX12</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 12 Rex12</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_11_rex11">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_24</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_11_REX11</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 11 Rex11</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_10_rex10">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_25</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_10_REX10</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 10 Rex10</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_9_rex9">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_26</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_9_REX9</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 9 Rex9</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_8_rex8">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_27</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_8_REX8</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 8 Rex8</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_7_rex7">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_28</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_7_REX7</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 7 Rex7</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_6_rex6">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_29</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_6_REX6</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 6 Rex6</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_5_rex5">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_30</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_5_REX5</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 5 Rex5</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_4_rex4">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_31</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_4_REX4</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 4 Rex4</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_3_rex3">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_32</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_3_REX3</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 3 Rex3</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_2_rex2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_33</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_2_REX2</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 2 Rex2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_output_1_rex1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_34</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_OUTPUT_1_REX1</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete output 1 Rex1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_16_diex16">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_13</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_16_DIEX16</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 16 DIex16</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_15_diex15">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_14</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_15_DIEX15</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 15 DIex15</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_14_diex14">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_15</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_14_DIEX14</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 14 DIex14</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_13_diex13">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_16</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_13_DIEX13</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 13 DIex13</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_12_diex12">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_17</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_12_DIEX12</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 12 DIex12</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_11_diex11">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_18</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_11_DIEX11</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 11 DIex11</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_10_diex10">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_19</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_10_DIEX10</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 10 DIex10</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_9_diex9">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_20</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_9_DIEX9</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 9 DIex9</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_8_diex8">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_21</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_8_DIEX8</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 8 DIex8</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_7_diex7">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_22</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_7_DIEX7</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 7 DIex7</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_6_diex6">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_23</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_6_DIEX6</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 6 DIex6</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_5_diex5">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_24</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_5_DIEX5</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 5 DIex5</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_4_diex4">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_25</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_4_DIEX4</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 4 DIex4</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_3_diex3">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_26</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_3_DIEX3</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 3 DIex3</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_2_diex2">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_27</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_2_DIEX2</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 2 DIex2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_discrete_input_1_diex1">
			<type>state</type>
			<sensorId>_ATS_INPUT_TYPE_28</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXTERNAL_DISCRETE_INPUT_1_DIEX1</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External discrete input 1 DIex1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_1_is_available_and_stable">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_35</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_1_IS_AVAILABLE_AND_STABLE</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source 1 is Available and Stable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_2_is_available_and_stable">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_36</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_2_IS_AVAILABLE_AND_STABLE</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source 2 is Available and Stable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_1_is_available">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_37</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_1_IS_AVAILABLE</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source 1 is available</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_2_is_available">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_38</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_2_IS_AVAILABLE</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source 2 is available</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_priority_is_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_39</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_PRIORITY_IS_S1</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source priority is S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_priority_is_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_40</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCE_PRIORITY_IS_S2</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Source priority is S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s1_start_delay_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_41</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S1_START_DELAY_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S1 Start delay timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s2_start_delay_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_42</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S2_START_DELAY_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S2 Start delay timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s1_stable_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_43</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S1_STABLE_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S1 Stable timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s2_stable_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_44</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S2_STABLE_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S2 Stable timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s1_outage_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_45</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S1_OUTAGE_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S1 Outage timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s2_outage_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_46</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S2_OUTAGE_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S2 Outage timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_is_powered_by_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_47</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_IS_POWERED_BY_S1</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load is powered by S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_is_powered_by_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_48</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_IS_POWERED_BY_S2</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load is powered by S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="a_transfer_failure_occurred_open_close_failure">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_49</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>A_TRANSFER_FAILURE_OCCURRED_OPEN_CLOSE_FAILURE</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>A transfer failure occurred OPEN CLOSE failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="gen_2_gan_application_mode_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_50</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>GEN_2_GAN_APPLICATION_MODE_IS_ACTIVE</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Gen 2 Gan application mode is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_load_disconnect_direction_is_s1_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_51</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MOTOR_LOAD_DISCONNECT_DIRECTION_IS_S1_S2</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor Load Disconnect direction is S1 S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_load_disconnect_direction_is_s2_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_52</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MOTOR_LOAD_DISCONNECT_DIRECTION_IS_S2_S1</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor Load Disconnect direction is S2 S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_load_disconnect_direction_is_both">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_53</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MOTOR_LOAD_DISCONNECT_DIRECTION_IS_BOTH</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor Load Disconnect direction is BOTH</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="synchronicity_has_been_established">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_54</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SYNCHRONICITY_HAS_BEEN_ESTABLISHED</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Synchronicity has been established</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inphase_check_in_progress_for_transfer_direction_s1_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_55</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>INPHASE_CHECK_IN_PROGRESS_FOR_TRANSFER_DIRECTION_S1_S2</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inphase check in progress for transfer direction S1 S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inphase_check_in_progress_for_transfer_direction_s2_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_56</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>INPHASE_CHECK_IN_PROGRESS_FOR_TRANSFER_DIRECTION_S2_S1</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inphase check in progress for transfer direction S2 S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="sources_ok_for_inphase_transferboth_sources_are_available_and_stable">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_57</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SOURCES_OK_FOR_INPHASE_TRANSFERBOTH_SOURCES_ARE_AVAILABLE_AND_STABLE</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Sources OK for inphase transferBoth Sources are available and stable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_to_s1_is_inhibited_for_display_system">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_58</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_TO_S1_IS_INHIBITED_FOR_DISPLAY_SYSTEM</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer to S1 is inhibited for display system</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_to_s2_is_inhibited_for_display_system">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_59</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_TO_S2_IS_INHIBITED_FOR_DISPLAY_SYSTEM</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer to S2 is inhibited for display system</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s1_cooldown_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_60</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S1_COOLDOWN_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S1 cooldown timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="s2_cooldown_timer_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_61</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>S2_COOLDOWN_TIMER_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>S2 cooldown timer is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_reply_timer_s1_s2_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_62</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_REPLY_TIMER_S1_S2_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch reply timer S1 S2 is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_reply_timer_s2_s1_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_63</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_REPLY_TIMER_S2_S1_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch reply timer S2 S1 is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_pause_timer_s1_s2_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_64</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_PAUSE_TIMER_S1_S2_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer pause timer S1 S2 is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_pause_timer_s2_s1_is_timing_or_expired">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_65</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_PAUSE_TIMER_S2_S1_IS_TIMING_OR_EXPIRED</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer pause timer S2 S1 is timing or expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="closed_transition_mode_is_selected">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_66</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>CLOSED_TRANSITION_MODE_IS_SELECTED</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Closed transition mode is selected</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_is_in_s1_position">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_67</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_IS_IN_S1_POSITION</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch is in S1 position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_is_in_s2_position">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_68</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_IS_IN_S2_POSITION</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch is in S2 position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_is_in_neutral_position">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_69</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_IS_IN_NEUTRAL_POSITION</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch is in NEUTRAL position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_is_in_overlap_position">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_70</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_IS_IN_OVERLAP_POSITION</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch is in OVERLAP position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_shed_is_active_if_preferred_source_is_not_available">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_71</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_SHED_IS_ACTIVE_IF_PREFERRED_SOURCE_IS_NOT_AVAILABLE</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load shed is active if preferred source is not available</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_shed_situation_is_present">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_72</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOAD_SHED_SITUATION_IS_PRESENT</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load shed Situation is present</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="a_engine_test_is_requested_by_hmi">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_73</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>A_ENGINE_TEST_IS_REQUESTED_BY_HMI</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>A Engine Test is requested by HMI</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="a_load_test_is_requested_by_hmi">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_74</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>A_LOAD_TEST_IS_REQUESTED_BY_HMI</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>A Load Test is requested by HMI</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="a_engine_test_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_75</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>A_ENGINE_TEST_IS_ACTIVE</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>A Engine Test is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="elevator_pre_signal_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_76</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ELEVATOR_PRE_SIGNAL_IS_ACTIVE</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Elevator Pre Signal is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_load_disconnect_signal_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_77</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MOTOR_LOAD_DISCONNECT_SIGNAL_IS_ACTIVE</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor Load Disconnect Signal is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_close_switch_to_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_78</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COMMAND_CLOSE_SWITCH_TO_S1</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command Close Switch to S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_open_switch_from_s1">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_79</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COMMAND_OPEN_SWITCH_FROM_S1</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command Open switch from S1</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_close_switch_to_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_80</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COMMAND_CLOSE_SWITCH_TO_S2</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command Close Switch to S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_open_switch_from_s2">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_81</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COMMAND_OPEN_SWITCH_FROM_S2</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command Open Switch from S2</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="engine_1_start_signal_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_82</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ENGINE_1_START_SIGNAL_IS_ACTIVE</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine 1 Start Signal is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="engine_2_start_signal_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_83</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ENGINE_2_START_SIGNAL_IS_ACTIVE</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine 2 Start Signal is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="a_load_test_is_active">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_84</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>A_LOAD_TEST_IS_ACTIVE</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>A Load Test is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_ats_controller_is_in_inhibit_mode">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_85</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_ATS_CONTROLLER_IS_IN_INHIBIT_MODE</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag ATS Controller is in Inhibit Mode</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flagremote_peak_shave_mode_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_86</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAGREMOTE_PEAK_SHAVE_MODE_IS_REQUESTED</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output FlagRemote Peak Shave mode is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_inhibit_transfer_to_s1_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_87</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_INHIBIT_TRANSFER_TO_S1_IS_REQUESTED</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Inhibit Transfer to S1 is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_inhibit_transfer_to_s2_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_88</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_INHIBIT_TRANSFER_TO_S2_IS_REQUESTED</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Inhibit Transfer to S2 is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_interruptable_power_rate_provisions_are_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_89</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_INTERRUPTABLE_POWER_RATE_PROVISIONS_ARE_REQUESTED</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Interruptable power rate provisions are requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_delayed_transition_mode_is_forced">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_90</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_DELAYED_TRANSITION_MODE_IS_FORCED</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Delayed transition mode is forced</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_extended_parallel_time_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_91</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_EXTENDED_PARALLEL_TIME_IS_REQUESTED</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Extended parallel time is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_load_shed_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_92</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_LOAD_SHED_IS_REQUESTED</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Load shed is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_s1_priority_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_93</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_S1_PRIORITY_IS_REQUESTED</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag S1 priority is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_s2_priority_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_94</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_S2_PRIORITY_IS_REQUESTED</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag S2 priority is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_external_timer_bypass_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_95</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_EXTERNAL_TIMER_BYPASS_IS_REQUESTED</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag External timer Bypass is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_no_load_test_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_96</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_NO_LOAD_TEST_IS_REQUESTED</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag No Load Test is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_load_test_is_requested">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_97</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_LOAD_TEST_IS_REQUESTED</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Load Test is requested</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="logicsmanager_output_flag_gen_2_gen_mode_is_enabled">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_98</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>LOGICSMANAGER_OUTPUT_FLAG_GEN_2_GEN_MODE_IS_ENABLED</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>LogicsManager Output Flag Gen 2 Gen mode is enabled</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="start_delay_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_IN_ROOM_UNIT_STATE_99</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>START_DELAY_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Start Delay timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="start_delay_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_1</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>START_DELAY_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Start Delay timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stable_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_2</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>STABLE_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stable timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stable_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_3</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>STABLE_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stable timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outage_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_4</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>OUTAGE_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outage timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outage_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_5</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>OUTAGE_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outage timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="cooldown_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_6</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COOLDOWN_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Cooldown timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="cooldown_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_7</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COOLDOWN_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Cooldown timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_reply_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_8</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_REPLY_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch reply timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_reply_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_9</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SWITCH_REPLY_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch reply timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_pause_timer_s1_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_10</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_PAUSE_TIMER_S1_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer pause timer S1 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_pause_timer_s2_is_timing_at_the_moment">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_11</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_PAUSE_TIMER_S2_IS_TIMING_AT_THE_MOMENT</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer pause timer S2 is timing at the moment</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="start_delay_timer_s1_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_12</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>START_DELAY_TIMER_S1_IS_EXPIRED</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Start Delay timer S1 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="start_delay_timer_s2_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_13</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>START_DELAY_TIMER_S2_IS_EXPIRED</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Start Delay timer S2 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stable_timer_s1_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_14</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>STABLE_TIMER_S1_IS_EXPIRED</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stable timer S1 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stable_timer_s2_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_15</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>STABLE_TIMER_S2_IS_EXPIRED</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stable timer S2 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outage_timer_s1_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_16</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>OUTAGE_TIMER_S1_IS_EXPIRED</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outage timer S1 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="outage_timer_s2_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_17</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>OUTAGE_TIMER_S2_IS_EXPIRED</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Outage timer S2 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="cooldown_timer_s1_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_18</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COOLDOWN_TIMER_S1_IS_EXPIRED</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Cooldown timer S1 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="cooldown_timer_s2_is_expired">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_19</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>COOLDOWN_TIMER_S2_IS_EXPIRED</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Cooldown timer S2 is expired</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="exercise_timer_is_active">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_20</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EXERCISE_TIMER_IS_ACTIVE</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Exercise Timer is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_delay_timer_s1_s2_is_active">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_21</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_DELAY_TIMER_S1_S2_IS_ACTIVE</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer Delay Timer S1 S2 is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="transfer_delay_timer_s2_s1_is_active">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_22</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>TRANSFER_DELAY_TIMER_S2_S1_IS_ACTIVE</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Transfer Delay Timer S2 S1 is active</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<numSensor ruleid="phase_angle_between_s1_and_s2">
			<type>num</type>
			<units>degreesAngle</units>
			<sensorId>_PHASE_ANGLE_BETWEEN_S1_AND_S2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>PHASE_ANGLE_BETWEEN_S1_AND_S2</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Phase angle between S1 and S2</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_current_phase_a">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_1_CURRENT_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_CURRENT_PHASE_A</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 1 Current Phase A</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_real_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>SINGLE_PHASE_KW_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_REAL_POWER</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Real power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_current_phase_b">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_1_CURRENT_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_CURRENT_PHASE_B</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 1 Current Phase B</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_reactive_power">
			<type>num/powerKVAR</type>
			<units />
			<sensorId>_TRANSFER_SWITCH_KVAR_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_REACTIVE_POWER</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Source 1 Reactive power</label>
			<sensorSet>Power</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_current_phase_c">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_1_CURRENT_3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_CURRENT_PHASE_C</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<valueInc>0.001</valueInc>
			<label>Source 1 Current Phase C</label>
			<sensorSet>Current</sensorSet>
		</numSensor>
		<numSensor ruleid="source_1_positive_active_energy_counter">
			<type>num/kwatthr</type>
			<units />
			<sensorId>SINGLE_PHASE_KWH_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>SOURCE_1_POSITIVE_ACTIVE_ENERGY_COUNTER</getOid>
					</op>
					<op>100000</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Source 1 Positive active energy counter</label>
			<sensorSet>Energy</sensorSet>
		</numSensor>
		<stateSensor ruleid="logicsmanager_12891_output_flag_reset_lim_sw_fail_enable">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_24</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<getOid>LOGICSMANAGER_12891_OUTPUT_FLAG_RESET_LIM_SW_FAIL_ENABLE</getOid>
				</mapValue>
			</value>
			<label>LogicsManager 12891 output flag Reset lim Sw fail enable</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="source_1_positive_reactive_energy_counter">
			<type>state</type>
			<sensorId>_TRANSFER_SWITCH_SENSOR_STATE_25</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<getOid>SOURCE_1_POSITIVE_REACTIVE_ENERGY_COUNTER</getOid>
				</mapValue>
			</value>
			<label>Source 1 Positive reactive energy counter</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<alarmFlags ruleid="actualalarm1">
			<value>
				<getOid>Function_3_Reg_50013</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Actual Alarm: S2 Underfrequency present</activeText>
					<inactiveText>Actual Alarm: S2 Underfrequency Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 Underfrequency condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 Underfrequency condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>Actual Alarm: S2 Overfrequency present</activeText>
					<inactiveText>Actual Alarm: S2 Overfrequency Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 Overfrequency condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 Overfrequency condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>Actual Alarm: S2 Undervoltage present</activeText>
					<inactiveText>Actual Alarm: S2 Undervoltage Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 Undervoltage condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 Undervoltage condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>Actual Alarm: S2 Overvoltage present</activeText>
					<inactiveText>Actual Alarm: S2 Overvoltage Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 Overvoltage condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 Overvoltage condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>Actual Alarm: S1 Underfrequency present</activeText>
					<inactiveText>Actual Alarm: S1 Underfrequency Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 Underfrequency condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 Underfrequency condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Actual Alarm: S1 Overfrequency present</activeText>
					<inactiveText>Actual Alarm: S1 Overfrequency Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 Overfrequency condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 Overfrequency condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Actual Alarm: S1 Undervoltage present</activeText>
					<inactiveText>Actual Alarm: S1 Undervoltage Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 Undervoltage condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 Undervoltage condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Actual Alarm: S1 Overvoltage present</activeText>
					<inactiveText>Actual Alarm: S1 Overvoltage Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 Overvoltage condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 Overvoltage condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>Actual Alarm: Transfer switch mechanical failure present</activeText>
					<inactiveText>Actual Alarm: Transfer switch mechanical failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: Transfer switch mechanical failure condition exists.</activeText>
					<inactiveText>A Actual Alarm: Transfer switch mechanical failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="latchedalarm1">
			<value>
				<getOid>Function_3_Reg_50016</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>Latched Alarm: Transfer switch mechanical failure present</activeText>
					<inactiveText>Latched Alarm: Transfer switch mechanical failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Transfer switch mechanical failure condition exists.</activeText>
					<inactiveText>A Latched Alarm: Transfer switch mechanical failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000">
				<name>
					<activeText>Latched Alarm: S2 close failure present</activeText>
					<inactiveText>Latched Alarm: S2 close failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S2 close failure condition exists.</activeText>
					<inactiveText>A Latched Alarm: S2 close failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000">
				<name>
					<activeText>Latched Alarm: S1 close failure present</activeText>
					<inactiveText>Latched Alarm: S1 close failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S1 close failure condition exists.</activeText>
					<inactiveText>A Latched Alarm: S1 close failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000">
				<name>
					<activeText>Latched Alarm: S2 open failure present</activeText>
					<inactiveText>Latched Alarm: S2 open failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S2 open failure condition exists.</activeText>
					<inactiveText>A Latched Alarm: S2 open failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>Latched Alarm: S1 open failure present</activeText>
					<inactiveText>Latched Alarm: S1 open failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S1 open failure condition exists.</activeText>
					<inactiveText>A Latched Alarm: S1 open failure condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="actualalarm2">
			<value>
				<getOid>Function_3_Reg_50022</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Actual Alarm: Overlap time exceeded present</activeText>
					<inactiveText>Actual Alarm: Overlap time exceeded Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: Overlap time exceeded condition exists.</activeText>
					<inactiveText>A Actual Alarm: Overlap time exceeded condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>Actual Alarm: Inphase-Check timeout present</activeText>
					<inactiveText>Actual Alarm: Inphase-Check timeout Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: Inphase-Check timeout condition exists.</activeText>
					<inactiveText>A Actual Alarm: Inphase-Check timeout condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000">
				<name>
					<activeText>Actual Alarm: S2 Phase rotation mismatch present</activeText>
					<inactiveText>Actual Alarm: S2 Phase rotation mismatch Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 Phase rotation mismatch condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 Phase rotation mismatch condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000">
				<name>
					<activeText>Actual Alarm: S1 Phase rotation mismatch present</activeText>
					<inactiveText>Actual Alarm: S1 Phase rotation mismatch Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 Phase rotation mismatch condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 Phase rotation mismatch condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000">
				<name>
					<activeText>Actual Alarm: S2 voltage imbalance present</activeText>
					<inactiveText>Actual Alarm: S2 voltage imbalance Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S2 voltage imbalance condition exists.</activeText>
					<inactiveText>A Actual Alarm: S2 voltage imbalance condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>Actual Alarm: S1 voltage imbalance present</activeText>
					<inactiveText>Actual Alarm: S1 voltage imbalance Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Actual Alarm: S1 voltage imbalance condition exists.</activeText>
					<inactiveText>A Actual Alarm: S1 voltage imbalance condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<alarmFlags ruleid="latchedalarm2">
			<value>
				<getOid>Function_3_Reg_50025</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>N/A present</activeText>
					<inactiveText>N/A Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A N/A condition exists.</activeText>
					<inactiveText>A N/A condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Latched Alarm: Overlap time exceeded present</activeText>
					<inactiveText>Latched Alarm: Overlap time exceeded Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Overlap time exceeded condition exists.</activeText>
					<inactiveText>A Latched Alarm: Overlap time exceeded condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Latched Alarm: Unintended Stop S1 present</activeText>
					<inactiveText>Latched Alarm: Unintended Stop S1 Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Unintended Stop S1 condition exists.</activeText>
					<inactiveText>A Latched Alarm: Unintended Stop S1 condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>Latched Alarm: Startfailure S1 present</activeText>
					<inactiveText>Latched Alarm: Startfailure S1 Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Startfailure S1 condition exists.</activeText>
					<inactiveText>A Latched Alarm: Startfailure S1 condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>Latched Alarm: Unintended Stop S2 present</activeText>
					<inactiveText>Latched Alarm: Unintended Stop S2 Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Unintended Stop S2 condition exists.</activeText>
					<inactiveText>A Latched Alarm: Unintended Stop S2 condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>Latched Alarm: Startfailure S2 present</activeText>
					<inactiveText>Latched Alarm: Startfailure S2 Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Startfailure S2 condition exists.</activeText>
					<inactiveText>A Latched Alarm: Startfailure S2 condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>Latched Alarm: Inphase-Check timeout present</activeText>
					<inactiveText>Latched Alarm: Inphase-Check timeout Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: Inphase-Check timeout condition exists.</activeText>
					<inactiveText>A Latched Alarm: Inphase-Check timeout condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000">
				<name>
					<activeText>Latched Alarm: S2 Phase rotation mismatch present</activeText>
					<inactiveText>Latched Alarm: S2 Phase rotation mismatch Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S2 Phase rotation mismatch condition exists.</activeText>
					<inactiveText>A Latched Alarm: S2 Phase rotation mismatch condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000">
				<name>
					<activeText>Latched Alarm: S1 Phase rotation mismatch present</activeText>
					<inactiveText>Latched Alarm: S1 Phase rotation mismatch Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S1 Phase rotation mismatch condition exists.</activeText>
					<inactiveText>A Latched Alarm: S1 Phase rotation mismatch condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000">
				<name>
					<activeText>Latched Alarm: S2 voltage imbalance present</activeText>
					<inactiveText>Latched Alarm: S2 voltage imbalance Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S2 voltage imbalance condition exists.</activeText>
					<inactiveText>A Latched Alarm: S2 voltage imbalance condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>Latched Alarm: S1 voltage imbalance present</activeText>
					<inactiveText>Latched Alarm: S1 voltage imbalance Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Latched Alarm: S1 voltage imbalance condition exists.</activeText>
					<inactiveText>A Latched Alarm: S1 voltage imbalance condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<valueMap ruleid="truefalse_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="truefalse_em">
			<label>True</label>
			<label>False</label>
		</enumMap>
	</device>
	<protocol>
		<modbus>
			<value_ref_id valid="PROTOCOL_ID">
				<function>3</function>
				<start_addr>50000</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_12">
				<function>3</function>
				<start_addr>50001</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_FREQUENCY">
				<function>3</function>
				<start_addr>50003</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_1N">
				<function>3</function>
				<start_addr>50004</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_FREQUENCY">
				<function>3</function>
				<start_addr>50006</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_23">
				<function>3</function>
				<start_addr>50007</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_POWER_FACTOR">
				<function>3</function>
				<start_addr>50009</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_2N">
				<function>3</function>
				<start_addr>50010</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_50013">
				<function>3</function>
				<start_addr>50012</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_31">
				<function>3</function>
				<start_addr>50013</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_50016">
				<function>3</function>
				<start_addr>50015</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_VOLTAGE_3N">
				<function>3</function>
				<start_addr>50016</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_VOLTAGE">
				<function>3</function>
				<start_addr>50018</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_12">
				<function>3</function>
				<start_addr>50019</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_50022">
				<function>3</function>
				<start_addr>50021</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_1N">
				<function>3</function>
				<start_addr>50022</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_50025">
				<function>3</function>
				<start_addr>50024</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_23">
				<function>3</function>
				<start_addr>50025</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_1">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_2">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_3">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_4">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_5">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_6">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_7">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_8">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_9">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_10">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_11">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="DISCRETE_INPUT_12">
				<function>3</function>
				<start_addr>50027</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_2N">
				<function>3</function>
				<start_addr>50028</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_1">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_2">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_3">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_4">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_5">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_6">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_7">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_8">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="RELAY_OUTPUT_9">
				<function>3</function>
				<start_addr>50030</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_31">
				<function>3</function>
				<start_addr>50031</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_VOLTAGE_3N">
				<function>3</function>
				<start_addr>50034</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_CURRENT_PHASE_A">
				<function>3</function>
				<start_addr>50037</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_CURRENT_PHASE_B">
				<function>3</function>
				<start_addr>50040</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="CAN_INTERFACE_ERROR">
				<function>3</function>
				<start_addr>50042</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_CURRENT_PHASE_C">
				<function>3</function>
				<start_addr>50043</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_OVERCURRENT_LIMIT_1">
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_OVERCURRENT_LIMIT_2">
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_OVERCURRENT_LIMIT_3">
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_OVERLOAD_LIMIT_1">
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_OVERLOAD_LIMIT_2">
				<function>3</function>
				<start_addr>50045</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_POWER_FACTOR">
				<function>3</function>
				<start_addr>50046</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_REACTIVE_POWER_REG_50050">
				<function>3</function>
				<start_addr>50049</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_REAL_POWER_REG_50053">
				<function>3</function>
				<start_addr>50052</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_OVERVOLTAGE_LIMIT_2">
				<function>3</function>
				<start_addr>50054</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_UNDERVOLTAGE_LIMIT_2">
				<function>3</function>
				<start_addr>50054</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_OVERVOLTAGE_LIMIT_1">
				<function>3</function>
				<start_addr>50054</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_UNDERVOLTAGE_LIMIT_1">
				<function>3</function>
				<start_addr>50054</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_REACTIVE_POWER_REG_50056">
				<function>3</function>
				<start_addr>50055</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_POWER_FACTOR_REG_50058">
				<function>3</function>
				<start_addr>50057</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_REAL_POWER_REG_50059">
				<function>3</function>
				<start_addr>50058</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_REAL_POWER">
				<function>3</function>
				<start_addr>50060</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_REACTIVE_POWER">
				<function>3</function>
				<start_addr>50061</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_POSITIVE_ACTIVE_ENERGY_COUNTER">
				<function>3</function>
				<start_addr>50064</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_1_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_2_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_3_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_4_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_5_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_6_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_7_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_FLAG_8_IS_TRUE">
				<function>3</function>
				<start_addr>50066</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_POSITIVE_REACTIVE_ENERGY_COUNTER">
				<function>3</function>
				<start_addr>50067</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_POWER_FACTOR_REG_50071">
				<function>3</function>
				<start_addr>50070</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_16_REX16">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_15_REX15">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_14_REX14">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_13_REX13">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_12_REX12">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_11_REX11">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_10_REX10">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_9_REX9">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_8_REX8">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_7_REX7">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_6_REX6">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_5_REX5">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_4_REX4">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_3_REX3">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_2_REX2">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_OUTPUT_1_REX1">
				<function>3</function>
				<start_addr>50075</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_16_DIEX16">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_15_DIEX15">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_14_DIEX14">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_13_DIEX13">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_12_DIEX12">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_11_DIEX11">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_10_DIEX10">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_9_DIEX9">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_8_DIEX8">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_7_DIEX7">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_6_DIEX6">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_5_DIEX5">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_4_DIEX4">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_3_DIEX3">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_2_DIEX2">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXTERNAL_DISCRETE_INPUT_1_DIEX1">
				<function>3</function>
				<start_addr>50076</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_IS_AVAILABLE_AND_STABLE">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_IS_AVAILABLE_AND_STABLE">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_IS_AVAILABLE">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_2_IS_AVAILABLE">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_PRIORITY_IS_S1">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_PRIORITY_IS_S2">
				<function>3</function>
				<start_addr>50078</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S1_START_DELAY_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S2_START_DELAY_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S1_STABLE_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S2_STABLE_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S1_OUTAGE_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S2_OUTAGE_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_IS_POWERED_BY_S1">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_IS_POWERED_BY_S2">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="A_TRANSFER_FAILURE_OCCURRED_OPEN_CLOSE_FAILURE">
				<function>3</function>
				<start_addr>50079</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="GEN_2_GAN_APPLICATION_MODE_IS_ACTIVE">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MOTOR_LOAD_DISCONNECT_DIRECTION_IS_S1_S2">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MOTOR_LOAD_DISCONNECT_DIRECTION_IS_S2_S1">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MOTOR_LOAD_DISCONNECT_DIRECTION_IS_BOTH">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SYNCHRONICITY_HAS_BEEN_ESTABLISHED">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="INPHASE_CHECK_IN_PROGRESS_FOR_TRANSFER_DIRECTION_S1_S2">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="INPHASE_CHECK_IN_PROGRESS_FOR_TRANSFER_DIRECTION_S2_S1">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCES_OK_FOR_INPHASE_TRANSFERBOTH_SOURCES_ARE_AVAILABLE_AND_STABLE">
				<function>3</function>
				<start_addr>50080</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_TO_S1_IS_INHIBITED_FOR_DISPLAY_SYSTEM">
				<function>3</function>
				<start_addr>50081</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_TO_S2_IS_INHIBITED_FOR_DISPLAY_SYSTEM">
				<function>3</function>
				<start_addr>50081</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S1_COOLDOWN_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50081</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="S2_COOLDOWN_TIMER_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50081</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_REPLY_TIMER_S1_S2_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_REPLY_TIMER_S2_S1_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_PAUSE_TIMER_S1_S2_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_PAUSE_TIMER_S2_S1_IS_TIMING_OR_EXPIRED">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="CLOSED_TRANSITION_MODE_IS_SELECTED">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_IS_IN_S1_POSITION">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_IS_IN_S2_POSITION">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_IS_IN_NEUTRAL_POSITION">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_IS_IN_OVERLAP_POSITION">
				<function>3</function>
				<start_addr>50082</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_SHED_IS_ACTIVE_IF_PREFERRED_SOURCE_IS_NOT_AVAILABLE">
				<function>3</function>
				<start_addr>50083</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOAD_SHED_SITUATION_IS_PRESENT">
				<function>3</function>
				<start_addr>50083</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="A_ENGINE_TEST_IS_REQUESTED_BY_HMI">
				<function>3</function>
				<start_addr>50083</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="A_LOAD_TEST_IS_REQUESTED_BY_HMI">
				<function>3</function>
				<start_addr>50083</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="A_ENGINE_TEST_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ELEVATOR_PRE_SIGNAL_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MOTOR_LOAD_DISCONNECT_SIGNAL_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COMMAND_CLOSE_SWITCH_TO_S1">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COMMAND_OPEN_SWITCH_FROM_S1">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COMMAND_CLOSE_SWITCH_TO_S2">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COMMAND_OPEN_SWITCH_FROM_S2">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ENGINE_1_START_SIGNAL_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ENGINE_2_START_SIGNAL_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="A_LOAD_TEST_IS_ACTIVE">
				<function>3</function>
				<start_addr>50084</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_ATS_CONTROLLER_IS_IN_INHIBIT_MODE">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAGREMOTE_PEAK_SHAVE_MODE_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_INHIBIT_TRANSFER_TO_S1_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_INHIBIT_TRANSFER_TO_S2_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_INTERRUPTABLE_POWER_RATE_PROVISIONS_ARE_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_DELAYED_TRANSITION_MODE_IS_FORCED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_EXTENDED_PARALLEL_TIME_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_LOAD_SHED_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_S1_PRIORITY_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_S2_PRIORITY_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_EXTERNAL_TIMER_BYPASS_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_NO_LOAD_TEST_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_LOAD_TEST_IS_REQUESTED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_OUTPUT_FLAG_GEN_2_GEN_MODE_IS_ENABLED">
				<function>3</function>
				<start_addr>50085</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="START_DELAY_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="START_DELAY_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="STABLE_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="STABLE_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="OUTAGE_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="OUTAGE_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLDOWN_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLDOWN_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_REPLY_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SWITCH_REPLY_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_PAUSE_TIMER_S1_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_PAUSE_TIMER_S2_IS_TIMING_AT_THE_MOMENT">
				<function>3</function>
				<start_addr>50086</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="START_DELAY_TIMER_S1_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="START_DELAY_TIMER_S2_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="STABLE_TIMER_S1_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="STABLE_TIMER_S2_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="OUTAGE_TIMER_S1_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="OUTAGE_TIMER_S2_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLDOWN_TIMER_S1_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLDOWN_TIMER_S2_IS_EXPIRED">
				<function>3</function>
				<start_addr>50087</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EXERCISE_TIMER_IS_ACTIVE">
				<function>3</function>
				<start_addr>50088</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_DELAY_TIMER_S1_S2_IS_ACTIVE">
				<function>3</function>
				<start_addr>50088</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TRANSFER_DELAY_TIMER_S2_S1_IS_ACTIVE">
				<function>3</function>
				<start_addr>50088</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="PHASE_ANGLE_BETWEEN_S1_AND_S2">
				<function>3</function>
				<start_addr>50090</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_CURRENT_PHASE_A">
				<function>3</function>
				<start_addr>50091</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_REAL_POWER">
				<function>3</function>
				<start_addr>50093</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_CURRENT_PHASE_B">
				<function>3</function>
				<start_addr>50094</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_REACTIVE_POWER">
				<function>3</function>
				<start_addr>50096</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_CURRENT_PHASE_C">
				<function>3</function>
				<start_addr>50097</start_addr>
				<quantity>2</quantity>
				<type>int_32</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_POSITIVE_ACTIVE_ENERGY_COUNTER">
				<function>3</function>
				<start_addr>50100</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>
			<value_ref_id valid="LOGICSMANAGER_12891_OUTPUT_FLAG_RESET_LIM_SW_FAIL_ENABLE">
				<function>3</function>
				<start_addr>50102</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SOURCE_1_POSITIVE_REACTIVE_ENERGY_COUNTER">
				<function>3</function>
				<start_addr>50103</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
		</modbus>
	</protocol>
</APC_DDF>
