<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="liebert_cm80af"
	ddfname="Liebert CM80AF"
	ddfversion="1"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="liebert_cm80af">

		<setProductData ruleid="vendordata" field="vendor">Liebert</setProductData>
		<setProductData ruleid="modeldata" field="model">CM80AF</setProductData>
		<setProductData ruleid="typedata" field="type">Generic Device</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		
        <numSensor ruleid="TEMPERATURE_SENSOR">
            <type>temp</type>
            <sensorId>temperature</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>temperature</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Temperature</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="HUMIDITY_SENSOR">
            <type>humidity</type>
            <sensorId>humidity</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>humidity</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Humidity</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="HT_SETPOINT_SENSOR">
            <type>num</type>
            <sensorId>ht_setpoint</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>htsetpoint</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>HT Setpoint</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="COOLING_SYSTEM_HRS_SENSOR">
            <type>timeinhrs</type>
            <sensorId>cooling_system_hrs</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>coolingsystemhrs</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Cooling System Hrs</label>
            <sensorSet>General</sensorSet>
        </numSensor>
        <numSensor ruleid="HUMIDITY_SYSTEM_HRS_SENSOR">
            <type>timeinhrs</type>
            <sensorId>humidity_system_hrs</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>humiditysystemhrs</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Humidity System Hrs</label>
            <sensorSet>General</sensorSet>
	    </numSensor>
        <numSensor ruleid="AIR_SYSTEM_HRS_SENSOR">
            <type>timeinhrs</type>
            <sensorId>air_system_hrs</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>airsystemhrs</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Air System Hrs</label>
            <sensorSet>General</sensorSet>
        </numSensor>



		<enumMap ruleid="online_offline_em">
			<label>On Line</label>
			<label>Off Line</label>
			<label>Unkown</label>
		</enumMap>

		<enumMap ruleid="alarm_em">
			<label>Alarm</label>
			<label>Normal</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="yes_no_em">
			<label>Yes</label>
			<label>No</label>
			<label>Unknown</label>
		</enumMap>

<!-- The following state sensors have improper ID's and ruleid's. I did this to make it easier on myself. Should have no bearing on customer -->

        <stateSensor ruleid="COMMUNICATION_STATUS_SENSOR">
            <type>state</type>
            <sensorId>communication_status</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Communication Status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="COMMON_ALARM_SENSOR">
            <type>state</type>
            <sensorId>common_alarm</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>High temperature alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="GENSET_RUNNING_SENSOR">
            <type>state</type>
            <sensorId>genset_running</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low temperature alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="LOW_BATTERY_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>low_battery_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>High humidity alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="FAIL_TO_START_SENSOR">
            <type>state</type>
            <sensorId>fail_to_start</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Low humidity alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="LOW_COOLANT_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>low_coolant_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Flow loss alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="PRE_HIGH_ENGINE_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>pre_high_engine_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Floor leak alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="HIGH_ENGINE_TEMPERATURE_SENSOR">
            <type>state</type>
            <sensorId>high_engine_temperature</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 1 low pressure alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="PRE_LOW_OIL_PRESSURE_SENSOR">
            <type>state</type>
            <sensorId>pre_low_oil_pressure</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 1 high pressure alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="LOW_OIL_PRESSURE_SENSOR">
            <type>state</type>
            <sensorId>low_oil_pressure</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 2 high pressure alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="OVERSPEED_SENSOR">
            <type>state</type>
            <sensorId>overspeed</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Cooling mode</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="LOW_COOLANT_LEVEL_SENSOR">
            <type>state</type>
            <sensorId>low_coolant_level</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Heating mode</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="DESCRIPTION_SENSOR">
            <type>state</type>
            <sensorId>description</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Humidification mode</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="HIGH_AC_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>high_ac_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Dehumidification mode</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="LOW_AC_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>low_ac_voltage</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 2 low pressure alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="UNDER_FREQUENCY_SENSOR">
            <type>state</type>
            <sensorId>under_frequency</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Cooling System Maintenance Request</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Humidity System Maintenance Request</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="OVERCURRENT_SENSOR">
            <type>state</type>
            <sensorId>overcurrent</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Air system maintenance request</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="REVERSE_KW_SENSOR">
            <type>state</type>
            <sensorId>reverse_kw</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Humidifier Low water level alarm</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="REVERSE_KVAR_SENSOR">
            <type>state</type>
            <sensorId>reverse_kvar</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Spare alarm 1</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="FAIL_TO_SYNC_SENSOR">
            <type>state</type>
            <sensorId>fail_to_sync</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Spare alarm 2</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="FAIL_TO_CLOSE_SENSOR">
            <type>state</type>
            <sensorId>fail_to_close</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Spare alarm 3</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="EMERGENCY_STOP_SENSOR">
            <type>state</type>
            <sensorId>emergency_stop</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Power lost alarm</label>
			<enum>alarm_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

<!-- Proper ID's here on out -->

        <stateSensor ruleid="BATTERY_VENTILATION_FAULT_SENSOR">
            <type>state</type>
            <sensorId>battery_ventilation_fault</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>HP1 input status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="BATTERY_CIRCUIT_BREAKER_QF1_SENSOR">
            <type>state</type>
            <sensorId>battery_circuit_breaker_qf1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="RECITFIER_NORMAL_ON_OFF_SENSOR">
            <type>state</type>
            <sensorId>rectifier_normal_on_off</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="MAINS_1_INPUT_SWITCH_Q1_SENSOR">
            <type>state</type>
            <sensorId>mains_1_input_switch_q1</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>LP1 input status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="MAINS_1_VOLTAGE_OUT_OF_TOLERANCE_SENSOR">
            <type>state</type>
            <sensorId>mains_1_voltage_out_of_tolerance</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>LP2 input status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


        <stateSensor ruleid="MAINS_1_FREQUENCY_OUT_OF_TOLERANCE_SENSOR">
            <type>state</type>
            <sensorId>mains_1_frequency_out_of_tolerance</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Enable Remote Shutdown</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="MAJOR_COUPLING_FAULT_SENSOR">
            <type>state</type>
            <sensorId>major_coupling_fault</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="MAINTENANCE_POSITION_SENSOR">
            <type>state</type>
            <sensorId>maintenance_position</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>HP2 input status</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

        <stateSensor ruleid="MAINS_2_OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>mains_2_overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister2</getOid></op>
								<op>15</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="MAINS_2_THERMAL_OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>mains_2_thermal_overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="MAINS_2_FREQUENCY_OUT_OF_TOLERANCE_SENSOR">
            <type>state</type>
            <sensorId>mains_2_frequency_out_of_tolerance</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="MAINS_2_VOLTAGE_OUT_OF_TOLERANCE_SENSOR">
            <type>state</type>
            <sensorId>mains_2_voltage_out_of_tolerance</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 1 ON</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="MAINS_2_PHASE_OUT_OF_TOLERANCE_SENSOR">
            <type>state</type>
            <sensorId>mains_2_phase_out_of_tolerance</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Compressor 2 ON</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="MAINS_2_INPUT_SWITCH_Q4S_SENSOR">
            <type>state</type>
            <sensorId>mains_2_input_switch_q4s</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Electric heating 1 ON</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>


       <stateSensor ruleid="UPS_IN_FREE_FREQUENCY_SENSOR">
            <type>state</type>
            <sensorId>ups_in_free_frequency</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Electric heating 2 ON</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="OUTPUT_SWITCH_Q5N_SENSOR">
            <type>state</type>
            <sensorId>output_switch_q5n</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Steam bypass open</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="FORCED_SHUTDOWN_ON_EXTERNAL_CONTACT_SENSOR">
            <type>state</type>
            <sensorId>forced_shutdown_on_external_contact</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Flush valve opening</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="NUMBER_OF_UPS_READY_SUFFICIENT_FOR_COUPLING_SENSOR">
            <type>state</type>
            <sensorId>number_of_ups_ready_sufficient_for_coupling</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Humidifier open</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="CHARGER_GENERAL_FAULT_SENSOR">
            <type>state</type>
            <sensorId>charger_general_fault</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Dehumidification fan mode on</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="BATTERY_CHARGED_STATE_SENSOR">
            <type>state</type>
            <sensorId>battery_charged_state</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>FAN ON</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="MAJOR_INVERTER_FAULT_SENSOR">
            <type>state</type>
            <sensorId>major_inverter_fault</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="INVERTER_OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>inverter_overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

		<stateSensor ruleid="INVERTER_THERMAL_OVERLOAD_SENSOR">
            <type>state</type>
            <sensorId>inverter_thermal_overload</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Reserved</label>
			<enum>online_offline_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>

       <stateSensor ruleid="INVERTER_LIMITATION_SENSOR">
            <type>state</type>
            <sensorId>inverter_limitation</sensorId>
              <value>
					<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister3</getOid></op>
								<op>14</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Unit 2 enabled</label>
			<enum>yes_no_em</enum>
            <sensorSet>Status</sensorSet>
        </stateSensor>



    </device>
    <protocol>
        <modbus>
            <value_ref_id valid="temperature">
                <function>3</function>
                <start_addr>0</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="humidity">
                <function>3</function>
                <start_addr>2</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="htsetpoint">
                <function>3</function>
                <start_addr>4</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="coolingsystemhrs">
                <function>3</function>
                <start_addr>6</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
             <value_ref_id valid="humiditysystemhrs">
                <function>3</function>
                <start_addr>8</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="airsystemhrs">
                <function>3</function>
                <start_addr>10</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            
			<value_ref_id valid="statusregister">
                <function>3</function>
                <start_addr>1000</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
			<value_ref_id valid="statusregister2">
                <function>3</function>
                <start_addr>1001</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
			<value_ref_id valid="statusregister3">
                <function>3</function>
                <start_addr>1002</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>

        
		</modbus>
	</protocol>
</APC_DDF>