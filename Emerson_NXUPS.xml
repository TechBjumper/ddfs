<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd" ddfid="Emerson_NXUPS" ddfname="Emerson NXUPS" ddfversion="1" canremove="yes">
  <schemaVersion>1.6</schemaVersion>
  <device deviceid="Emerson_NXUPS">
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
    <setProductData ruleid="vendordata" field="vendor">Emerson</setProductData>
    <setProductData ruleid="modeldata" field="model">NX UPS</setProductData>
    <setProductData ruleid="typedata" field="type">UPS</setProductData>
    <setDefaultLabel ruleid="labeldata">
      <sysHostname />
      - Slave
      <commSetting field="slaveaddress" />
    </setDefaultLabel>
    <numSensor ruleid="ac_input_phase_voltagea">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_PHASE_VOLTAGEA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1050</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input phase voltagea</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_input_phase_voltageb">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_PHASE_VOLTAGEB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1051</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input phase voltageb</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_input_phase_voltagec">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_PHASE_VOLTAGEC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1052</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input phase voltagec</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_phase_voltagea">
      <type>voltage</type>
      <units />
      <sensorId>_AC_OUTPUT_PHASE_VOLTAGEA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1053</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output phase voltagea</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_phase_voltageb">
      <type>voltage</type>
      <units />
      <sensorId>_AC_OUTPUT_PHASE_VOLTAGEB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1054</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output phase voltageb</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_phase_voltagec">
      <type>voltage</type>
      <units />
      <sensorId>_AC_OUTPUT_PHASE_VOLTAGEC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1055</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output phase voltagec</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_current_a">
      <type>amperage</type>
      <units />
      <sensorId>_AC_OUTPUT_CURRENT_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1056</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output current a</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_current_b">
      <type>amperage</type>
      <units />
      <sensorId>_AC_OUTPUT_CURRENT_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1057</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output current b</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_output_current_c">
      <type>amperage</type>
      <units />
      <sensorId>_AC_OUTPUT_CURRENT_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1058</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac output current c</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_voltage_1">
      <type>voltageDC</type>
      <units />
      <sensorId>_BATTERY_VOLTAGE_1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1059</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Battery voltage_1</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_frequency_(3_phases_the_same)">
      <type>frequency</type>
      <units />
      <sensorId>_OUTPUT_FREQUENCY_(3_PHASES_THE_SAME)</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1060</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Output frequency (3 phases the same)</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_input_line_voltage_ab">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_LINE_VOLTAGE_AB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1061</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input line voltage ab</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_input_line_voltage_bc">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_LINE_VOLTAGE_BC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1062</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input line voltage bc</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="ac_input_line_voltage_ca">
      <type>voltage</type>
      <units />
      <sensorId>_AC_INPUT_LINE_VOLTAGE_CA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1063</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ac input line voltage ca</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_input_current">
      <type>amperage</type>
      <units />
      <sensorId>_PHASE_A_INPUT_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1064</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase a input current</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_input_current">
      <type>amperage</type>
      <units />
      <sensorId>_PHASE_B_INPUT_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1065</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase b input current</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_input_current">
      <type>amperage</type>
      <units />
      <sensorId>_PHASE_C_INPUT_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1066</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase c input current</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_frequency_(3_phases_the_same)">
      <type>frequency</type>
      <units />
      <sensorId>_INPUT_FREQUENCY_(3_PHASES_THE_SAME)</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1067</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Input frequency (3 phases the same)</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_input_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_A_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1068</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase a input power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_input_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_B_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1069</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase b input power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_input_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_C_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1070</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase c input power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_bypass_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_PHASE_A_BYPASS_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1071</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase a bypass voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_bypass_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_PHASE_B_BYPASS_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1072</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase b bypass voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_bypass_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_PHASE_C_BYPASS_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1073</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Phase c bypass voltage</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="bypass_frequency_(3_phases_the_same)">
      <type>frequency</type>
      <units />
      <sensorId>_BYPASS_FREQUENCY_(3_PHASES_THE_SAME)</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1074</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Bypass frequency (3 phases the same)</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_current_1">
      <type>amperage</type>
      <units />
      <sensorId>_BATTERY_CURRENT_1</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1075</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Battery current_1</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1076</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase a output power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1077</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase b output power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_power_factor">
      <type>num</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1078</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Phase c output power factor</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_a_output_peak_value">
      <type>num</type>
      <units />
      <sensorId>_MODULE_PHASE_A_OUTPUT_PEAK_VALUE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1079</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase a output peak value</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_b_output_peak_value">
      <type>num</type>
      <units />
      <sensorId>_MODULE_PHASE_B_OUTPUT_PEAK_VALUE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1080</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase b output peak value</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_c_output_peak_value">
      <type>num</type>
      <units />
      <sensorId>_MODULE_PHASE_C_OUTPUT_PEAK_VALUE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1081</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase c output peak value</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_a_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_MODULE_PHASE_A_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1082</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase a output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_b_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_MODULE_PHASE_B_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1083</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase b output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_c_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_MODULE_PHASE_C_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1084</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase c output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_a_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULE_PHASE_A_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1085</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase a output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_b_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULE_PHASE_B_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1086</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase b output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_c_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULE_PHASE_C_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1087</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase c output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_a_output_load_percentage">
      <type>pctofcapacity</type>
      <units />
      <sensorId>_MODULE_PHASE_A_OUTPUT_LOAD_PERCENTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1088</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Module phase a output load percentage</label>
      <sensorSet>Percentage</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_b_output_load_percentage">
      <type>pctofcapacity</type>
      <units />
      <sensorId>_MODULE_PHASE_B_OUTPUT_LOAD_PERCENTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1089</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Module phase b output load percentage</label>
      <sensorSet>Percentage</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_c_output_load_percentage">
      <type>pctofcapacity</type>
      <units />
      <sensorId>_MODULE_PHASE_C_OUTPUT_LOAD_PERCENTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1090</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Module phase c output load percentage</label>
      <sensorSet>Percentage</sensorSet>
    </numSensor>
    <numSensor ruleid="module_phase_a_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULE_PHASE_A_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1091</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Module phase a output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="modulephase_b_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULEPHASE_B_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1092</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Modulephase b output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="modulephase_c_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_MODULEPHASE_C_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1093</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>Modulephase c output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_a_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_SYSTEM_PHASE_A_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1094</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase a output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_b_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_SYSTEM_PHASE_B_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1095</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase b output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_c_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_SYSTEM_PHASE_C_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1096</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase c output active power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_a_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_A_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1097</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase a output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_b_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_B_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1098</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase b output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_c_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_C_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1099</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase c output apparent power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_a_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_A_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1100</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase a output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_b_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_B_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1101</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase b output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="system_phase_c_output_reactive_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_SYSTEM_PHASE_C_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1102</getOid>
          </op>
          <op>0.01</op>
        </mult>
      </value>
      <label>System phase c output reactive power</label>
      <sensorSet>Power</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_autonomy">
      <type>timeinmin</type>
      <units />
      <sensorId>_BATTERY_AUTONOMY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1103</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery autonomy</label>
      <sensorSet>General</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_temperature">
      <type>temp</type>
      <units />
      <sensorId>_BATTERY_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1104</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Battery temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="ambient_temperature">
      <type>temp</type>
      <units />
      <sensorId>_AMBIENT_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1105</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Ambient temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_voltage_2">
      <type>voltageDC</type>
      <units />
      <sensorId>_BATTERY_VOLTAGE_2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1106</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Battery voltage_2</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_current_2">
      <type>amperage</type>
      <units />
      <sensorId>_BATTERY_CURRENT_2</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1107</getOid>
          </op>
          <op>0.1</op>
        </mult>
      </value>
      <label>Battery current_2</label>
      <sensorSet>Amperage</sensorSet>
    </numSensor>
    <numSensor ruleid="ups_firmware_release">
      <type>num</type>
      <units />
      <sensorId>_UPS_FIRMWARE_RELEASE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1005</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Ups firmware release</label>
      <sensorSet>System Information</sensorSet>
    </numSensor>
    <numSensor ruleid="adapter_firmware_release">
      <type>num</type>
      <units />
      <sensorId>_ADAPTER_FIRMWARE_RELEASE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1019</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Adapter firmware release</label>
      <sensorSet>System Information</sensorSet>
    </numSensor>
    <stringSensor ruleid="ups_name">
      <type>string</type>
      <units />
      <sensorId>_UPS_NAME</sensorId>
      <value>
        <op>
          <getOid>Function_3_Reg_1000</getOid>
        </op>
      </value>
      <label>Ups name</label>
      <sensorSet>System Information</sensorSet>
    </stringSensor>
    <stringSensor ruleid="manufacturer">
      <type>string</type>
      <units />
      <sensorId>_MANUFACTURER</sensorId>
      <value>
        <op>
          <getOid>Function_3_Reg_1006</getOid>
        </op>
      </value>
      <label>Manufacturer</label>
      <sensorSet>System Information</sensorSet>
    </stringSensor>
    <stateSensor ruleid="ups_alarm_flag">
      <type>alarm</type>
      <sensorId>_UPS_ALARM_FLAG</sensorId>
      <value>
        <mapValue mapid="nor_alarm_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups alarm flag</label>
      <enum>nor_alarm_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="adapter_communication_fault_flag">
      <type>alarm</type>
      <sensorId>_ADAPTER_COMMUNICATION_FAULT_FLAG</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Adapter communication fault flag</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="synchronization/unsynchronization">
      <type>alarm</type>
      <sensorId>_SYNCHRONIZATION/UNSYNCHRONIZATION</sensorId>
      <value>
        <mapValue mapid="nor_unsync_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Synchronization/unsynchronization</label>
      <enum>nor_unsync_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_input_voltage">
      <type>alarm</type>
      <sensorId>_RECTIFIER_INPUT_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="nor_abnorm_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier input voltage</label>
      <enum>nor_abnorm_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier">
      <type>alarm</type>
      <sensorId>_RECTIFIER</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter">
      <type>alarm</type>
      <sensorId>_INVERTER</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_(voltage_or_frequency)">
      <type>alarm</type>
      <sensorId>_BYPASS_(VOLTAGE_OR_FREQUENCY)</sensorId>
      <value>
        <mapValue mapid="nor_outspec_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass (voltage or frequency)</label>
      <enum>nor_outspec_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_input_frequency">
      <type>alarm</type>
      <sensorId>_RECTIFIER_INPUT_FREQUENCY</sensorId>
      <value>
        <mapValue mapid="nor_outspec_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier input frequency</label>
      <enum>nor_outspec_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="balanced_inductor_overtemperature">
      <type>alarm</type>
      <sensorId>_BALANCED_INDUCTOR_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Balanced inductor overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="input_inductor_overtemperature">
      <type>alarm</type>
      <sensorId>_INPUT_INDUCTOR_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Input inductor overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_overtemperature">
      <type>alarm</type>
      <sensorId>_RECTIFIER_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="balanced_circuit_fault">
      <type>alarm</type>
      <sensorId>_BALANCED_CIRCUIT_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Balanced circuit fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="balanced_circuit_overcurrent">
      <type>alarm</type>
      <sensorId>_BALANCED_CIRCUIT_OVERCURRENT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Balanced circuit overcurrent</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_contactor_fault">
      <type>alarm</type>
      <sensorId>_BATTERY_CONTACTOR_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery contactor fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_converter_fault">
      <type>alarm</type>
      <sensorId>_BATTERY_CONVERTER_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery converter fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_converter_overcurrent">
      <type>alarm</type>
      <sensorId>_BATTERY_CONVERTER_OVERCURRENT</sensorId>
      <value>
        <mapValue mapid="nor_overcurrent_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery converter overcurrent</label>
      <enum>nor_overcurrent_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_converter_overtemperature">
      <type>alarm</type>
      <sensorId>_BATTERY_CONVERTER_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery converter overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_input_fuse">
      <type>alarm</type>
      <sensorId>_RECTIFIER_INPUT_FUSE</sensorId>
      <value>
        <mapValue mapid="nor_blownout_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier input fuse</label>
      <enum>nor_blownout_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="auxiliary_supply_1_failure">
      <type>alarm</type>
      <sensorId>_AUXILIARY_SUPPLY_1_FAILURE</sensorId>
      <value>
        <mapValue mapid="nor_failed_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Auxiliary supply 1 failure</label>
      <enum>nor_failed_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_input_phase_rotation_fault">
      <type>alarm</type>
      <sensorId>_RECTIFIER_INPUT_PHASE_ROTATION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier input phase rotation fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_overcurrent">
      <type>alarm</type>
      <sensorId>_RECTIFIER_OVERCURRENT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier overcurrent</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="soft_start_fault">
      <type>alarm</type>
      <sensorId>_SOFT_START_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Soft start fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_overcurrent_fault">
      <type>alarm</type>
      <sensorId>_BYPASS_OVERCURRENT_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass overcurrent fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_inductor_overtemperature">
      <type>alarm</type>
      <sensorId>_INVERTER_INDUCTOR_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter inductor overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_overtemperature">
      <type>alarm</type>
      <sensorId>_INVERTER_OVERTEMPERATURE</sensorId>
      <value>
        <mapValue mapid="nor_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter overtemperature</label>
      <enum>nor_overtemp_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="fan_fault">
      <type>alarm</type>
      <sensorId>_FAN_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Fan fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_scr_fault">
      <type>alarm</type>
      <sensorId>_INVERTER_SCR_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter scr fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_scr_fault">
      <type>alarm</type>
      <sensorId>_BYPASS_SCR_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1031</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass scr fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="user_operation_error">
      <type>alarm</type>
      <sensorId>_USER_OPERATION_ERROR</sensorId>
      <value>
        <mapValue mapid="nor_error_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>User operation error</label>
      <enum>nor_error_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="output_fuse_blowout">
      <type>alarm</type>
      <sensorId>_OUTPUT_FUSE_BLOWOUT</sensorId>
      <value>
        <mapValue mapid="nor_blownout_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Output fuse blowout</label>
      <enum>nor_blownout_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="auxiliary_supply_2_failure">
      <type>alarm</type>
      <sensorId>_AUXILIARY_SUPPLY_2_FAILURE</sensorId>
      <value>
        <mapValue mapid="nor_failed_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Auxiliary supply 2 failure</label>
      <enum>nor_failed_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="module_output_overload">
      <type>alarm</type>
      <sensorId>_MODULE_OUTPUT_OVERLOAD</sensorId>
      <value>
        <mapValue mapid="nor_overload_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module output overload</label>
      <enum>nor_overload_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_system_overload">
      <type>alarm</type>
      <sensorId>_PARALLEL_SYSTEM_OVERLOAD</sensorId>
      <value>
        <mapValue mapid="nor_overload_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel system overload</label>
      <enum>nor_overload_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="module_overload_timeout">
      <type>alarm</type>
      <sensorId>_MODULE_OVERLOAD_TIMEOUT</sensorId>
      <value>
        <mapValue mapid="nor_overload_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Module overload timeout</label>
      <enum>nor_overload_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="shutdown_due_to_abnormal_bypass">
      <type>alarm</type>
      <sensorId>_SHUTDOWN_DUE_TO_ABNORMAL_BYPASS</sensorId>
      <value>
        <mapValue mapid="nor_overload_timeout_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Shutdown due to abnormal bypass</label>
      <enum>nor_overload_timeout_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ac_output_overvoltage">
      <type>alarm</type>
      <sensorId>_AC_OUTPUT_OVERVOLTAGE</sensorId>
      <value>
        <mapValue mapid="nor_abnorm_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ac output overvoltage</label>
      <enum>nor_abnorm_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_current">
      <type>alarm</type>
      <sensorId>_INVERTER_CURRENT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter current</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_phase_rotation_fault">
      <type>alarm</type>
      <sensorId>_BYPASS_PHASE_ROTATION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass phase rotation fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="transfer_to_bypass_due_to_load_impact">
      <type>alarm</type>
      <sensorId>_TRANSFER_TO_BYPASS_DUE_TO_LOAD_IMPACT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Transfer to bypass due to load impact</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_transfer_limitatation">
      <type>alarm</type>
      <sensorId>_BYPASS_TRANSFER_LIMITATATION</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass transfer limitatation</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_load_sharing_fault">
      <type>alarm</type>
      <sensorId>_PARALLEL_LOAD_SHARING_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel load sharing fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="turnoff_due_to_abnormal_bus_voltage">
      <type>alarm</type>
      <sensorId>_TURNOFF_DUE_TO_ABNORMAL_BUS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Turnoff due to abnormal bus voltage</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="other_module_requests_tansfer_to_bypass">
      <type>alarm</type>
      <sensorId>_OTHER_MODULE_REQUESTS_TANSFER_TO_BYPASS</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Other module requests tansfer to bypass</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_board_fault">
      <type>alarm</type>
      <sensorId>_PARALLEL_BOARD_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1032</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel board fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="dc_bus_overvoltage_fault">
      <type>alarm</type>
      <sensorId>_DC_BUS_OVERVOLTAGE_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Dc bus overvoltage fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_cable_connection_fault">
      <type>alarm</type>
      <sensorId>_PARALLEL_CABLE_CONNECTION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel cable connection fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="ambient_temperature_too_high">
      <type>alarm</type>
      <sensorId>_AMBIENT_TEMPERATURE_TOO_HIGH</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ambient temperature too high</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_communication_fault">
      <type>alarm</type>
      <sensorId>_RECTIFIER_COMMUNICATION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier communication fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_communication_fault">
      <type>alarm</type>
      <sensorId>_INVERTER_COMMUNICATION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter communication fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_communication_fault">
      <type>alarm</type>
      <sensorId>_PARALLEL_COMMUNICATION_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel communication fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="output_dc_component_too_big_fault">
      <type>alarm</type>
      <sensorId>_OUTPUT_DC_COMPONENT_TOO_BIG_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Output dc component too big fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_system_battery_pre-alarm_fault">
      <type>alarm</type>
      <sensorId>_PARALLEL_SYSTEM_BATTERY_PRE-ALARM_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel system battery pre-alarm fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="input_neutral_line_missing">
      <type>alarm</type>
      <sensorId>_INPUT_NEUTRAL_LINE_MISSING</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Input neutral line missing</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_contactor_fault">
      <type>alarm</type>
      <sensorId>_INVERTER_CONTACTOR_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter contactor fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_fault">
      <type>alarm</type>
      <sensorId>_RECTIFIER_FAULT</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier fault</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="epo">
      <type>alarm</type>
      <sensorId>_EPO</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Epo</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_temperature_too_high">
      <type>alarm</type>
      <sensorId>_BATTERY_TEMPERATURE_TOO_HIGH</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery temperature too high</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_earthing">
      <type>alarm</type>
      <sensorId>_BATTERY_EARTHING</sensorId>
      <value>
        <mapValue mapid="nor_fault_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1034</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery earthing</label>
      <enum>nor_fault_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_under_test">
      <type>alarm</type>
      <sensorId>_BATTERY_UNDER_TEST</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery under test</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="turn-on/off">
      <type>alarm</type>
      <sensorId>_TURN-ON/OFF</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Turn-on/off</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="generator_connection">
      <type>alarm</type>
      <sensorId>_GENERATOR_CONNECTION</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Generator connection</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="input_breaker_state">
      <type>alarm</type>
      <sensorId>_INPUT_BREAKER_STATE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Input breaker state</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="maintenance_bypass_breaker_state">
      <type>alarm</type>
      <sensorId>_MAINTENANCE_BYPASS_BREAKER_STATE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Maintenance bypass breaker state</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_breaker_state">
      <type>alarm</type>
      <sensorId>_BYPASS_BREAKER_STATE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass breaker state</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="output_breaker_state">
      <type>alarm</type>
      <sensorId>_OUTPUT_BREAKER_STATE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Output breaker state</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_total_voltage">
      <type>alarm</type>
      <sensorId>_BATTERY_TOTAL_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="batt_tot_volt_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery total voltage</label>
      <enum>batt_tot_volt_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_life">
      <type>alarm</type>
      <sensorId>_BATTERY_LIFE</sensorId>
      <value>
        <mapValue mapid="batt_life_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery life</label>
      <enum>batt_life_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bcb_status">
      <type>alarm</type>
      <sensorId>_BCB_STATUS</sensorId>
      <value>
        <mapValue mapid="bcb_status_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1034</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bcb status</label>
      <enum>bcb_status_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="operation_mode">
      <type>alarm</type>
      <sensorId>_OPERATION_MODE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Operation mode</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="boost/float_charge">
      <type>alarm</type>
      <sensorId>_BOOST/FLOAT_CHARGE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Boost/float charge</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="bypass_rotary_switch_state">
      <type>alarm</type>
      <sensorId>_BYPASS_ROTARY_SWITCH_STATE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1041</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass rotary switch state</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
    <stateSensor ruleid="parallel_system_operation_mode">
      <type>alarm</type>
      <sensorId>_PARALLEL_SYSTEM_OPERATION_MODE</sensorId>
      <value>
        <mapValue mapid="n/a_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1042</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Parallel system operation mode</label>
      <enum>n/a_em</enum>
      <sensorSet>Alarm</sensorSet>
    </stateSensor>
  </device>
  <protocol>
    <modbus>
      <value_ref_id valid="Function_3_Reg_1068">
        <function>3</function>
        <start_addr>1067</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1100">
        <function>3</function>
        <start_addr>1099</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1106">
        <function>3</function>
        <start_addr>1105</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1033">
        <function>3</function>
        <start_addr>1032</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1082">
        <function>3</function>
        <start_addr>1081</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1031">
        <function>3</function>
        <start_addr>1030</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1051">
        <function>3</function>
        <start_addr>1050</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1099">
        <function>3</function>
        <start_addr>1098</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1074">
        <function>3</function>
        <start_addr>1073</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1076">
        <function>3</function>
        <start_addr>1075</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1060">
        <function>3</function>
        <start_addr>1059</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1086">
        <function>3</function>
        <start_addr>1085</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1042">
        <function>3</function>
        <start_addr>1041</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1058">
        <function>3</function>
        <start_addr>1057</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1030">
        <function>3</function>
        <start_addr>1029</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1071">
        <function>3</function>
        <start_addr>1070</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1101">
        <function>3</function>
        <start_addr>1100</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1107">
        <function>3</function>
        <start_addr>1106</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1088">
        <function>3</function>
        <start_addr>1087</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1061">
        <function>3</function>
        <start_addr>1060</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1089">
        <function>3</function>
        <start_addr>1088</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1019">
        <function>3</function>
        <start_addr>1018</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1093">
        <function>3</function>
        <start_addr>1092</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1069">
        <function>3</function>
        <start_addr>1068</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1006">
        <function>3</function>
        <start_addr>1005</start_addr>
        <quantity>10</quantity>
        <type>ascii</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1077">
        <function>3</function>
        <start_addr>1076</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1098">
        <function>3</function>
        <start_addr>1097</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1063">
        <function>3</function>
        <start_addr>1062</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1102">
        <function>3</function>
        <start_addr>1101</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1105">
        <function>3</function>
        <start_addr>1104</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1083">
        <function>3</function>
        <start_addr>1082</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1050">
        <function>3</function>
        <start_addr>1049</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1067">
        <function>3</function>
        <start_addr>1066</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1079">
        <function>3</function>
        <start_addr>1078</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1084">
        <function>3</function>
        <start_addr>1083</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1000">
        <function>3</function>
        <start_addr>999</start_addr>
        <quantity>5</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1064">
        <function>3</function>
        <start_addr>1063</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1057">
        <function>3</function>
        <start_addr>1056</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1104">
        <function>3</function>
        <start_addr>1103</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1066">
        <function>3</function>
        <start_addr>1065</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1032">
        <function>3</function>
        <start_addr>1031</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1041">
        <function>3</function>
        <start_addr>1040</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1087">
        <function>3</function>
        <start_addr>1086</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1094">
        <function>3</function>
        <start_addr>1093</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1091">
        <function>3</function>
        <start_addr>1090</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1053">
        <function>3</function>
        <start_addr>1052</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1072">
        <function>3</function>
        <start_addr>1071</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1103">
        <function>3</function>
        <start_addr>1102</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1096">
        <function>3</function>
        <start_addr>1095</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1059">
        <function>3</function>
        <start_addr>1058</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1065">
        <function>3</function>
        <start_addr>1064</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1073">
        <function>3</function>
        <start_addr>1072</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1081">
        <function>3</function>
        <start_addr>1080</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1034">
        <function>3</function>
        <start_addr>1033</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1092">
        <function>3</function>
        <start_addr>1091</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1062">
        <function>3</function>
        <start_addr>1061</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1075">
        <function>3</function>
        <start_addr>1074</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1055">
        <function>3</function>
        <start_addr>1054</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1085">
        <function>3</function>
        <start_addr>1084</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1056">
        <function>3</function>
        <start_addr>1055</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1080">
        <function>3</function>
        <start_addr>1079</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1052">
        <function>3</function>
        <start_addr>1051</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1078">
        <function>3</function>
        <start_addr>1077</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1054">
        <function>3</function>
        <start_addr>1053</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1090">
        <function>3</function>
        <start_addr>1089</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1005">
        <function>3</function>
        <start_addr>1004</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1097">
        <function>3</function>
        <start_addr>1096</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1095">
        <function>3</function>
        <start_addr>1094</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1070">
        <function>3</function>
        <start_addr>1069</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
    </modbus>
  </protocol>
</APC_DDF>
