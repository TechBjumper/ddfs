<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="apc_smartups_upslink"
	ddfname="APC SmartUPS (UPSLink)"
	ddfversion="3"
	canremove="yes">
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="SmartUps_UpsLinkModbus">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />

		<setProductData ruleid="vendordata" field="vendor">APC</setProductData>
		<setProductData ruleid="modeldata" field="model">SmartUPS (UPSLink)</setProductData>
		<setProductData ruleid="typedata" field="type">UPS</setProductData>

		<setDefaultLabel ruleid="labeldata">
			<getOid>Function_3_Reg_35</getOid>
			<getOid>Function_3_Reg_36</getOid>
			<getOid>Function_3_Reg_37</getOid>
			<getOid>Function_3_Reg_38</getOid>
			<getOid>Function_3_Reg_39</getOid>
			<getOid>Function_3_Reg_40</getOid>
			<getOid>Function_3_Reg_41</getOid>
			<getOid>Function_3_Reg_42</getOid>
			<space/>- Slave <commSetting field="slaveaddress" />
		</setDefaultLabel>

		<alarmFlags ruleid="statusWord0">
			<value><getOid>Function_3_Reg_1</getOid></value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>UPS Turning On</activeText>
					<inactiveText>UPS Turning On Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is turning on.</activeText>
					<inactiveText>UPS Turning On condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>UPS in Bypass due to Internal Fault</activeText>
					<inactiveText>UPS in Bypass due to Internal Fault Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in Bypass due to an Internal Fault.</activeText>
					<inactiveText>UPS no longer in bypass.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>UPS Going to Bypass due to Command</activeText>
					<inactiveText>UPS Going to Bypass due to Command Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is going to Bypass due to user command.</activeText>
					<inactiveText>UPS no longer going to bypass.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>UPS In Bypass due to Command</activeText>
					<inactiveText>UPS In Bypass due to Command Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in Bypass due to a user command.</activeText>
					<inactiveText>UPS is no longer in bypass.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>UPS Returning from Bypass</activeText>
					<inactiveText>UPS Returning from Bypass Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is returning from Bypass.</activeText>
					<inactiveText>UPS is no longer returning from bypass.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>UPS In Bypass due to Manual Bypass Control</activeText>
					<inactiveText>UPS In Bypass due to Manual Bypass Control Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in Bypass as a result of manual Bypass control.</activeText>
					<inactiveText>UPS is no longer in bypass.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>UPS Ready to Power Load Upon User Command</activeText>
					<inactiveText>UPS Ready to Power Load Upon User Command Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is ready to power load upon user command.</activeText>
					<inactiveText>UPS is no longer ready to power load.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>UPS Ready to Power Load Upon User Command or Upon Return of Normal Line</activeText>
					<inactiveText>UPS Ready to Power Load Upon User Command or Upon Return of Normal Line Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is ready to power load upon user command, or upon return of normal line.</activeText>
					<inactiveText>UPS is no longer ready to power load.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>

		<alarmFlags ruleid="statusWord1">
			<value><getOid>Function_3_Reg_2</getOid></value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>UPS Output Not Powered</activeText>
					<inactiveText>UPS Output Not Powered Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS output not powered due to low battery shutdown.</activeText>
					<inactiveText>UPS Output Not Powered condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>UPS Unable to Transfer</activeText>
					<inactiveText>UPS Unable to Transfer Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS is unable to transfer to on-battery operation due to overload.</activeText>
					<inactiveText>UPS Unable to Transfer condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>UPS Fault - Main Relay Malfunction</activeText>
					<inactiveText>UPS Fault - Main Relay Malfunction Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>A main relay malfunction has been detected.</activeText>
					<inactiveText>UPS Fault - Main Relay Malfunction condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>UPS in Sleep Mode</activeText>
					<inactiveText>UPS in Sleep Mode Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in sleep mode.</activeText>
					<inactiveText>UPS in Sleep Mode condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>UPS in Shutdown Mode</activeText>
					<inactiveText>UPS in Shutdown Mode Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is shutdown mode.</activeText>
					<inactiveText>UPS in Shutdown Mode condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>UPS Fault - Battery Charger Failure</activeText>
					<inactiveText>UPS Fault - Battery Charger Failure Cleared</inactiveText>
				</name>
				<severity>failure</severity>
				<category>System</category>
				<description>
					<activeText>The UPS battery charger has failed.</activeText>
					<inactiveText>UPS Fault - Battery Charger Failure condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>UPS Fault - Internal Temperature Exceeded Limits</activeText>
					<inactiveText>UPS Fault - Internal Temperature Exceeded Limits Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>The Internal Temperature has exceeded nominal limits.</activeText>
					<inactiveText>Internal Temperature has returned to normal.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>

		<alarmFlags ruleid="statusWord2">
			<value><getOid>Function_3_Reg_3</getOid></value>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>UPS Fault - DC Imbalance in Inverter</activeText>
					<inactiveText>UPS Fault - DC Imbalance in Inverter Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>A DC Imbalance has been detected in the inverter.</activeText>
					<inactiveText>UPS Fault - DC Imbalance in Inverter condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>No Batteries Attached</activeText>
					<inactiveText>No Batteries Attached Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS output has been commanded out of bypass with no batteries attached.</activeText>
					<inactiveText>No Batteries Attached condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Boost/Trim Relay Fault</activeText>
					<inactiveText>Boost/Trim Relay Fault Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>A Boost or Trim Relay Fault has been detected.</activeText>
					<inactiveText>Boost/Trim Relay Fault condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Inverter Fault</activeText>
					<inactiveText>Inverter Fault Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>An Inverter Fault has been detected.</activeText>
					<inactiveText>Inverter Fault condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>

		<alarmFlags ruleid="statusWord3">
			<value><getOid>Function_3_Reg_4</getOid></value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Performing Battery Calibration Discharge</activeText>
					<inactiveText>Performing Battery Calibration Discharge Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is performing a Battery Calibration discharge.</activeText>
					<inactiveText>Battery Calibration discharge has completed.</inactiveText>
				</description>
			</alarmFlagsTest>
			<!--
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>Smart Trim</activeText>
					<inactiveText>Smart Trim Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>Smart Trim is active.</activeText>
					<inactiveText>Smart Trim condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>Smart Boost</activeText>
					<inactiveText>Smart Boost Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>Smart Boost is active.</activeText>
					<inactiveText>Smart Boost condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>On Line</activeText>
					<inactiveText>On Line Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS is on Line.</activeText>
					<inactiveText>On Line condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>On Battery</activeText>
					<inactiveText>On Battery Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS is on Battery.</activeText>
					<inactiveText>On Battery condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			-->
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Overload</activeText>
					<inactiveText>Overload Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>An Overload has been detected.</activeText>
					<inactiveText>Overload condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Low Battery</activeText>
					<inactiveText>Low Battery Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS battery is low.</activeText>
					<inactiveText>Low Battery condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Replace Battery</activeText>
					<inactiveText>Replace Battery Cleared</inactiveText>
				</name>
				<severity>critical</severity>
				<category>System</category>
				<description>
					<activeText>UPS battery needs to be replaced.</activeText>
					<inactiveText>Replace Battery condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<stateSensor ruleid="on_battery">
			<type>state</type>
			<sensorId>_ON_BATTERY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>On battery</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="on_line">
			<type>state</type>
			<sensorId>_ON_LINE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>On line</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="smart_boost">
			<type>state</type>
			<sensorId>_SMART_BOOST</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Smart boost</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="smart_trim">
			<type>state</type>
			<sensorId>_SMART_TRIM</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Smart trim</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>

		<stateSensor ruleid="line_quality">
			<type>state</type>
			<sensorId>_LINE_QUALITY</sensorId>
			<value>
				<mapValue mapid="linequality_vm">
					<getOid>Function_3_Reg_5</getOid>
				</mapValue>
			</value>
			<label>Line Quality</label>
			<enum>linequality_em</enum>
			<sensorSet>Input</sensorSet>
		</stateSensor>

		<numSensor ruleid="battery_capacity">
			<type>pctofcapacity</type>
			<sensorId>_BATTERY_CAPACITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_6</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery Capacity</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="run-time_remaining">
			<type>timeinmin</type>
			<sensorId>_RUN-TIME_REMAINING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_7</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Run-time Remaining</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_voltage">
			<type>voltage</type>
			<sensorId>_BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_8</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery Voltage</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="ups_internal_temperature">
			<type>temp</type>
			<sensorId>_UPS_INTERNAL_TEMPERATURE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_9</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>UPS Internal Temperature</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="amps_drawn_by_load">
			<type>amperage</type>
			<sensorId>_AMPS_DRAWN_BY_LOAD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_10</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Amps Drawn by Load</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="quantity_of_battery_packs_with_bad_batteries">
			<type>num</type>
			<sensorId>_QUANTITY_OF_BATTERY_PACKS_WITH_BAD_BATTERIES</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_11</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Battery Packs with Bad Batteries</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="quantity_of_battery_packs">
			<type>num</type>
			<sensorId>_QUANTITY_OF_BATTERY_PACKS</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_12</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>1</valueInc>
			<label>Total Battery Packs</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="pct_power_drawn_by_load">
			<type>pctofcapacity</type>
			<sensorId>_PCT_POWER_DRAWN_BY_LOAD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_13</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent Power Drawn by Load</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="nominal_output_voltage_1">
			<type>voltage</type>
			<sensorId>_NOMINAL_OUTPUT_VOLTAGE_1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_14</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Nominal Output Voltage</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="actual_output_voltage">
			<type>voltage</type>
			<sensorId>_ACTUAL_OUTPUT_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_15</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Actual Output Voltage</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="max_input_voltage_since_last_reading">
			<type>voltage</type>
			<sensorId>_MAX_INPUT_VOLTAGE_SINCE_LAST_READING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_16</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Max Input Voltage since last reading</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="min_input_voltage_since_last_reading">
			<type>voltage</type>
			<sensorId>_MIN_INPUT_VOLTAGE_SINCE_LAST_READING</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_17</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Min Input Voltage since last reading</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="input_voltage">
			<type>voltage</type>
			<sensorId>_INPUT_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_18</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Input Voltage</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="input_frequency">
			<type>frequency</type>
			<sensorId>_INPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_19</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Input Frequency</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="measure-ups_temperature_reading_(probe_1)">
			<type>temp</type>
			<sensorId>_MEASURE-UPS_TEMPERATURE_READING_(PROBE_1)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_20</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Measure-UPS Temperature 1</label>
			<sensorSet>Measure-UPS</sensorSet>
		</numSensor>
		<numSensor ruleid="measure-ups_humidity_reading_(probe_1)">
			<type>pctofcapacity</type>
			<sensorId>_MEASURE-UPS_HUMIDITY_READING_(PROBE_1)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_21</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Measure-UPS Humidity 1</label>
			<sensorSet>Measure-UPS</sensorSet>
		</numSensor>
		<numSensor ruleid="measure-ups_temperature_reading_(probe_2)">
			<type>temp</type>
			<sensorId>_MEASURE-UPS_TEMPERATURE_READING_(PROBE_2)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_22</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Measure-UPS Temperature 2</label>
			<sensorSet>Measure-UPS</sensorSet>
		</numSensor>
		<numSensor ruleid="measure-ups_humidity_reading_(probe_2)">
			<type>pctofcapacity</type>
			<sensorId>_MEASURE-UPS_HUMIDITY_READING_(PROBE_2)</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_23</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Measure-UPS Humidity 2</label>
			<sensorSet>Measure-UPS</sensorSet>
		</numSensor>
		<numSensor ruleid="measure-ups_contact_position">
			<type>num</type>
			<sensorId>_MEASURE-UPS_CONTACT_POSITION</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_24</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Measure-UPS Contact Position</label>
			<sensorSet>Measure-UPS</sensorSet>
		</numSensor>
		<numSensor ruleid="minimum_return_battery_capacity">
			<type>pctofcapacity</type>
			<sensorId>_MINIMUM_RETURN_BATTERY_CAPACITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_27</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Minimum Return Battery Capacity</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="lower_t_ransfer_point">
			<type>voltage</type>
			<sensorId>_LOWER_T_RANSFER_POINT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_28</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Lower transfer point</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="upper_t_ransfer_point">
			<type>voltage</type>
			<sensorId>_UPPER_T_RANSFER_POINT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_29</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Upper transfer point</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<!--
		<numSensor ruleid="nominal_output_voltage_2">
			<type>voltage</type>
			<sensorId>_NOMINAL_OUTPUT_VOLTAGE_2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_30</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Nominal output voltage 2</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		-->
		<numSensor ruleid="shutdown_delay">
			<type>timeinsec</type>
			<sensorId>_SHUTDOWN_DELAY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_31</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Shutdown delay</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="low_battery_duration">
			<type>timeinmin</type>
			<sensorId>_LOW_BATTERY_DURATION</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_32</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Low battery duration</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="turn_on_delay">
			<type>timeinsec</type>
			<sensorId>_TURN_ON_DELAY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_33</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Turn on delay</label>
			<sensorSet>General</sensorSet>
		</numSensor>
		<numSensor ruleid="sensitivity">
			<type>num</type>
			<sensorId>_SENSITIVITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_34</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Sensitivity</label>
			<sensorSet>General</sensorSet>
		</numSensor>

		<alarmFlags ruleid="statusWord4">
			<value><getOid>Function_3_Reg_43</getOid></value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Internal Communication Failure</activeText>
					<inactiveText>Internal Communication Failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Internal Communication Failure has been detected.</activeText>
					<inactiveText>Internal Communication Failure condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>No Good Modules Present</activeText>
					<inactiveText>No Good Modules Present Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>No good modules are present.</activeText>
					<inactiveText>No Good Modules Present condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>Load Shutdown From Bypass</activeText>
					<inactiveText>Load Shutdown From Bypass Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Load Shutdown From Bypass has been detected.</activeText>
					<inactiveText>Load Shutdown From Bypass condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>Runtime Below Alarm Threshold</activeText>
					<inactiveText>Runtime Below Alarm Threshold Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Runtime is below alarm threshold.</activeText>
					<inactiveText>Runtime Below Alarm Threshold condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>XR Frame Fault</activeText>
					<inactiveText>XR Frame Fault Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An XR Frame Fault condition has been detected.</activeText>
					<inactiveText>XR Frame Fault condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Output Voltage Out of Range</activeText>
					<inactiveText>Output Voltage Out of Range Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Output voltage is out of range.</activeText>
					<inactiveText>Output Voltage Out of Range condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>System Not Synchronized</activeText>
					<inactiveText>System Not Synchronized Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>System is not synchronized.</activeText>
					<inactiveText>System Not Synchronized condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>No Batteries</activeText>
					<inactiveText>No Batteries Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>No batteries detected.</activeText>
					<inactiveText>No Batteries condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>Battery Voltage High</activeText>
					<inactiveText>Battery Voltage High Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Battery voltage is abnormally high.</activeText>
					<inactiveText>Battery Voltage High condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>Site Wiring Fault</activeText>
					<inactiveText>Site Wiring Fault Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A fault has been detected in the site wiring.</activeText>
					<inactiveText>Site Wiring Fault condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>UPS in Bypass - Overload</activeText>
					<inactiveText>UPS in Bypass - Overload Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>The backfeed relay is open.</activeText>
					<inactiveText>UPS in Bypass - Overload condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>

		<alarmFlags ruleid="statusWord5">
			<value><getOid>Function_3_Reg_44</getOid></value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Power Module Failure</activeText>
					<inactiveText>Power Module Failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Power Module Failure has been detected.</activeText>
					<inactiveText>Power Module Failure condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>IM Installed and Failed</activeText>
					<inactiveText>IM Installed and Failed Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An IM Installed and Failed has been detected.</activeText>
					<inactiveText>IM Installed and Failed condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>RIM Installed and Failed</activeText>
					<inactiveText>RIM Installed and Failed Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A RIM Installed and Failed has been detected.</activeText>
					<inactiveText>RIM Installed and Failed condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8" match="8">
				<name>
					<activeText>Battery Failure</activeText>
					<inactiveText>Battery Failure Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An installed battery has failed.</activeText>
					<inactiveText>Battery Failure condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="10" match="10">
				<name>
					<activeText>Load Above Alarm Threshold</activeText>
					<inactiveText>Load Above Alarm Threshold Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>A Load Above Alarm Threshold condition has been detected.</activeText>
					<inactiveText>Load Above Alarm Threshold condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Loss of Redundancy</activeText>
					<inactiveText>Loss of Redundancy Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Redundancy has been lost.</activeText>
					<inactiveText>Loss of Redundancy condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Redundancy Below Threshold</activeText>
					<inactiveText>Redundancy Below Threshold Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Redundancy is below threshold.</activeText>
					<inactiveText>Redundancy Below Threshold condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>Bypass Not in Range</activeText>
					<inactiveText>Bypass Not in Range Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Either the bypass frequency or bypass voltage is unacceptable.</activeText>
					<inactiveText>Bypass Not in Range condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>Bypass Contactor Stuck</activeText>
					<inactiveText>Bypass Contactor Stuck Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>The bypass contactor is stuck in the Bypass position.</activeText>
					<inactiveText>Bypass Contactor Stuck condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>Bypass Contactor Stuck</activeText>
					<inactiveText>Bypass Contactor Stuck Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>The bypass contactor is stuck in the Online position.</activeText>
					<inactiveText>Bypass Contactor Stuck condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="400" match="400">
				<name>
					<activeText>UPS In Bypass - Internal Fault</activeText>
					<inactiveText>UPS In Bypass - Internal Fault Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in bypass due to an internal fault.</activeText>
					<inactiveText>UPS In Bypass - Internal Fault condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>UPS In Bypass - Overload</activeText>
					<inactiveText>UPS In Bypass - Overload Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in bypass due to an overload.</activeText>
					<inactiveText>UPS In Bypass - Overload condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="1000" match="1000">
				<name>
					<activeText>Maintenance Bypass</activeText>
					<inactiveText>Maintenance Bypass Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>UPS is in maintenance bypass.</activeText>
					<inactiveText>Maintenance Bypass condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2000" match="2000">
				<name>
					<activeText>Input CB Tripped Open</activeText>
					<inactiveText>Input CB Tripped Open Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>Input circuit breaker has been tripped open.</activeText>
					<inactiveText>Input CB Tripped Open condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4000" match="4000">
				<name>
					<activeText>Fan Failure</activeText>
					<inactiveText>Fan Failure Cleared</inactiveText>
				</name>
				<severity>failure</severity>
				<category>System</category>
				<description>
					<activeText>A system-level fan has failed.</activeText>
					<inactiveText>Fan Failure condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>RIM In Control</activeText>
					<inactiveText>RIM In Control Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>RIM is in control.</activeText>
					<inactiveText>RIM In Control condition cleared.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<numSensor ruleid="nominal_battery_voltage">
			<type>voltage</type>
			<sensorId>_NOMINAL_BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_45</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Nominal Battery Voltage</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="actual_battery_voltage">
			<type>voltage</type>
			<sensorId>_ACTUAL_BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_46</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Actual Battery Voltage</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_voltage_phase_a">
			<type>voltage</type>
			<sensorId>_UTILITY_INPUT_VOLTAGE_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_47</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility Input Voltage Phase A</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_current_phase_a">
			<type>amperage</type>
			<sensorId>_UTILITY_INPUT_CURRENT_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_48</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility Input Current Phase A</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_voltage_phase_a">
			<type>voltage</type>
			<sensorId>_BYPASS_INPUT_VOLTAGE_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_49</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass Input Voltage Phase A</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_a_n+0">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_A_N+0</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_50</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's Phase A @ n+0</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_a_n+x">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_A_N+X</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_51</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's Phase A @ n+x</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="phase_a_output">
			<type>num/powerKVA</type>
			<sensorId>_PHASE_A_OUTPUT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_52</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Phase A output</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_voltage_phase_a">
			<type>voltage</type>
			<sensorId>_OUTPUT_VOLTAGE_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_53</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output voltage Phase A</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_current_phase_a">
			<type>voltage</type>
			<sensorId>_OUTPUT_CURRENT_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_54</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output current Phase A</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="peak_output_current_phase_a">
			<type>amperage</type>
			<sensorId>_PEAK_OUTPUT_CURRENT_PHASE_A</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_55</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Peak output current Phase A</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_voltage_phase_b">
			<type>voltage</type>
			<sensorId>_UTILITY_INPUT_VOLTAGE_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_56</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility input voltage phase b</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_current_phase_b">
			<type>amperage</type>
			<sensorId>_UTILITY_INPUT_CURRENT_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_57</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility input current phase b</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_voltage_phase_b">
			<type>voltage</type>
			<sensorId>_BYPASS_INPUT_VOLTAGE_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_58</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input voltage phase b</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_b_n+0">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_B_N+0</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_59</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's phase b @ n+0</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_b_n+x">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_B_N+X</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_60</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's phase b @ n+x</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="phase_b_output">
			<type>num/powerKVA</type>
			<sensorId>_PHASE_B_OUTPUT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_61</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Phase B output</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_voltage_phase_b">
			<type>voltage</type>
			<sensorId>_OUTPUT_VOLTAGE_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_62</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output voltage phase b</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_current_phase_b">
			<type>amperage</type>
			<sensorId>_OUTPUT_CURRENT_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_63</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output current phase b</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="peak_output_current_phase_b">
			<type>amperage</type>
			<sensorId>_PEAK_OUTPUT_CURRENT_PHASE_B</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_64</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Peak output current phase b</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_voltage_phase_c">
			<type>voltage</type>
			<sensorId>_UTILITY_INPUT_VOLTAGE_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_65</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility input voltage Phase C</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="utility_input_current_phase_c">
			<type>amperage</type>
			<sensorId>_UTILITY_INPUT_CURRENT_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_66</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Utility input current Phase C</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_voltage_phase_c">
			<type>voltage</type>
			<sensorId>_BYPASS_INPUT_VOLTAGE_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_67</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input voltage Phase C</label>
			<sensorSet>Input</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_c_n+0">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_C_N+0</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_68</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's Phase C @ n+0</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="percent_of_maximum_output_va's_phase_c_n+x">
			<type>pctofcapacity</type>
			<sensorId>_PERCENT_OF_MAXIMUM_OUTPUT_VA'S_PHASE_C_N+X</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_69</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Percent of maximum output va's Phase C @ n+x</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="phase_c_output">
			<type>num/powerKVA</type>
			<sensorId>_PHASE_C_OUTPUT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_70</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Phase C output</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_voltage_phase_c">
			<type>voltage</type>
			<sensorId>_OUTPUT_VOLTAGE_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_71</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output voltage Phase C</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="output_current_phase_c">
			<type>amperage</type>
			<sensorId>_OUTPUT_CURRENT_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_72</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output current Phase C</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="peak_output_current_phase_c">
			<type>amperage</type>
			<sensorId>_PEAK_OUTPUT_CURRENT_PHASE_C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_73</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Peak output current Phase C</label>
			<sensorSet>Output</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_current">
			<type>amperage</type>
			<sensorId>_BATTERY_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_78</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<valueInc>0.00001</valueInc>
			<label>Battery current</label>
			<sensorSet>Battery</sensorSet>
		</numSensor>
		

		<!--
		<stateSensor ruleid="ups_ready_to_power_load_upon_return_of_normal_line_or_upon_user_command">
			<type>state</type>
			<sensorId>_UPS_READY_TO_POWER_LOAD_UPON_RETURN_OF_NORMAL_LINE_OR_UPON_USER_COMMAND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups ready to power load upon return of normal line or upon user command</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_ready_to_power_load_upon_user_command">
			<type>state</type>
			<sensorId>_UPS_READY_TO_POWER_LOAD_UPON_USER_COMMAND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups ready to power load upon user command</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_bypass_mode_as_a_result_o_manual_bypass_control">
			<type>state</type>
			<sensorId>_UPS_IN_BYPASS_MODE_AS_A_RESULT_O_MANUAL_BYPASS_CONTROL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in bypass mode as a result o manual bypass control</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_returning_from_bypass">
			<type>state</type>
			<sensorId>_UPS_RETURNING_FROM_BYPASS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups returning from bypass</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_bypass_due_to_command">
			<type>state</type>
			<sensorId>_UPS_IN_BYPASS_DUE_TO_COMMAND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in bypass due to command</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_going_to_bypass_due_to_command">
			<type>state</type>
			<sensorId>_UPS_GOING_TO_BYPASS_DUE_TO_COMMAND</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups going to bypass due to command</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_bypass_due_to_an_internal_fault_(indicated_through_register_0002_or_0003)_">
			<type>state</type>
			<sensorId>_UPS_IN_BYPASS_DUE_TO_AN_INTERNAL_FAULT_(INDICATED_THROUGH_REGISTER_0002_OR_0003)_</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in bypass due to an internal fault (indicated through register 0002 or 0003) </label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_turning_on">
			<type>state</type>
			<sensorId>_UPS_TURNING_ON</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_1</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups turning on</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 0</sensorSet>
		</stateSensor>
		-->
		<!--
		<stateSensor ruleid="ups_fault_-_internal_temperature_has_exceeded_nominal_limits">
			<type>state</type>
			<sensorId>_UPS_FAULT_-_INTERNAL_TEMPERATURE_HAS_EXCEEDED_NOMINAL_LIMITS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups fault - internal temperature has exceeded nominal limits</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_relay_malfunction">
			<type>state</type>
			<sensorId>_BYPASS_RELAY_MALFUNCTION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass relay malfunction</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_charger_failure">
			<type>state</type>
			<sensorId>_BATTERY_CHARGER_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery charger failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_shutdown_mode">
			<type>state</type>
			<sensorId>_UPS_IN_SHUTDOWN_MODE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in shutdown mode</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_sleep_mode">
			<type>state</type>
			<sensorId>_UPS_IN_SLEEP_MODE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in sleep mode</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="main_relay_malfunction">
			<type>state</type>
			<sensorId>_MAIN_RELAY_MALFUNCTION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Main relay malfunction</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_unable_to_transfer_to_on-battery_operation_due_to_overload">
			<type>state</type>
			<sensorId>_UPS_UNABLE_TO_TRANSFER_TO_ON-BATTERY_OPERATION_DUE_TO_OVERLOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups unable to transfer to on-battery operation due to overload</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_output_not_powered_due_to_low_battery_shut_down">
			<type>state</type>
			<sensorId>_UPS_OUTPUT_NOT_POWERED_DUE_TO_LOW_BATTERY_SHUT_DOWN</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_2</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups output not powered due to low battery shut down</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 1</sensorSet>
		</stateSensor>
		-->
		<!--
		<stateSensor ruleid="inverter_fault">
			<type>state</type>
			<sensorId>_INVERTER_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="boost_or_trim_relay_fault">
			<type>state</type>
			<sensorId>_BOOST_OR_TRIM_RELAY_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Boost or trim relay fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_commanded_out_of_bypass_with_no_batteries_attached_-_ups_in_bypass">
			<type>state</type>
			<sensorId>_UPS_COMMANDED_OUT_OF_BYPASS_WITH_NO_BATTERIES_ATTACHED_-_UPS_IN_BYPASS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups commanded out of bypass with no batteries attached - UPS in bypass</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_fault_-_ups_in_bypass">
			<type>state</type>
			<sensorId>_UPS_FAULT_-_UPS_IN_BYPASS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups fault - UPS in bypass</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="output_voltage_select_failure_-_ups_in_bypass">
			<type>state</type>
			<sensorId>_OUTPUT_VOLTAGE_SELECT_FAILURE_-_UPS_IN_BYPASS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Output voltage select failure - UPS in bypass</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_supply_failure">
			<type>state</type>
			<sensorId>_BYPASS_SUPPLY_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass supply failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="isolation_unit_fan_failure">
			<type>state</type>
			<sensorId>_ISOLATION_UNIT_FAN_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Isolation unit fan failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="electronics_unit_fan_failure">
			<type>state</type>
			<sensorId>_ELECTRONICS_UNIT_FAN_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_3</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Electronics unit fan failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 2</sensorSet>
		</stateSensor>
		<stateSensor ruleid="replace_battery">
			<type>state</type>
			<sensorId>_REPLACE_BATTERY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Replace battery</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 3</sensorSet>
		</stateSensor>
		<stateSensor ruleid="low_battery">
			<type>state</type>
			<sensorId>_LOW_BATTERY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Low battery</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 3</sensorSet>
		</stateSensor>
		<stateSensor ruleid="overload">
			<type>state</type>
			<sensorId>_OVERLOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Overload</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 3</sensorSet>
		</stateSensor>
		-->
		<!--
		<stateSensor ruleid="performing_battery_calibration_discharge">
			<type>state</type>
			<sensorId>_PERFORMING_BATTERY_CALIBRATION_DISCHARGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_4</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Performing battery calibration discharge</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 3</sensorSet>
		</stateSensor>
		-->

		<!--
		<stateSensor ruleid="backfeed_relay_open_(fault)">
			<type>state</type>
			<sensorId>_BACKFEED_RELAY_OPEN_(FAULT)</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Backfeed relay open (fault)</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="site_wiring_fault">
			<type>state</type>
			<sensorId>_SITE_WIRING_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Site wiring fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="fault_found_in_register_0033,_0034,_0035,_or_0036">
			<type>state</type>
			<sensorId>_FAULT_FOUND_IN_REGISTER_0033,_0034,_0035,_OR_0036</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Fault found in register 0033, 0034, 0035, or 0036</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_voltage_high">
			<type>state</type>
			<sensorId>_BATTERY_VOLTAGE_HIGH</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery voltage high</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="no_batteries">
			<type>state</type>
			<sensorId>_NO_BATTERIES</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>No batteries</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_not_synchronized">
			<type>state</type>
			<sensorId>_SYSTEM_NOT_SYNCHRONIZED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System not synchronized</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="output_voltage_out_of_range">
			<type>state</type>
			<sensorId>_OUTPUT_VOLTAGE_OUT_OF_RANGE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Output voltage out of range</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="xr_frame_fault">
			<type>state</type>
			<sensorId>_XR_FRAME_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Xr frame fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="run_time_below_alarm_threshold">
			<type>state</type>
			<sensorId>_RUN_TIME_BELOW_ALARM_THRESHOLD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Run time below alarm threshold</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_shutdown_from_bypass_-_input_frequency/voltage_outside_limits">
			<type>state</type>
			<sensorId>_LOAD_SHUTDOWN_FROM_BYPASS_-_INPUT_FREQUENCY/VOLTAGE_OUTSIDE_LIMITS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load shutdown from bypass - input frequency/voltage outside limits</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="no_good_modules_present">
			<type>state</type>
			<sensorId>_NO_GOOD_MODULES_PRESENT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>No good modules present</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		<stateSensor ruleid="internal_communication_failure">
			<type>state</type>
			<sensorId>_INTERNAL_COMMUNICATION_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_43</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Internal communication failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 4</sensorSet>
		</stateSensor>
		-->
		<!--
		<stateSensor ruleid="rim_is_in_control">
			<type>state</type>
			<sensorId>_RIM_IS_IN_CONTROL</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Rim is in control</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_level_fan_failed">
			<type>state</type>
			<sensorId>_SYSTEM_LEVEL_FAN_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System level fan failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input_cb_tripped_open">
			<type>state</type>
			<sensorId>_INPUT_CB_TRIPPED_OPEN</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input cb tripped open</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_is_in_maintenance_bypass">
			<type>state</type>
			<sensorId>_SYSTEM_IS_IN_MAINTENANCE_BYPASS</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System is in maintenance bypass</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_bypass_due_to_overload">
			<type>state</type>
			<sensorId>_UPS_IN_BYPASS_DUE_TO_OVERLOAD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in bypass due to overload</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_bypass_due_to_internal_fault">
			<type>state</type>
			<sensorId>_UPS_IN_BYPASS_DUE_TO_INTERNAL_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in bypass due to internal fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_contactor_stuck_in_online_position">
			<type>state</type>
			<sensorId>_BYPASS_CONTACTOR_STUCK_IN_ONLINE_POSITION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass contactor stuck in online position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_contactor_stuck_in_bypass_position">
			<type>state</type>
			<sensorId>_BYPASS_CONTACTOR_STUCK_IN_BYPASS_POSITION</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass contactor stuck in bypass position</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_not_in_range_(either_freq_or_voltage_unacceptable)">
			<type>state</type>
			<sensorId>_BYPASS_NOT_IN_RANGE_(EITHER_FREQ_OR_VOLTAGE_UNACCEPTABLE)</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass not in range (either freq or voltage unacceptable)</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="redundancy_below_threshold">
			<type>state</type>
			<sensorId>_REDUNDANCY_BELOW_THRESHOLD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Redundancy below threshold</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="loss_of_redundancy">
			<type>state</type>
			<sensorId>_LOSS_OF_REDUNDANCY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Loss of redundancy</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_is_above_alarm_threshold">
			<type>state</type>
			<sensorId>_LOAD_IS_ABOVE_ALARM_THRESHOLD</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load is above alarm threshold</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="an_installed_battery_has_failed">
			<type>state</type>
			<sensorId>_AN_INSTALLED_BATTERY_HAS_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>An installed battery has failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="rim_is_installed_and_failed">
			<type>state</type>
			<sensorId>_RIM_IS_INSTALLED_AND_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Rim is installed and failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="im_is_installed_and_failed">
			<type>state</type>
			<sensorId>_IM_IS_INSTALLED_AND_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Im is installed and failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		<stateSensor ruleid="an_installed_power_module_has_failed">
			<type>state</type>
			<sensorId>_AN_INSTALLED_POWER_MODULE_HAS_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_44</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>An installed power module has failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status Word 5</sensorSet>
		</stateSensor>
		-->

		<!--
		<stateSensor ruleid="battery_fault_(capacity_is_lower_than_50%)">
			<type>state</type>
			<sensorId>_BATTERY_FAULT_(CAPACITY_IS_LOWER_THAN_50%)</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_76</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery fault (capacity is lower than 50%)</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_fault_(capacity_is_lower_than_75%)">
			<type>state</type>
			<sensorId>_BATTERY_FAULT_(CAPACITY_IS_LOWER_THAN_75%)</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_76</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery fault (capacity is lower than 75%)</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_charger_shutdown_externally">
			<type>state</type>
			<sensorId>_BATTERY_CHARGER_SHUTDOWN_EXTERNALLY</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_76</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery charger shutdown externally</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_startup_configuration_failed">
			<type>state</type>
			<sensorId>_SYSTEM_STARTUP_CONFIGURATION_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_76</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System startup configuration failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="static_bypass_switch_module_removed">
			<type>state</type>
			<sensorId>_STATIC_BYPASS_SWITCH_MODULE_REMOVED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Static bypass switch module removed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_in_forced_bypass_state">
			<type>state</type>
			<sensorId>_UPS_IN_FORCED_BYPASS_STATE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups in forced bypass state</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_id_card_failed">
			<type>state</type>
			<sensorId>_SYSTEM_ID_CARD_FAILED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System id card failed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_id_card_removed">
			<type>state</type>
			<sensorId>_SYSTEM_ID_CARD_REMOVED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System id card removed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="static_bypass_switch_module_fault">
			<type>state</type>
			<sensorId>_STATIC_BYPASS_SWITCH_MODULE_FAULT</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Static bypass switch module fault</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="internal_dc_disconnect_switch_tripped">
			<type>state</type>
			<sensorId>_INTERNAL_DC_DISCONNECT_SWITCH_TRIPPED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Internal dc disconnect switch tripped</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_gear_communication_card_removed">
			<type>state</type>
			<sensorId>_SWITCH_GEAR_COMMUNICATION_CARD_REMOVED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch gear communication card removed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="switch_gear_communication_card_failure">
			<type>state</type>
			<sensorId>_SWITCH_GEAR_COMMUNICATION_CARD_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Switch gear communication card failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="xr_communication_card_removed">
			<type>state</type>
			<sensorId>_XR_COMMUNICATION_CARD_REMOVED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Xr communication card removed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="xr_communication_card_failure">
			<type>state</type>
			<sensorId>_XR_COMMUNICATION_CARD_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Xr communication card failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_monitor_card_removed">
			<type>state</type>
			<sensorId>_BATTERY_MONITOR_CARD_REMOVED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery monitor card removed</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_monitor_card_failure">
			<type>state</type>
			<sensorId>_BATTERY_MONITOR_CARD_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery monitor card failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="system_power_supply_card_failure">
			<type>state</type>
			<sensorId>_SYSTEM_POWER_SUPPLY_CARD_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>System power supply card failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="external_dc_disconnect_switch_tripped">
			<type>state</type>
			<sensorId>_EXTERNAL_DC_DISCONNECT_SWITCH_TRIPPED</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>External dc disconnect switch tripped</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="isolation_transformer_over_temperature">
			<type>state</type>
			<sensorId>_ISOLATION_TRANSFORMER_OVER_TEMPERATURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Isolation transformer over temperature</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		<stateSensor ruleid="maintenance_bypass_failure">
			<type>state</type>
			<sensorId>_MAINTENANCE_BYPASS_FAILURE</sensorId>
			<value>
				<mapValue mapid="truefalse_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Maintenance bypass failure</label>
			<enum>truefalse_em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
		-->

		<valueMap ruleid="truefalse_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn></valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="truefalse_em">
			<label>False</label>
			<label>True</label>
		</enumMap>

		<valueMap ruleid="linequality_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>255</valueIn>
			<valueOut>1</valueOut>
			<valueIn></valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="linequality_em">
			<label>Unacceptable</label>
			<label>Acceptable</label>
		</enumMap>
	</device>
	<protocol>
		<modbus>
			<value_ref_id valid="Function_3_Reg_22">
				<function>3</function>
				<start_addr>21</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_71">
				<function>3</function>
				<start_addr>70</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_9">
				<function>3</function>
				<start_addr>8</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_37">
				<function>3</function>
				<start_addr>36</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_43">
				<function>3</function>
				<start_addr>42</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_6">
				<function>3</function>
				<start_addr>5</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_15">
				<function>3</function>
				<start_addr>14</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_58">
				<function>3</function>
				<start_addr>57</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_64">
				<function>3</function>
				<start_addr>63</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_21">
				<function>3</function>
				<start_addr>20</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_20">
				<function>3</function>
				<start_addr>19</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_66">
				<function>3</function>
				<start_addr>65</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_72">
				<function>3</function>
				<start_addr>71</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_23">
				<function>3</function>
				<start_addr>22</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_38">
				<function>3</function>
				<start_addr>37</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2">
				<function>3</function>
				<start_addr>1</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_44">
				<function>3</function>
				<start_addr>43</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_16">
				<function>3</function>
				<start_addr>15</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_59">
				<function>3</function>
				<start_addr>58</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_65">
				<function>3</function>
				<start_addr>64</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_10">
				<function>3</function>
				<start_addr>9</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_41">
				<function>3</function>
				<start_addr>40</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_70">
				<function>3</function>
				<start_addr>69</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_73">
				<function>3</function>
				<start_addr>72</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_24">
				<function>3</function>
				<start_addr>23</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_39">
				<function>3</function>
				<start_addr>38</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_56">
				<function>3</function>
				<start_addr>55</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_60">
				<function>3</function>
				<start_addr>59</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_3">
				<function>3</function>
				<start_addr>2</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_51">
				<function>3</function>
				<start_addr>50</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_17">
				<function>3</function>
				<start_addr>16</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_34">
				<function>3</function>
				<start_addr>33</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_53">
				<function>3</function>
				<start_addr>52</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_19">
				<function>3</function>
				<start_addr>18</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_36">
				<function>3</function>
				<start_addr>35</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_68">
				<function>3</function>
				<start_addr>67</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_50">
				<function>3</function>
				<start_addr>49</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_14">
				<function>3</function>
				<start_addr>13</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_31">
				<function>3</function>
				<start_addr>30</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_63">
				<function>3</function>
				<start_addr>62</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_29">
				<function>3</function>
				<start_addr>28</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_40">
				<function>3</function>
				<start_addr>39</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_46">
				<function>3</function>
				<start_addr>45</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_78">
				<function>3</function>
				<start_addr>77</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_48">
				<function>3</function>
				<start_addr>47</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_54">
				<function>3</function>
				<start_addr>53</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_11">
				<function>3</function>
				<start_addr>10</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_69">
				<function>3</function>
				<start_addr>68</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_30">
				<function>3</function>
				<start_addr>29</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_32">
				<function>3</function>
				<start_addr>31</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_4">
				<function>3</function>
				<start_addr>3</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_47">
				<function>3</function>
				<start_addr>46</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_7">
				<function>3</function>
				<start_addr>6</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_49">
				<function>3</function>
				<start_addr>48</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_55">
				<function>3</function>
				<start_addr>54</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_61">
				<function>3</function>
				<start_addr>60</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_12">
				<function>3</function>
				<start_addr>11</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_27">
				<function>3</function>
				<start_addr>26</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_76">
				<function>3</function>
				<start_addr>75</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_33">
				<function>3</function>
				<start_addr>32</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_18">
				<function>3</function>
				<start_addr>17</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_35">
				<function>3</function>
				<start_addr>34</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_67">
				<function>3</function>
				<start_addr>66</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_13">
				<function>3</function>
				<start_addr>12</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_62">
				<function>3</function>
				<start_addr>61</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_28">
				<function>3</function>
				<start_addr>27</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_45">
				<function>3</function>
				<start_addr>44</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_77">
				<function>3</function>
				<start_addr>76</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_5">
				<function>3</function>
				<start_addr>4</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_42">
				<function>3</function>
				<start_addr>41</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_8">
				<function>3</function>
				<start_addr>7</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1">
				<function>3</function>
				<start_addr>0</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_57">
				<function>3</function>
				<start_addr>56</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_52">
				<function>3</function>
				<start_addr>51</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
		</modbus>
	</protocol>
</APC_DDF>
