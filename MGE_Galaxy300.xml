<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd" ddfid="MGE_Galaxy300" ddfname="MGE Galaxy300" ddfversion="1" canremove="yes">
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="MGE_Galaxy300">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
		<setProductData ruleid="vendordata" field="vendor">MGE</setProductData>
		<setProductData ruleid="modeldata" field="model">Galaxy 300</setProductData>
		<setProductData ruleid="typedata" field="type">UPS</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname />
      - Slave
			<commSetting field="slaveaddress" />
		</setDefaultLabel>
		<numSensor ruleid="frequency_eco_transfer_range">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_FREQUENCY_ECO_TRANSFER_RANGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_225</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Frequency eco transfer range</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="total_output_percent_load">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_TOTAL_OUTPUT_PERCENT_LOAD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_314</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total output percent load</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_remaining_capacity">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_BATTERY_REMAINING_CAPACITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_332</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery remaining capacity</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_humidity">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_HUMIDITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_392</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 humidity</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_maximum_humidity_threshold_">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MAXIMUM_HUMIDITY_THRESHOLD_</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_393</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 maximum humidity threshold</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_minimum_humidity_threshold_">
			<type>pctofcapacity</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MINIMUM_HUMIDITY_THRESHOLD_</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_396</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 minimum humidity threshold</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_temperature">
			<type>temp</type>
			<units />
			<sensorId>_BATTERY_TEMPERATURE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_331</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery temperature</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_temperature">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_TEMPERATURE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_385</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 temperature</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_maximum_temperature_threshold">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MAXIMUM_TEMPERATURE_THRESHOLD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_386</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 maximum temperature threshold</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_minimum_temperature_threshold">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MINIMUM_TEMPERATURE_THRESHOLD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_389</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 minimum temperature threshold</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_temperature_in_deg_f">
			<type>temp</type>
			<units />
			<sensorId>_BATTERY_TEMPERATURE_IN_DEG_F</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_342</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery temperature in deg f</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_temperature_in_deg_f">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_TEMPERATURE_IN_DEG_F</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_343</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 temperature in deg f</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_maximum_temperature_threshold_in_deg_f">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MAXIMUM_TEMPERATURE_THRESHOLD_IN_DEG_F</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_344</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 maximum temperature threshold in deg f</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="uio_sensor_port_1_minimum_temperature_threshold_in_deg_f">
			<type>temp</type>
			<units />
			<sensorId>_UIO_SENSOR_PORT_1_MINIMUM_TEMPERATURE_THRESHOLD_IN_DEG_F</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_345</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Uio sensor port 1 minimum temperature threshold in deg f</label>
			<sensorSet>Temperature</sensorSet>
		</numSensor>
		<numSensor ruleid="total_battery_capacity">
			<type>num</type>
			<units>amphours</units>
			<sensorId>_TOTAL_BATTERY_CAPACITY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_341</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total battery capacity</label>
			<sensorSet>Ampere Hour</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_1_current">
			<type>amperage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_1_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_257</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 1 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_2_current">
			<type>amperage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_2_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_258</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 2 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_3_current">
			<type>amperage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_3_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_259</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 3 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_1current">
			<type>amperage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_1CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_263</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 1current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_2_current">
			<type>amperage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_2_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_264</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 2 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_3_current">
			<type>amperage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_3_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_265</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 3 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_current">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_266</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_current">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_267</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_current">
			<type>amperage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_268</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_current">
			<type>amperage</type>
			<units />
			<sensorId>_BATTERY_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_271</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_positive_current">
			<type>amperage</type>
			<units />
			<sensorId>_BATTERY_POSITIVE_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_272</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery positive current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_negative_current">
			<type>amperage</type>
			<units />
			<sensorId>_BATTERY_NEGATIVE_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_273</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery negative current</label>
			<sensorSet>Ampere</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_frequency">
			<type>frequency</type>
			<units />
			<sensorId>_MAINS_INPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_319</getOid>
					</op>
					<op>10</op>
				</mult>
			</value>
			<label>Mains input frequency</label>
			<sensorSet>Frequency</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_frequency">
			<type>frequency</type>
			<units />
			<sensorId>_BYPASS_INPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_321</getOid>
					</op>
					<op>10</op>
				</mult>
			</value>
			<label>Bypass input frequency</label>
			<sensorSet>dHz</sensorSet>
		</numSensor>
		<numSensor ruleid="output_frequency">
			<type>frequency</type>
			<units />
			<sensorId>_OUTPUT_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_322</getOid>
					</op>
					<op>10</op>
				</mult>
			</value>
			<label>Output frequency</label>
			<sensorSet>dHz</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_308</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 apparent power</label>
			<sensorSet>Apparent Power</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_309</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 apparent power</label>
			<sensorSet>Apparent Power</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_310</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 apparent power</label>
			<sensorSet>Apparent Power</sensorSet>
		</numSensor>
		<numSensor ruleid="total_output_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>_TOTAL_OUTPUT_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_312</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total output apparent power</label>
			<sensorSet>Apparent Power</sensorSet>
		</numSensor>
		<numSensor ruleid="nominal_output_apparent_power">
			<type>num/powerKVA</type>
			<units />
			<sensorId>_NOMINAL_OUTPUT_APPARENT_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_522</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Nominal output apparent power</label>
			<sensorSet>Apparent Power</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_active_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_ACTIVE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_305</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 active power</label>
			<sensorSet>Active Power</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_active_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_ACTIVE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_306</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 active power</label>
			<sensorSet>Active Power</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_active_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_ACTIVE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_307</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 active power</label>
			<sensorSet>Active Power</sensorSet>
		</numSensor>
		<numSensor ruleid="total_output_active_power">
			<type>num/powerKW</type>
			<units />
			<sensorId>_TOTAL_OUTPUT_ACTIVE_POWER</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_311</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total output active power</label>
			<sensorSet>Active Power</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_remaining_runtime">
			<type>timeinmin</type>
			<units />
			<sensorId>_BATTERY_REMAINING_RUNTIME</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_330</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery remaining runtime</label>
			<sensorSet>Time</sensorSet>
		</numSensor>
		<numSensor ruleid="eco_high_voltage_threshold">
			<type>voltage</type>
			<units />
			<sensorId>_ECO_HIGH_VOLTAGE_THRESHOLD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_226</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Eco high voltage threshold</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="eco_low_voltage_threshold">
			<type>voltage</type>
			<units />
			<sensorId>_ECO_LOW_VOLTAGE_THRESHOLD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_227</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Eco low voltage threshold</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_1_to_phase_2_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_1_TO_PHASE_2_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_278</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 1 to phase 2 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_2_to_phase_3_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_2_TO_PHASE_3_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_279</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 2 to phase 3 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_3_to_phase_1_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_3_TO_PHASE_1_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_280</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 3 to phase 1 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_1_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_1_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_287</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 1 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_2_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_2_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_288</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 2 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_3_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_3_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_289</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 3 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_1_to_phase_2_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_1_TO_PHASE_2_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_290</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 1 to phase 2 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_2_to_phase_3_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_2_TO_PHASE_3_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_291</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 2 to phase 3 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="bypass_input_phase_3_to_phase_1_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BYPASS_INPUT_PHASE_3_TO_PHASE_1_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_292</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Bypass input phase 3 to phase 1 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_293</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_294</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_295</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_to_phase_2_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_TO_PHASE_2_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_296</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 to phase 2 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_to_phase_3_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_TO_PHASE_3_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_297</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 to phase 3 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_to_phase_1_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_TO_PHASE_1_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_298</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 to phase 1 voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_302</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_positive_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY_POSITIVE_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_303</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery positive voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="battery_negative_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_BATTERY_NEGATIVE_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_304</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battery negative voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_1_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_1_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_337</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 1 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_2_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_2_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_338</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 2 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_input_phase_3_to_neutral_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_MAINS_INPUT_PHASE_3_TO_NEUTRAL_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_339</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Mains input phase 3 to neutral voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="nominal_battery_voltage">
			<type>voltage</type>
			<units />
			<sensorId>_NOMINAL_BATTERY_VOLTAGE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_532</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Nominal battery voltage</label>
			<sensorSet>Voltage</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_1_peak_factor">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT_PHASE_1_PEAK_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_315</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 1 peak factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_2_peak_factor">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT_PHASE_2_PEAK_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_316</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 2 peak factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="output_phase_3_peak_factor">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT_PHASE_3_PEAK_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_317</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output phase 3 peak factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="output_power_factor">
			<type>num</type>
			<units />
			<sensorId>_OUTPUT_POWER_FACTOR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_318</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output power factor</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<numSensor ruleid="battaries_count_per_branch">
			<type>num</type>
			<units />
			<sensorId>_BATTARIES_COUNT_PER_BRANCH</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Function_3_Reg_340</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Battaries count per branch</label>
			<sensorSet>Generic</sensorSet>
		</numSensor>
		<stateSensor ruleid="over_all_status_of_the_ups">
			<type>state</type>
			<sensorId>_OVER_ALL_STATUS_OF_THE_UPS</sensorId>
			<value>
				<mapValue mapid="n/a_vm">
					<getOid>Function_3_Reg_1</getOid>
				</mapValue>
			</value>
			<label>Over all status of the ups</label>
			<enum>n/a_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stringSensor ruleid="nmc_application_name">
			<type>string</type>
			<units />
			<sensorId>_NMC_APPLICATION_NAME</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_2</getOid>
				</op>
			</value>
			<label>Nmc application name</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="nmc_card_model_number">
			<type>string</type>
			<units />
			<sensorId>_NMC_CARD_MODEL_NUMBER</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_11</getOid>
				</op>
			</value>
			<label>Nmc card model number</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="nmc_card_serial_nummber">
			<type>string</type>
			<units />
			<sensorId>_NMC_CARD_SERIAL_NUMMBER</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_20</getOid>
				</op>
			</value>
			<label>Nmc card serial nummber</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="nmc_card_hardware_revision">
			<type>string</type>
			<units />
			<sensorId>_NMC_CARD_HARDWARE_REVISION</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_28</getOid>
				</op>
			</value>
			<label>Nmc card hardware revision</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="nmc_card_firmware_revision_">
			<type>string</type>
			<units />
			<sensorId>_NMC_CARD_FIRMWARE_REVISION_</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_37</getOid>
				</op>
			</value>
			<label>Nmc card firmware revision</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="nmc_card_manufactruing_date">
			<type>string</type>
			<units />
			<sensorId>_NMC_CARD_MANUFACTRUING_DATE</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_51</getOid>
				</op>
			</value>
			<label>Nmc card manufactruing date</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="ups_manufacturere_name">
			<type>string</type>
			<units />
			<sensorId>_UPS_MANUFACTURERE_NAME</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_417</getOid>
				</op>
			</value>
			<label>Ups manufacturere name</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="ups_product_name">
			<type>string</type>
			<units />
			<sensorId>_UPS_PRODUCT_NAME</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_427</getOid>
				</op>
			</value>
			<label>Ups product name</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="ups_model_number">
			<type>string</type>
			<units />
			<sensorId>_UPS_MODEL_NUMBER</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_435</getOid>
				</op>
			</value>
			<label>Ups model number</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stringSensor ruleid="ups_serial_number">
			<type>string</type>
			<units />
			<sensorId>_UPS_SERIAL_NUMBER</sensorId>
			<value>
				<op>
					<getOid>Function_3_Reg_443</getOid>
				</op>
			</value>
			<label>Ups serial number</label>
			<sensorSet>Generic</sensorSet>
		</stringSensor>
		<stateSensor ruleid="output_power_turned_off_or_not">
			<type>state</type>
			<sensorId>_OUTPUT_POWER_TURNED_OFF_OR_NOT</sensorId>
			<value>
				<mapValue mapid="status1_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Output power turned off or not</label>
			<enum>status1_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_protected_ups_coupled">
			<type>state</type>
			<sensorId>_LOAD_PROTECTED_UPS_COUPLED</sensorId>
			<value>
				<mapValue mapid="status2_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load protected_ups coupled</label>
			<enum>status2_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_major_alarm">
			<type>state</type>
			<sensorId>_UPS_MAJOR_ALARM</sensorId>
			<value>
				<mapValue mapid="status3_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups major alarm</label>
			<enum>status3_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_usage_status">
			<type>state</type>
			<sensorId>_BATTERY_USAGE_STATUS</sensorId>
			<value>
				<mapValue mapid="status4_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery usage status</label>
			<enum>status4_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_low_warning">
			<type>state</type>
			<sensorId>_BATTERY_LOW_WARNING</sensorId>
			<value>
				<mapValue mapid="status5_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery low warning</label>
			<enum>status5_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="end_of_battery_runtime">
			<type>state</type>
			<sensorId>_END_OF_BATTERY_RUNTIME</sensorId>
			<value>
				<mapValue mapid="status6_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>End of battery runtime</label>
			<enum>status6_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="operation_on_static_switch">
			<type>state</type>
			<sensorId>_OPERATION_ON_STATIC_SWITCH</sensorId>
			<value>
				<mapValue mapid="status7_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Operation on static switch</label>
			<enum>status7_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="communication_lost">
			<type>state</type>
			<sensorId>_COMMUNICATION_LOST</sensorId>
			<value>
				<mapValue mapid="status8_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Communication lost</label>
			<enum>status8_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_overload">
			<type>state</type>
			<sensorId>_UPS_OVERLOAD</sensorId>
			<value>
				<mapValue mapid="status9_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups overload</label>
			<enum>status9_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="emergency_stop">
			<type>state</type>
			<sensorId>_EMERGENCY_STOP</sensorId>
			<value>
				<mapValue mapid="status10_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Emergency stop</label>
			<enum>status10_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_internal_temperature_violation">
			<type>state</type>
			<sensorId>_UPS_INTERNAL_TEMPERATURE_VIOLATION</sensorId>
			<value>
				<mapValue mapid="status11_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups internal temperature violation</label>
			<enum>status11_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_to_be_checked_or_external_battery_monitoring_alarm">
			<type>state</type>
			<sensorId>_BATTERY_TO_BE_CHECKED_OR_EXTERNAL_BATTERY_MONITORING_ALARM</sensorId>
			<value>
				<mapValue mapid="status12_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery to be checked or external battery monitoring alarm</label>
			<enum>status12_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="device_ventilation_fault">
			<type>state</type>
			<sensorId>_DEVICE_VENTILATION_FAULT</sensorId>
			<value>
				<mapValue mapid="status13_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Device ventilation fault</label>
			<enum>status13_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_alarm_violation_">
			<type>state</type>
			<sensorId>_LOAD_ALARM_VIOLATION_</sensorId>
			<value>
				<mapValue mapid="status14_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_65</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load alarm violation</label>
			<enum>status14_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="run_in_frequency_converter">
			<type>state</type>
			<sensorId>_RUN_IN_FREQUENCY_CONVERTER</sensorId>
			<value>
				<mapValue mapid="status15_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Run in frequency converter</label>
			<enum>status15_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="maintenance_bypass_switch_status">
			<type>state</type>
			<sensorId>_MAINTENANCE_BYPASS_SWITCH_STATUS</sensorId>
			<value>
				<mapValue mapid="status17_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Maintenance bypass switch status</label>
			<enum>status17_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="deep_discharge_protection">
			<type>state</type>
			<sensorId>_DEEP_DISCHARGE_PROTECTION</sensorId>
			<value>
				<mapValue mapid="status18_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Deep discharge protection</label>
			<enum>status18_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="rectifier_internal_alarm_status">
			<type>state</type>
			<sensorId>_RECTIFIER_INTERNAL_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="status19_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Rectifier internal alarm status</label>
			<enum>status19_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="load_protection_status_in_parallel_installation">
			<type>state</type>
			<sensorId>_LOAD_PROTECTION_STATUS_IN_PARALLEL_INSTALLATION</sensorId>
			<value>
				<mapValue mapid="status20_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Load protection status in parallel installation</label>
			<enum>status20_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="eco_mode_status">
			<type>state</type>
			<sensorId>_ECO_MODE_STATUS</sensorId>
			<value>
				<mapValue mapid="status21_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Eco mode status</label>
			<enum>status21_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="installed_battery_status">
			<type>state</type>
			<sensorId>_INSTALLED_BATTERY_STATUS</sensorId>
			<value>
				<mapValue mapid="status22_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_67</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Installed battery status</label>
			<enum>status22_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_test_error">
			<type>state</type>
			<sensorId>_BATTERY_TEST_ERROR</sensorId>
			<value>
				<mapValue mapid="status23_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_67</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery test error</label>
			<enum>status23_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_test_in_progress">
			<type>state</type>
			<sensorId>_BATTERY_TEST_IN_PROGRESS</sensorId>
			<value>
				<mapValue mapid="status24_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_67</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery test in progress</label>
			<enum>status24_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="internal_battery_temperature_status">
			<type>state</type>
			<sensorId>_INTERNAL_BATTERY_TEMPERATURE_STATUS</sensorId>
			<value>
				<mapValue mapid="status25_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_67</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Internal battery temperature status</label>
			<enum>status25_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_switch_status">
			<type>state</type>
			<sensorId>_BATTERY_SWITCH_STATUS</sensorId>
			<value>
				<mapValue mapid="status26_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_67</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery switch status</label>
			<enum>status26_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_warranty_expired">
			<type>state</type>
			<sensorId>_UPS_WARRANTY_EXPIRED</sensorId>
			<value>
				<mapValue mapid="status27_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_68</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups warranty expired</label>
			<enum>status27_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_battery_service_expired">
			<type>state</type>
			<sensorId>_UPS_BATTERY_SERVICE_EXPIRED</sensorId>
			<value>
				<mapValue mapid="status28_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_68</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups battery service expired</label>
			<enum>status28_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_wearing_parts_life_expired">
			<type>state</type>
			<sensorId>_UPS_WEARING_PARTS_LIFE_EXPIRED</sensorId>
			<value>
				<mapValue mapid="status29_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_68</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups wearing parts life expired</label>
			<enum>status29_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_secure_start_up_recommended">
			<type>state</type>
			<sensorId>_UPS_SECURE_START_UP_RECOMMENDED</sensorId>
			<value>
				<mapValue mapid="status30_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_68</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups secure start up recommended</label>
			<enum>status30_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mains_input_voltage_status">
			<type>state</type>
			<sensorId>_MAINS_INPUT_VOLTAGE_STATUS</sensorId>
			<value>
				<mapValue mapid="status31_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_69</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mains input voltage status</label>
			<enum>status31_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mains_input_fuse_status">
			<type>state</type>
			<sensorId>_MAINS_INPUT_FUSE_STATUS</sensorId>
			<value>
				<mapValue mapid="status32_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_69</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mains input fuse status</label>
			<enum>status32_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="mains_input_frequency_status">
			<type>state</type>
			<sensorId>_MAINS_INPUT_FREQUENCY_STATUS</sensorId>
			<value>
				<mapValue mapid="status33_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_69</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Mains input frequency status</label>
			<enum>status33_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="status_of_the_input_contact_1">
			<type>state</type>
			<sensorId>_STATUS_OF_THE_INPUT_CONTACT_1</sensorId>
			<value>
				<mapValue mapid="status34_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_70</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Status of the input contact 1</label>
			<enum>status34_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="status_of_the_input_contact_2">
			<type>state</type>
			<sensorId>_STATUS_OF_THE_INPUT_CONTACT_2</sensorId>
			<value>
				<mapValue mapid="status35_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_70</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Status of the input contact 2</label>
			<enum>status35_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_ups_redundancy_status">
			<type>state</type>
			<sensorId>__UPS_REDUNDANCY_STATUS</sensorId>
			<value>
				<mapValue mapid="status36_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_70</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ups redundancy status</label>
			<enum>status36_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ups_maintenance_bypass_status">
			<type>state</type>
			<sensorId>_UPS_MAINTENANCE_BYPASS_STATUS</sensorId>
			<value>
				<mapValue mapid="status37_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ups maintenance bypass status</label>
			<enum>status37_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_overload_status">
			<type>state</type>
			<sensorId>_BYPASS_OVERLOAD_STATUS</sensorId>
			<value>
				<mapValue mapid="status38_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass overload status</label>
			<enum>status38_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_bypass_thermal_overload_status">
			<type>state</type>
			<sensorId>__BYPASS_THERMAL_OVERLOAD_STATUS</sensorId>
			<value>
				<mapValue mapid="status39_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>bypass thermal overload status</label>
			<enum>status39_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_module_status">
			<type>state</type>
			<sensorId>_BYPASS_MODULE_STATUS</sensorId>
			<value>
				<mapValue mapid="status40_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass module status</label>
			<enum>status40_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_frequency_status">
			<type>state</type>
			<sensorId>_BYPASS_FREQUENCY_STATUS</sensorId>
			<value>
				<mapValue mapid="status41_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass frequency status</label>
			<enum>status41_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_voltage_status">
			<type>state</type>
			<sensorId>_BYPASS_VOLTAGE_STATUS</sensorId>
			<value>
				<mapValue mapid="status42_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass voltage status</label>
			<enum>status42_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bypass_switch_status_">
			<type>state</type>
			<sensorId>_BYPASS_SWITCH_STATUS_</sensorId>
			<value>
				<mapValue mapid="status43_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_71</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Bypass switch status</label>
			<enum>status43_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="_static_bypass_switch_alarm_status">
			<type>state</type>
			<sensorId>__STATIC_BYPASS_SWITCH_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="status44_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_72</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>static bypass switch alarm status</label>
			<enum>status44_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_and_ac_bypass_desynchronisation_1">
			<type>state</type>
			<sensorId>_INVERTER_AND_AC_BYPASS_DESYNCHRONISATION_1</sensorId>
			<value>
				<mapValue mapid="status45_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_72</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter and ac bypass desynchronisation_1</label>
			<enum>status45_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_and_ac_bypass_desynchronisation_8">
			<type>state</type>
			<sensorId>_INVERTER_AND_AC_BYPASS_DESYNCHRONISATION_8</sensorId>
			<value>
				<mapValue mapid="status46_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_72</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter and ac bypass desynchronisation_8</label>
			<enum>status46_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="output_switch_status">
			<type>state</type>
			<sensorId>_OUTPUT_SWITCH_STATUS</sensorId>
			<value>
				<mapValue mapid="status47_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_72</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Output switch status</label>
			<enum>status47_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input_contact_1status">
			<type>state</type>
			<sensorId>_INPUT_CONTACT_1STATUS</sensorId>
			<value>
				<mapValue mapid="status48_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_73</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input contact 1status</label>
			<enum>status48_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="input_contact_2_status">
			<type>state</type>
			<sensorId>_INPUT_CONTACT_2_STATUS</sensorId>
			<value>
				<mapValue mapid="status49_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_73</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Input contact 2 status</label>
			<enum>status49_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_charger_status">
			<type>state</type>
			<sensorId>_BATTERY_CHARGER_STATUS</sensorId>
			<value>
				<mapValue mapid="status50_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_74</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery charger status</label>
			<enum>status50_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_charging_status_1">
			<type>state</type>
			<sensorId>_BATTERY_CHARGING_STATUS_1</sensorId>
			<value>
				<mapValue mapid="status51_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_74</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery charging status_1</label>
			<enum>status51_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="battery_charging_status_3">
			<type>state</type>
			<sensorId>_BATTERY_CHARGING_STATUS_3</sensorId>
			<value>
				<mapValue mapid="status52_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_74</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery charging status_3</label>
			<enum>status52_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="eco_setting">
			<type>state</type>
			<sensorId>_ECO_SETTING</sensorId>
			<value>
				<mapValue mapid="status53_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_75</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Eco setting</label>
			<enum>status53_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_module_alarm_status">
			<type>state</type>
			<sensorId>_INVERTER_MODULE_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="status54_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter module alarm status</label>
			<enum>status54_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_overload_status">
			<type>state</type>
			<sensorId>_INVERTER_OVERLOAD_STATUS</sensorId>
			<value>
				<mapValue mapid="status55_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter overload status</label>
			<enum>status55_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_thermal_overload_status">
			<type>state</type>
			<sensorId>_INVERTER_THERMAL_OVERLOAD_STATUS</sensorId>
			<value>
				<mapValue mapid="status56_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter thermal overload status</label>
			<enum>status56_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_limitation_status">
			<type>state</type>
			<sensorId>_INVERTER_LIMITATION_STATUS</sensorId>
			<value>
				<mapValue mapid="status57_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter limitation status</label>
			<enum>status57_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="inverter_fuse_status">
			<type>state</type>
			<sensorId>_INVERTER_FUSE_STATUS</sensorId>
			<value>
				<mapValue mapid="status58_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_77</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Inverter fuse status</label>
			<enum>status58_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="short_circuit_on_output_status">
			<type>state</type>
			<sensorId>_SHORT_CIRCUIT_ON_OUTPUT_STATUS</sensorId>
			<value>
				<mapValue mapid="status59_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_80</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Short circuit on output status</label>
			<enum>status59_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<stateSensor ruleid="galaxy_300">
			<type>state</type>
			<sensorId>_GALAXY_300</sensorId>
			<value>
				<mapValue mapid="status16_vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Function_3_Reg_66</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>7</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Galaxy 300</label>
			<enum>status16_em</enum>
			<sensorSet>Generic</sensorSet>
		</stateSensor>
		<valueMap ruleid="status1_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status1_em">
			<label>Output is not powered</label>
			<label>Output is powered</label>
		</enumMap>

		<valueMap ruleid="status2_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status2_em">
			<label>Inverter is not used</label>
			<label>Inverter is used</label>
		</enumMap>

		<valueMap ruleid="status3_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status3_em">
			<label>N/A</label>
			<label>UPS major module is inoperable</label>
		</enumMap>

		<valueMap ruleid="status4_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status4_em">
			<label>N/A</label>
			<label>On battery power in response to an input power problem</label>
		</enumMap>

		<valueMap ruleid="status5_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status5_em">
			<label>N/A</label>
			<label>Low battery</label>
		</enumMap>

		<valueMap ruleid="status6_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status6_em">
			<label>N/A</label>
			<label>Ups is in shut down state due to low battery</label>
		</enumMap>

		<valueMap ruleid="status7_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status7_em">
			<label>N/A</label>
			<label>(Inbypass)Bypass AC Input is used as source of power</label>
		</enumMap>

		<valueMap ruleid="status8_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status8_em">
			<label>N/A</label>
			<label>UPS serial communication lost exists</label>
		</enumMap>

		<valueMap ruleid="status9_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status9_em">
			<label>N/A</label>
			<label>UPS output overload</label>
		</enumMap>

		<valueMap ruleid="status10_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status10_em">
			<label>N/A</label>
			<label>Emergency stop in progess</label>
		</enumMap>

		<valueMap ruleid="status11_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status11_em">
			<label>UPS temperature is ok</label>
			<label>UPS internal temperature exceeds the critical threshold</label>
		</enumMap>

		<valueMap ruleid="status12_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status12_em">
			<label>N/A</label>
			<label>Battery Replacement needed</label>
		</enumMap>

		<valueMap ruleid="status13_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status13_em">
			<label>N/A</label>
			<label>System level fan inoperable</label>
		</enumMap>

		<valueMap ruleid="status14_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status14_em">
			<label>Alarm violation not present</label>
			<label>Alarm violation present</label>
		</enumMap>

		<valueMap ruleid="status15_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status15_em">
			<label>Power converter currently works on auto ranging</label>
			<label>Power converter currently works on frequency converter</label>
		</enumMap>

		<valueMap ruleid="status16_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status16_em">
			<label>N/A</label>
			<label>Unitary 3:3(Galaxy300)</label>
			<label>Modular 3:3(Galaxy300)</label>
			<label>Reserved</label>
			<label>Reserved</label>
			<label>Galaxy300 unitary 3:1</label>
			<label>Galaxy300 modular 3:1</label>
		</enumMap>

		<valueMap ruleid="status17_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status17_em">
			<label>N/A</label>
			<label>Maintenance by pass switch closed</label>
		</enumMap>

		<valueMap ruleid="status18_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status18_em">
			<label>Disabled</label>
			<label>Enabled</label>
		</enumMap>

		<valueMap ruleid="status19_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status19_em">
			<label>N/A</label>
			<label>Rectifier internal alarm exists</label>
		</enumMap>

		<valueMap ruleid="status20_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status20_em">
			<label>Load protection is restored</label>
			<label>Load protection is lost</label>
		</enumMap>

		<valueMap ruleid="status21_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status21_em">
			<label>UPS not in ECO Mode</label>
			<label>UPS is running in ECO Mode</label>
		</enumMap>

		<valueMap ruleid="status22_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status22_em">
			<label>N/A</label>
			<label>Battery present</label>
		</enumMap>

		<valueMap ruleid="status23_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status23_em">
			<label>N/A</label>
			<label>Battery test failed</label>
		</enumMap>

		<valueMap ruleid="status24_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status24_em">
			<label>N/A</label>
			<label>Test in progress</label>
		</enumMap>

		<valueMap ruleid="status25_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status25_em">
			<label>N/A</label>
			<label>The internal battery temperature exceeds the critical threshold</label>
		</enumMap>

		<valueMap ruleid="status26_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status26_em">
			<label>N/A</label>
			<label>Battery switch closed</label>
		</enumMap>

		<valueMap ruleid="status27_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status27_em">
			<label>N/A</label>
			<label>Warranty expiring so on alarm</label>
		</enumMap>

		<valueMap ruleid="status28_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status28_em">
			<label>N/A</label>
			<label>Battery service life expired alarm</label>
		</enumMap>

		<valueMap ruleid="status29_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status29_em">
			<label>N/A</label>
			<label>End of life of the wearing parts alarm</label>
		</enumMap>

		<valueMap ruleid="status30_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status30_em">
			<label>N/A</label>
			<label>UPS secure startup required alarm</label>
		</enumMap>

		<valueMap ruleid="status31_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status31_em">
			<label>N/A</label>
			<label>Mains input is not OK/Voltage out of tolerance</label>
		</enumMap>

		<valueMap ruleid="status32_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status32_em">
			<label>N/A</label>
			<label>Mains fuse blown</label>
		</enumMap>

		<valueMap ruleid="status33_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status33_em">
			<label>N/A</label>
			<label>Mains input frequency out of tolerance</label>
		</enumMap>

		<valueMap ruleid="status34_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status34_em">
			<label>N/A</label>
			<label>input contact 1 alarm exist</label>
		</enumMap>

		<valueMap ruleid="status35_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status35_em">
			<label>N/A</label>
			<label>input contact 2 alarm exist</label>
		</enumMap>

		<valueMap ruleid="status36_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status36_em">
			<label>N/A</label>
			<label>Power modules redundancy is lost</label>
		</enumMap>

		<valueMap ruleid="status37_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status37_em">
			<label>UPS is not in maintenance bypass</label>
			<label>UPS is in maintenance bypass</label>
		</enumMap>

		<valueMap ruleid="status38_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status38_em">
			<label>Bypass input power is ok</label>
			<label>Bypass input power overload</label>
		</enumMap>

		<valueMap ruleid="status39_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status39_em">
			<label>No thermal overload on bypass input</label>
			<label>Thermal overload exists on bypass input</label>
		</enumMap>

		<valueMap ruleid="status40_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status40_em">
			<label>Bypass module is ok</label>
			<label>Bypass module is in inoperable condition</label>
		</enumMap>

		<valueMap ruleid="status41_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status41_em">
			<label>Bypass frequency in tolerance</label>
			<label>Bypass frequency out of tolerance</label>
		</enumMap>

		<valueMap ruleid="status42_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status42_em">
			<label>Bypass voltage in tolerance</label>
			<label>Bypass voltage out of tolerance</label>
		</enumMap>

		<valueMap ruleid="status43_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status43_em">
			<label>N/A</label>
			<label>Bypass switch closed</label>
		</enumMap>

		<valueMap ruleid="status44_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status44_em">
			<label>Static bypass switch is ok</label>
			<label>Static bypass switch is inoperable</label>
		</enumMap>

		<valueMap ruleid="status45_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status45_em">
			<label>Ups synchronised with AC bypass</label>
			<label>Ups is not synchronised with the AC bypass</label>
		</enumMap>

		<valueMap ruleid="status46_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status46_em">
			<label>Ups synchronised with AC bypass</label>
			<label>Ups is not synchronised with the AC bypass</label>
		</enumMap>

		<valueMap ruleid="status47_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status47_em">
			<label>N/A</label>
			<label>Output switch closed</label>
		</enumMap>

		<valueMap ruleid="status48_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status48_em">
			<label>N/A</label>
			<label>input contact 1 closed</label>
		</enumMap>

		<valueMap ruleid="status49_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status49_em">
			<label>N/A</label>
			<label>input contact 2 closed</label>
		</enumMap>

		<valueMap ruleid="status50_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status50_em">
			<label>N/A</label>
			<label>Battery charger is inoperable</label>
		</enumMap>

		<valueMap ruleid="status51_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status51_em">
			<label>N/A</label>
			<label>Battery is charging</label>
		</enumMap>

		<valueMap ruleid="status52_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status52_em">
			<label>N/A</label>
			<label>Battery is charging</label>
		</enumMap>

		<valueMap ruleid="status53_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status53_em">
			<label>N/A</label>
			<label>ECO mode feature is available</label>
		</enumMap>

		<valueMap ruleid="status54_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status54_em">
			<label>N/A</label>
			<label>Inverter module is inoperable</label>
		</enumMap>

		<valueMap ruleid="status55_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status55_em">
			<label>N/A</label>
			<label>Inverter Overload</label>
		</enumMap>

		<valueMap ruleid="status56_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status56_em">
			<label>N/A</label>
			<label>A thermal overload condition exists on Inverter</label>
		</enumMap>

		<valueMap ruleid="status57_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status57_em">
			<label>No current limitation</label>
			<label>Current limitation</label>
		</enumMap>

		<valueMap ruleid="status58_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status58_em">
			<label>No fuse or fuse closed</label>
			<label>Inverter Fuse Blown</label>
		</enumMap>

		<valueMap ruleid="status59_vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>

		<enumMap ruleid="status59_em">
			<label>N/A</label>
			<label>Short circuit on output exixts</label>
		</enumMap>
	</device>
	<protocol>
		<modbus>
			<value_ref_id valid="Function_3_Reg_294">
				<function>3</function>
				<start_addr>293</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_51">
				<function>3</function>
				<start_addr>50</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_71">
				<function>3</function>
				<start_addr>70</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_339">
				<function>3</function>
				<start_addr>338</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_267">
				<function>3</function>
				<start_addr>266</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_522">
				<function>3</function>
				<start_addr>521</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_345">
				<function>3</function>
				<start_addr>344</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_312">
				<function>3</function>
				<start_addr>311</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_288">
				<function>3</function>
				<start_addr>287</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_317">
				<function>3</function>
				<start_addr>316</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_37">
				<function>3</function>
				<start_addr>36</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_273">
				<function>3</function>
				<start_addr>272</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_66">
				<function>3</function>
				<start_addr>65</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_72">
				<function>3</function>
				<start_addr>71</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_344">
				<function>3</function>
				<start_addr>343</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_11">
				<function>3</function>
				<start_addr>10</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_427">
				<function>3</function>
				<start_addr>426</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_318">
				<function>3</function>
				<start_addr>317</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_266">
				<function>3</function>
				<start_addr>265</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_295">
				<function>3</function>
				<start_addr>294</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_310">
				<function>3</function>
				<start_addr>309</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_307">
				<function>3</function>
				<start_addr>306</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_322">
				<function>3</function>
				<start_addr>321</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_65">
				<function>3</function>
				<start_addr>64</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_271">
				<function>3</function>
				<start_addr>270</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_308">
				<function>3</function>
				<start_addr>307</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_279">
				<function>3</function>
				<start_addr>278</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_20">
				<function>3</function>
				<start_addr>19</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_417">
				<function>3</function>
				<start_addr>416</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_70">
				<function>3</function>
				<start_addr>69</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_319">
				<function>3</function>
				<start_addr>318</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_73">
				<function>3</function>
				<start_addr>72</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_303">
				<function>3</function>
				<start_addr>302</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_392">
				<function>3</function>
				<start_addr>391</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_257">
				<function>3</function>
				<start_addr>256</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_225">
				<function>3</function>
				<start_addr>224</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_268">
				<function>3</function>
				<start_addr>267</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_302">
				<function>3</function>
				<start_addr>301</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_393">
				<function>3</function>
				<start_addr>392</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_435">
				<function>3</function>
				<start_addr>434</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_68">
				<function>3</function>
				<start_addr>67</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_389">
				<function>3</function>
				<start_addr>388</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_330">
				<function>3</function>
				<start_addr>329</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_272">
				<function>3</function>
				<start_addr>271</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_293">
				<function>3</function>
				<start_addr>292</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_278">
				<function>3</function>
				<start_addr>277</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_289">
				<function>3</function>
				<start_addr>288</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_304">
				<function>3</function>
				<start_addr>303</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_342">
				<function>3</function>
				<start_addr>341</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_315">
				<function>3</function>
				<start_addr>314</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_226">
				<function>3</function>
				<start_addr>225</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_340">
				<function>3</function>
				<start_addr>339</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_331">
				<function>3</function>
				<start_addr>330</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_69">
				<function>3</function>
				<start_addr>68</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_75">
				<function>3</function>
				<start_addr>74</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_297">
				<function>3</function>
				<start_addr>296</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_309">
				<function>3</function>
				<start_addr>308</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_259">
				<function>3</function>
				<start_addr>258</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_28">
				<function>3</function>
				<start_addr>27</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_337">
				<function>3</function>
				<start_addr>336</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_443">
				<function>3</function>
				<start_addr>442</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_290">
				<function>3</function>
				<start_addr>289</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_291">
				<function>3</function>
				<start_addr>290</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_258">
				<function>3</function>
				<start_addr>257</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_292">
				<function>3</function>
				<start_addr>291</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_314">
				<function>3</function>
				<start_addr>313</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_80">
				<function>3</function>
				<start_addr>79</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_298">
				<function>3</function>
				<start_addr>297</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_280">
				<function>3</function>
				<start_addr>279</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_67">
				<function>3</function>
				<start_addr>66</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_287">
				<function>3</function>
				<start_addr>286</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_338">
				<function>3</function>
				<start_addr>337</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_263">
				<function>3</function>
				<start_addr>262</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_341">
				<function>3</function>
				<start_addr>340</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_532">
				<function>3</function>
				<start_addr>531</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_311">
				<function>3</function>
				<start_addr>310</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_2">
				<function>3</function>
				<start_addr>1</start_addr>
				<quantity>1</quantity>
				<type>ascii</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_77">
				<function>3</function>
				<start_addr>76</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_265">
				<function>3</function>
				<start_addr>264</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_343">
				<function>3</function>
				<start_addr>342</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_306">
				<function>3</function>
				<start_addr>305</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_296">
				<function>3</function>
				<start_addr>295</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_386">
				<function>3</function>
				<start_addr>385</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_332">
				<function>3</function>
				<start_addr>331</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_385">
				<function>3</function>
				<start_addr>384</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_74">
				<function>3</function>
				<start_addr>73</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_321">
				<function>3</function>
				<start_addr>320</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_1">
				<function>3</function>
				<start_addr>0</start_addr>
				<quantity>1</quantity>
				<type>ENUM</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_305">
				<function>3</function>
				<start_addr>304</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_396">
				<function>3</function>
				<start_addr>395</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_227">
				<function>3</function>
				<start_addr>226</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_316">
				<function>3</function>
				<start_addr>315</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Function_3_Reg_264">
				<function>3</function>
				<start_addr>263</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
		</modbus>
	</protocol>
</APC_DDF>
