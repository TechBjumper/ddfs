<?xml version="1.0"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="generac_sd100_h_panel_generator"
	ddfname="Generac SD100 H-Panel Generator"
	ddfversion="3"
	canremove="yes">
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="generac_sd100_h_panel_generator_num_header">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />

		<setProductData ruleid="vendordata" field="vendor">Generac</setProductData>
		<setProductData ruleid="modeldata" field="model">SD100 H-Panel</setProductData>
		<setProductData ruleid="typedata" field="type">Generator</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname/> - Slave <commSetting field="slaveaddress"/>
		</setDefaultLabel>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_num_sensors">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<numSensor ruleid="AvgCurrent">
			<type>amperage</type>
			<sensorId>AVG_CURRENT</sensorId>
			<value>
				<getOid>AVG_CURRENT</getOid>
			</value>
			<label>Average Current</label>
			<sensorSet>Current Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="AvgVoltage">
			<type>voltage</type>
			<sensorId>AVG_VOLTAGE</sensorId>
			<value>
				<getOid>AVG_VOLTAGE</getOid>
			</value>
			<label>Average Voltage</label>
			<sensorSet>Voltage Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="BatChargeCur">
			<type>amperage/batterycurrent</type>
			<sensorId>BAT_CHARGE_CURRENT</sensorId>
			<value>
				<mult>
					<op>
						<getOid>BAT_CHARGE_CURRENT</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Battery Current</label>
			<sensorSet>Battery Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="BatteryVolts">
			<type>voltageDC/battvoltage</type>
			<sensorId>BATTERY_VOLTS</sensorId>
			<value>
				<formatNumber printffmt="%.2f">
					<mult>
						<op>
							<getOid>BATTERY_VOLTS</getOid>
						</op>
						<op>0.01</op>
					</mult>
				</formatNumber>
			</value>
			<label>Battery Volts</label>
			<sensorSet>Battery Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="CoolantLevel">
			<type>num</type>
			<sensorId>COOLANT_LEVEL</sensorId>
			<value>
				<getOid>COOLANT_LEVEL</getOid>
			</value>
			<label>Coolant Level</label>
			<sensorSet>Coolant Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="CoolantTemp">
			<type>temp</type>
			<sensorId>COOLANT_TEMP</sensorId>
			<value>
				<getOid>COOLANT_TEMP</getOid>
			</value>
			<label>Coolant Temp</label>
			<sensorSet>Coolant Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="CurrentPhaseA">
			<type>amperage/phaseamperage</type>
			<sensorId>CURRENT_PHASE_A</sensorId>
			<value>
				<getOid>CURRENT_PHASE_A</getOid>
			</value>
			<label>Current Phase A</label>
			<sensorSet>Current Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="CurrentPhaseB">
			<type>amperage/phaseamperage</type>
			<sensorId>CURRENT_PHASE_B</sensorId>
			<value>
				<getOid>CURRENT_PHASE_B</getOid>
			</value>
			<label>Current Phase B</label>
			<sensorSet>Current Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="CurrentPhaseC">
			<type>amperage/phaseamperage</type>
			<sensorId>CURRENT_PHASE_C</sensorId>
			<value>
				<getOid>CURRENT_PHASE_C</getOid>
			</value>
			<label>Current Phase C</label>
			<sensorSet>Current Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="EngineRpm">
			<type>fanspeed</type>
			<sensorId>ENGINE_RPM</sensorId>
			<value>
				<getOid>ENGINE_RPM</getOid>
			</value>
			<!-- Make the number show up as a whole number -->
			<valueInc>1.0</valueInc>      
			<label>Engine Rpm</label>
			<sensorSet>Engine Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="EngineHoursNow">
			<type>timeinhrs</type>
			<sensorId>ENGINE_HOURS_NOW</sensorId>
			<value>
				<getOid>ENGINE_HOURS_NOW</getOid>
			</value>
			<label>Engine Hours Now</label>
			<sensorSet>Engine Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="GenFrequency">
			<type>frequency</type>
			<sensorId>GEN_FREQUENCY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>GEN_FREQUENCY</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Gen Frequency</label>
			<sensorSet>Frequency Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="OilPressure">
			<type>pressure</type>
			<sensorId>OIL_PRESSURE</sensorId>
			<value>
				<getOid>OIL_PRESSURE</getOid>
			</value>
			<label>Oil Pressure</label>
			<sensorSet>Oil Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="OilTemp">
			<type>temp</type>
			<sensorId>OIL_TEMP</sensorId>
			<value>
				<getOid>OIL_TEMP</getOid>
			</value>
			<label>Oil Temp</label>
			<sensorSet>Oil Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="O2Sensor">
			<type>num</type>
			<sensorId>O2_SENSOR</sensorId>
			<value>
				<getOid>O2_SENSOR</getOid>
			</value>
			<label>Oxygen Sensor</label>
			<sensorSet>Oxygen Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="ThrotPos">
			<type>num</type>
			<sensorId>THROT_POS</sensorId>
			<value>
				<getOid>THROT_POS</getOid>
			</value>
			<label>Throttle Position</label>
			<sensorSet>Throttle Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="TotalPF">
			<type>powerfactor</type>
			<sensorId>TOTAL_PF</sensorId>
			<value>
				<mult>
					<op>
						<getOid>TOTAL_PF</getOid>
					</op>
					<op>0.01</op>
				</mult>
			</value>
			<valueInc>0.01</valueInc>
			<label>Total Power Factor</label>
			<sensorSet>General Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="TotalPowerKW">
			<type>num/powerKW</type>
			<sensorId>OUTPUT_APPARENT_POWER_TOTAL</sensorId>
			<value>
				<getOid>TOTAL_POWER_KW</getOid>
			</value>
			<label>Total Power KW</label>
			<sensorSet>Power Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="VoltPhaseAB">
			<type>voltage/output/phase</type>
			<sensorId>VOLTAGE_PHASE_A_B</sensorId>
			<value>
				<getOid>VOLTAGE_PHASE_A_B</getOid>
			</value>
			<label>Voltage Phase A-B</label>
			<sensorSet>Voltage Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="VoltPhaseBC">
			<type>voltage/output/phase</type>
			<sensorId>VOLTAGE_PHASE_B_C</sensorId>
			<value>
				<getOid>VOLTAGE_PHASE_B_C</getOid>
			</value>
			<label>Voltage Phase B-C</label>
			<sensorSet>Voltage Sensors</sensorSet>
		</numSensor>

		<numSensor ruleid="VoltPhaseCA">
			<type>voltage/output/phase</type>
			<sensorId>VOLTAGE_PHASE_C_A</sensorId>
			<value>
				<getOid>VOLTAGE_PHASE_C_A</getOid>
			</value>
			<label>Voltage Phase C-A</label>
			<sensorSet>Voltage Sensors</sensorSet>
		</numSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_129">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="DI2FuelPressureStateSensor">
			<type>state</type>
			<sensorId>DI2_FUEL_PRESSURE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_129</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DI-2/Fuel Pressure Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Digital Input Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="DI3LinePowerStateSensor">
			<type>state</type>
			<sensorId>DI3_LINE_POWER_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_129</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DI-3/Line Power Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Digital Input Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="DI4GenPowerStateSensor">
			<type>state</type>
			<sensorId>DI4_GEN_POWER_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_129</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DI-4/Generator Power Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Digital Input Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenOverspeedStateSensor">
			<type>state</type>
			<sensorId>GEN_OVERSPEED_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_129</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Overspeed Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_131">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="CommonAlarmStateSensor">
			<type>state</type>
			<sensorId>COMMON_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Common Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CommonWarningStateSensor">
			<type>state</type>
			<sensorId>COMMON_WARNING_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Common Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenRunningStateSensor">
			<type>state</type>
			<sensorId>GENERATOR_RUNNING_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Running Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_running_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AlarmsEnabledStateSensor">
			<type>state</type>
			<sensorId>ALARMS_ENABLED_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Alarms Enabled Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarms_enabled_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="ReadyToRunStateSensor">
			<type>state</type>
			<sensorId>READY_TO_RUN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Ready To Run Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/ready_to_run_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenStoppedAlarmStateSensor">
			<type>state</type>
			<sensorId>GEN_STOPPED_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Stopped Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenStoppedStateSensor">
			<type>state</type>
			<sensorId>_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Stopped Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/stopped_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenInManualStateSensor">
			<type>state</type>
			<sensorId>GEN_IN_MANUAL_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator In Manual Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_manual_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenInAutoStateSensor">
			<type>state</type>
			<sensorId>GEN_IN_AUTO_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 06 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator In Auto Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_auto_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OvercrankAlarmStateSensor">
			<type>state</type>
			<sensorId>OVERCRANK_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Overcrank Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilInhibitAlarStateSensor">
			<type>state</type>
			<sensorId>OIL_INHIBIT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Inhibit Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="SpareRemoteAnnunciatorLightStateSensor">
			<type>state</type>
			<sensorId>SPARE_REMOTE_ANNUNCIATOR_LIGHT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Spare Remote Annunciator Light Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilHempHiAlarmStateSensor">
			<type>state</type>
			<sensorId>OIL_TEMP_HIGH_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_131</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Temp High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilTempLowAlarmStateSensor">
			<type>state</type>
			<sensorId>OIL_TEMP_LOW_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_131</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Temp Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_132">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="OilTempHiWarnStateSensor">
			<type>state</type>
			<sensorId>OIL_TEMP_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Temp High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilTempLowWarnStateSensor">
			<type>state</type>
			<sensorId>OIL_TEMP_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Temp Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilTempFaultStateSensor">
			<type>state</type>
			<sensorId>OIL_TEMP_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Temp Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolTempHiAlarmStateSensor">
			<type>state</type>
			<sensorId>COOL_TEMP_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Temp High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolTempLowAlarmStateSensor">
			<type>state</type>
			<sensorId>COOL_TEMP_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 11 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Temp Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolTempHiWarnStateSensor">
			<type>state</type>
			<sensorId>COOL_TEMP_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Temp High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolTempLowWarnStateSensor">
			<type>state</type>
			<sensorId>COOL_TEMP_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Temp Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolTmpFaultStateSensor">
			<type>state</type>
			<sensorId>COOL_TEMP_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Temp Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilPressHiAlarmStateSensor">
			<type>state</type>
			<sensorId>OIL_PRESSURE_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Pressure High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilPressureLowAlarmStateSensor">
			<type>state</type>
			<sensorId>OIL_PRESSURE_LOW_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 06 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Pressure Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilPressHiWarnStateSensor">
			<type>state</type>
			<sensorId>OIL_PRESSURE_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Pressure High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilPressureLowWarnStateSensor">
			<type>state</type>
			<sensorId>OIL_PRESSURE_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Pressure Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="OilPressFaultStateSensor">
			<type>state</type>
			<sensorId>OIL_PRESSURE_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oil Pressure Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oil Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolLvlHiAlarmStateSensor">
			<type>state</type>
			<sensorId>COOL_LVL_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Level High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolLvlLowAlarmStateSensor">
			<type>state</type>
			<sensorId>COOL_LVL_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_132</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Level Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolLvlHiWarnStateSensor">
			<type>state</type>
			<sensorId>COOL_LVL_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_132</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Level High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_133">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="CoolLvlLoWarnStateSensor">
			<type>state</type>
			<sensorId>COOL_LVL_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_133</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Level Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CoolLvlFaultStateSensor">
			<type>state</type>
			<sensorId>COOL_LVL_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_133</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Coolant Level Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Coolant Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GovPosHiAlarmStateSensor">
			<type>state</type>
			<sensorId>THROTTLE_POS_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_133</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Throttle Position High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Throttle Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GovPosLowAlarmStateSensor">
			<type>state</type>
			<sensorId>THROTTLE_POS_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_133</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Throttle Position Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Throttle Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GovPosHiWarnStateSensor">
			<type>state</type>
			<sensorId>THROTTLE_POS_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_133</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Throttle Position High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Throttle Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GovPosLowWarnStateSensor">
			<type>state</type>
			<sensorId>THROTTLE_POS_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_133</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Throttle Position Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Throttle Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_134">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="GovPosFaultStateSensor">
			<type>state</type>
			<sensorId>THROTTLE_POS_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Throttle Position Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Throttle Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="O2HiAlarmStateSensor">
			<type>state</type>
			<sensorId>O2_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oxygen Sensor High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oxygen Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="O2LowAlarmStateSensor">
			<type>state</type>
			<sensorId>O2_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oxygen Sensor Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oxygen Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="O2HiWarnStateSensor">
			<type>state</type>
			<sensorId>O2_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oxygen Sensor High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oxygen Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="O2LowWarnStateSensor">
			<type>state</type>
			<sensorId>O2_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 11 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oxygen Sensor Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Oxygen Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="O2FaultStateSensor">
			<type>state</type>
			<sensorId>O2_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Oxygen Sensor Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Oxygen Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargerCurrentHiAlarmStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGER_CURRENT_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Current High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargerCurrentLowAlarmStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGER_CURRENT_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Current Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargerCurrentHiWarnStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGER_CURRENT_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Current High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargerCurrentLowWarnStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGER_CURRENT_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 06 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Current Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargerCurrentFaultStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGER_CURRENT_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Current Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattVoltageHiAlarmStateSensor">
			<type>state</type>
			<sensorId>BATT_VOLTAGE_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Voltage High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattVoltageLowAlarmStateSensor">
			<type>state</type>
			<sensorId>BATT_VOLTAGE_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Voltage Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattVoltageHiWarnStateSensor">
			<type>state</type>
			<sensorId>BATT_VOLTAGE_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Voltage High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattVoltageLowWarnStateSensor">
			<type>state</type>
			<sensorId>BATT_VOLTAGE_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_134</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Voltage Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveCurrentHiAlarmStateSensor">
			<type>state</type>
			<sensorId>AVE_CURRENT_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_134</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Current High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Current Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_135">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="AveCurrentLowAlarmStateSensor">
			<type>state</type>
			<sensorId>AVE_CURRENT_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Current Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Current Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveCurrentHiWarnStateSensor">
			<type>state</type>
			<sensorId>AVE_CURRENT_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Current High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Current Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveCurrentLowWarnStateSensor">
			<type>state</type>
			<sensorId>AVE_CURRENT_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Current Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Current Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveVoltHiAlarmStateSensor">
			<type>state</type>
			<sensorId>AVE_VOLT_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Voltage High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Voltage Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveVoltLowAlarmStateSensor">
			<type>state</type>
			<sensorId>AVE_VOLT_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 11 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Voltage Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Voltage Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveVoltHiWarnStateSensor">
			<type>state</type>
			<sensorId>AVE_VOLT_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Voltage High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Voltage Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="AveVoltLowWarnStateSensor">
			<type>state</type>
			<sensorId>AVE_VOLT_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Average Voltage Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Voltage Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="TotPwrHiAlarmStateSensor">
			<type>state</type>
			<sensorId>TOTAL_POWER_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Total Power High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="TotPwrLowAlarmStateSensor">
			<type>state</type>
			<sensorId>TOTAL_POWER_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Total Power Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="TotPwrHiWarnStateSensor">
			<type>state</type>
			<sensorId>TOTAL_POWER_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 06 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Total Power High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="TotPwrLowWarnStateSensor">
			<type>state</type>
			<sensorId>TOTAL_POWER_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Total Power Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenFreqHiAlarmStateSensor">
			<type>state</type>
			<sensorId>GEN_FREQ_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Frequency Hi Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Frequency Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenFreqLowAlarmStateSensor">
			<type>state</type>
			<sensorId>GEN_FREQ_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Frequency Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Frequency Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenFreqHiWarnStateSensor">
			<type>state</type>
			<sensorId>GEN_FREQ_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Frequency High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Frequency Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenFreqLowWarnStateSensor">
			<type>state</type>
			<sensorId>GEN_FREQ_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_135</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Frequency Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Frequency Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenFreqFaultStateSensor">
			<type>state</type>
			<sensorId>GEN_FREQ_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_135</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Frequency Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Frequency Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_136">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>
		<stateSensor ruleid="EngRpmHiAlarmStateSensor">
			<type>state</type>
			<sensorId>ENGINE_RPM_HI_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine RPM High Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="EngRpmLowAlarmStateSensor">
			<type>state</type>
			<sensorId>ENGINE_RPM_LOW_ALARM_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 14 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine RPM Low Alarm Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="EngRpmHiWarnStateSensor">
			<type>state</type>
			<sensorId>ENGINE_RPM_HI_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine RPM High Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="EngRpmLowWarnStateSensor">
			<type>state</type>
			<sensorId>ENGINE_RPM_LOW_WARN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine RPM Low Warning Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="EngRpmFaultStateSensor">
			<type>state</type>
			<sensorId>ENGINE_RPM_FAULT_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 11 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Engine RPM Fault Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="SwitchInAutoStateSensor">
			<type>state</type>
			<sensorId>SWITCH_IN_AUTO_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 10 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Key Switch In Auto Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_auto_status_em</enum>
			<sensorSet>Switch Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="SwitchInManualStateSensor">
			<type>state</type>
			<sensorId>SWITCH_IN_MANUAL_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 9 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Key Switch In Manual Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_manual_status_em</enum>
			<sensorSet>Switch Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="EStopActiveStateSensor">
			<type>state</type>
			<sensorId>EMERGENCY_STOP_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Emergency Stop Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/e_stop_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="RemoteStarterActiveStateSensor">
			<type>state</type>
			<sensorId>REMOTE_STARTER_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Remote Starter Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="BattChargeFailStateSensor">
			<type>state</type>
			<sensorId>BATT_CHARGE_FAIL_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 06 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Battery Charger Failed Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Battery Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="LowFuelPressureActiveStateSensor">
			<type>state</type>
			<sensorId>LOW_FUEL_PRESSURE_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Low Fuel Pressure Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="DI3LinePwrActiveStateSensor">
			<type>state</type>
			<sensorId>DI_3_LINE_POWER_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DI-3/Line Power Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Digital Input Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="DI4GenPowerActiveStateSensor">
			<type>state</type>
			<sensorId>DI_4_GEN_POWER_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 03 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DI-4/Generator Power Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Digital Input Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="LinePowerStateSensor">
			<type>state</type>
			<sensorId>LINE_POWER_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 02 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Line Power Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="GenPowerStateSensor">
			<type>state</type>
			<sensorId>GEN_POWER_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 01 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_136</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Generator Power Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Power Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="IlcAlarmWarning1StateSensor">
			<type>state</type>
			<sensorId>ILC_ALARM_WARNING_1_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 00 -->
						<bitwise_and>
							<op>
								<getOid>REGISTER_136</getOid>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ILC Alarm/Warn #1 Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>ILC Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_137">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="IlcAlarmWarning2StateSensor">
			<type>state</type>
			<sensorId>ILC_ALARM_WARNING_2_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 15 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ILC Alarm/Warn #2 Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>ILC Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="InCoolDownStateSensor">
			<type>state</type>
			<sensorId>IN_COOL_DOWN_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 13 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>In Cool Down Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_cooldown_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CrankingStateSensor">
			<type>state</type>
			<sensorId>CRANKING_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 12 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Cranking (Starter engaged) Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="NeedServiceStateSensor">
			<type>state</type>
			<sensorId>NEED_SERVICE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 11 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Need Service Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/need_service_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CheckVoltagePhaseRotationStateSensor">
			<type>state</type>
			<sensorId>CHECK_VOLTAGE_PHASE_ROTATION_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Check Voltage Phase Rotation Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Voltage Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="CheckCurrentPhaseRotationStateSensor">
			<type>state</type>
			<sensorId>CHECK_CURRENT_PHASE_ROTATION_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Check Current Phase Rotation Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Current Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="FaultyRelayActiveStateSensor">
			<type>state</type>
			<sensorId>FAULTY_RELAY_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 07 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Faulty Relay Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="InternalExerciseActiveStateSensor">
			<type>state</type>
			<sensorId>INTERNAL_EXERCISE_ACTIVE_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 05 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Internal Exercise Active Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="IlcNotRunningStateSensor">
			<type>state</type>
			<sensorId>ILC_NOT_RUNNING_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-Reversed-vm">
					<formatNumber>
						<!-- Determined by bit 04 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_137</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Check for ILC (Not Running) Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>ILC Sensors</sensorSet>
		</stateSensor>
	</device>

	<device deviceid="generac_sd100_h_panel_generator_state_sensors_reg_138">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<stateSensor ruleid="RPMMissingStateSensor">
			<type>state</type>
			<sensorId>RPM_MISSING_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 09 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_138</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>RPM Signal Missing Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>Engine Sensors</sensorSet>
		</stateSensor>

		<stateSensor ruleid="ResetAlarmsStateSensor">
			<type>state</type>
			<sensorId>RESET_ALARMS_STATUS</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber>
						<!-- Determined by bit 08 -->
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REGISTER_138</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Reset Alarms Status</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/alarm_status_em</enum>
			<sensorSet>General Sensors</sensorSet>
		</stateSensor>
		<!-- Additional sensor set start-->	
		<numSensor ruleid="a/f_duty_cycle">
			<type>num</type>
			<units />
			<sensorId>_A/F_DUTY_CYCLE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>AF_DUTY_CYCLE</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>A/F DUTY CYCLE</label>
			<sensorSet>Cycle</sensorSet>
		</numSensor>
		<stateSensor ruleid="auto_switch">
			<type>state</type>
			<sensorId>_AUTO_SWITCH</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>AUTO_SWITCH</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>AUTO SWITCH</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_auto_status_em</enum>
			<sensorSet>Switch</sensorSet>
		</stateSensor>
		<stateSensor ruleid="manual_switch">
			<type>state</type>
			<sensorId>_MANUAL_SWITCH</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MANUAL_SWITCH</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>MANUAL SWITCH</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_manual_status_em</enum>
			<sensorSet>Switch</sensorSet>
		</stateSensor>
		<stateSensor ruleid="emergency_stop">
			<type>state</type>
			<sensorId>_EMERGENCY_STOP</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>EMERGENCY_STOP</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>EMERGENCY STOP</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_off_status_em</enum>
			<sensorSet>Stop</sensorSet>
		</stateSensor>
		<stateSensor ruleid="remote_start">
			<type>state</type>
			<sensorId>_REMOTE_START</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>REMOTE_START</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>REMOTE START</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_off_status_em</enum>
			<sensorSet>Start</sensorSet>
		</stateSensor>
		<stateSensor ruleid="bat_chrgr_fail">
			<type>state</type>
			<sensorId>_BAT_CHRGR_FAIL</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>BAT_CHRGR_FAIL</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>BAT CHRGR FAIL</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>Gat</sensorSet>
		</stateSensor>
		<stateSensor ruleid="modem_dcd">
			<type>state</type>
			<sensorId>_MODEM_DCD</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MODEM_DCD</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>MODEM DCD</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_off_status_em</enum>
			<sensorSet>Modem</sensorSet>
		</stateSensor>
		<stateSensor ruleid="modem_enabled">
			<type>state</type>
			<sensorId>_MODEM_ENABLED</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>MODEM_ENABLED</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>MODEM ENABLED</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>Modem</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_1_cfg_12">
			<type>state</type>
			<sensorId>_HUIO_1_CFG_12</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_1_CFG_12</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 1 CFG 12</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_1_cfg_13">
			<type>state</type>
			<sensorId>_HUIO_1_CFG_13</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_1_CFG_13</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 1 CFG 13</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_1_cfg_14">
			<type>state</type>
			<sensorId>_HUIO_1_CFG_14</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_1_CFG_14</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 1 CFG 14</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_1_cfg_15">
			<type>state</type>
			<sensorId>_HUIO_1_CFG_15</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_1_CFG_15</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 1 CFG 15</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_2_cfg_16">
			<type>state</type>
			<sensorId>_HUIO_2_CFG_16</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_2_CFG_16</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 2 CFG 16</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_2_cfg_17">
			<type>state</type>
			<sensorId>_HUIO_2_CFG_17</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_2_CFG_17</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 2 CFG 17</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_2_cfg_18">
			<type>state</type>
			<sensorId>_HUIO_2_CFG_18</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_2_CFG_18</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 2 CFG 18</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_2_cfg_19">
			<type>state</type>
			<sensorId>_HUIO_2_CFG_19</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_2_CFG_19</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 2 CFG 19</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_3_cfg_20">
			<type>state</type>
			<sensorId>_HUIO_3_CFG_20</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_3_CFG_20</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 3 CFG 20</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_3_cfg_21">
			<type>state</type>
			<sensorId>_HUIO_3_CFG_21</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_3_CFG_21</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 3 CFG 21</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_3_cfg_22">
			<type>state</type>
			<sensorId>_HUIO_3_CFG_22</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_3_CFG_22</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 3 CFG 22</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_3_cfg_23">
			<type>state</type>
			<sensorId>_HUIO_3_CFG_23</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_3_CFG_23</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 3 CFG 23</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_4_cfg_24">
			<type>state</type>
			<sensorId>_HUIO_4_CFG_24</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_4_CFG_24</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 4 CFG 24</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_4_cfg_25">
			<type>state</type>
			<sensorId>_HUIO_4_CFG_25</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_4_CFG_25</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 4 CFG 25</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_4_cfg_26">
			<type>state</type>
			<sensorId>_HUIO_4_CFG_26</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_4_CFG_26</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 4 CFG 26</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="huio_4_cfg_27">
			<type>state</type>
			<sensorId>_HUIO_4_CFG_27</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>HUIO_4_CFG_27</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>HUIO 4 CFG 27</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>CFG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ready_for_load">
			<type>state</type>
			<sensorId>_READY_FOR_LOAD</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>READY_FOR_LOAD</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>READY FOR LOAD</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>LOAD</sensorSet>
		</stateSensor>
		<stateSensor ruleid="gen_in_off">
			<type>state</type>
			<sensorId>_GEN_IN_OFF</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>GEN_IN_OFF</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>GEN IN OFF</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_in_off_status_em</enum>
			<sensorSet>Ge</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_5_hi_alrm">
			<type>state</type>
			<sensorId>_ANALOG_5_HI_ALRM</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_5_HI_ALRM</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 5 HI ALRM</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_5_lo_alrm">
			<type>state</type>
			<sensorId>_ANALOG_5_LO_ALRM</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_5_LO_ALRM</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 5 LO ALRM</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_5_hi_warn">
			<type>state</type>
			<sensorId>_ANALOG_5_HI_WARN</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_5_HI_WARN</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 5 HI WARN</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_5_lo_warn">
			<type>state</type>
			<sensorId>_ANALOG_5_LO_WARN</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_5_LO_WARN</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 5 LO WARN</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_5_fault">
			<type>state</type>
			<sensorId>_ANALOG_5_FAULT</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_5_FAULT</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 5 FAULT</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/need_service_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_6_hi_alrm">
			<type>state</type>
			<sensorId>_ANALOG_6_HI_ALRM</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_6_HI_ALRM</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 6 HI ALRM</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_6_lo_alrm">
			<type>state</type>
			<sensorId>_ANALOG_6_LO_ALRM</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_6_LO_ALRM</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 6 LO ALRM</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/active_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_6_hi_warn">
			<type>state</type>
			<sensorId>_ANALOG_6_HI_WARN</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_6_HI_WARN</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 6 HI WARN</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_6_lo_warn">
			<type>state</type>
			<sensorId>_ANALOG_6_LO_WARN</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_6_LO_WARN</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 6 LO WARN</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/warning_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="analog_6_fault">
			<type>state</type>
			<sensorId>_ANALOG_6_FAULT</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>ANALOG_6_FAULT</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>ANALOG 6 FAULT</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/need_service_status_em</enum>
			<sensorSet>ANALOG</sensorSet>
		</stateSensor>
		<stateSensor ruleid="gov_pos_fault">
			<type>state</type>
			<sensorId>_GOV_POS_FAULT</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>GOV_POS_FAULT</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>GOV POS FAULT</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/need_service_status_em</enum>
			<sensorSet>FAULT</sensorSet>
		</stateSensor>
		<stateSensor ruleid="in_warm_up">
			<type>state</type>
			<sensorId>_IN_WARM_UP</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>IN_WARM_UP</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>IN WARM UP</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/gen_running_status_em</enum>
			<sensorSet>WARM</sensorSet>
		</stateSensor>
		<stateSensor ruleid="shutdown_genset">
			<type>state</type>
			<sensorId>_SHUTDOWN_GENSET</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>SHUTDOWN_GENSET</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>SHUTDOWN GENSET</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/ready_to_run_status_em</enum>
			<sensorSet>GENSET</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_106">
			<type>state</type>
			<sensorId>_USR_CONFIG_106</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_106</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 106</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_109">
			<type>state</type>
			<sensorId>_USR_CONFIG_109</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_109</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 109</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_110">
			<type>state</type>
			<sensorId>_USR_CONFIG_110</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_110</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 110</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_111">
			<type>state</type>
			<sensorId>_USR_CONFIG_111</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_111</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 111</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_112">
			<type>state</type>
			<sensorId>_USR_CONFIG_112</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_112</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 112</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_113">
			<type>state</type>
			<sensorId>_USR_CONFIG_113</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_113</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 113</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_114">
			<type>state</type>
			<sensorId>_USR_CONFIG_114</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_114</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 114</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_115">
			<type>state</type>
			<sensorId>_USR_CONFIG_115</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_115</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 115</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_116">
			<type>state</type>
			<sensorId>_USR_CONFIG_116</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_116</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 116</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_117">
			<type>state</type>
			<sensorId>_USR_CONFIG_117</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_117</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 117</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>
		<stateSensor ruleid="usr_config_118">
			<type>state</type>
			<sensorId>_USR_CONFIG_118</sensorId>
			<value>
				<mapValue mapid="generac_sd100_h_panel_generator_maps_enums/StateSensor-vm">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>USR_CONFIG_118</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>USR CONFIG 118</label>
			<enum>generac_sd100_h_panel_generator_maps_enums/true_false_em</enum>
			<sensorSet>USR</sensorSet>
		</stateSensor>


		<!-- End of Additional sensor set-->	


	</device>

	<device deviceid="generac_sd100_h_panel_generator_maps_enums">
		<oidMustExist oid="MODBUS_OID_MUST_EXIST" ruleid="OIDMustExist_modbusdevicetest"/>

		<!-- State sensor value map where 0 = Normal condition, 1 = alarm condition  -->
		<valueMap ruleid="StateSensor-vm">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>2</valueOut>
		</valueMap>

		<!-- State sensor value map where 1 = Normal condition, 0 = alarm condition  -->
		<valueMap ruleid="StateSensor-Reversed-vm">
			<valueIn>0</valueIn>
			<valueOut>1</valueOut>
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>*</valueIn>
			<valueOut>2</valueOut>
		</valueMap>

		<!-- All enum maps are 0 = Normal condition, 1 = alarm condition.  Value maps will swap if necessary -->
		<enumMap ruleid="e_stop_status_em">
			<label>Normal</label>
			<label>Stopped</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="stopped_status_em">
			<label>Not Stopped</label>
			<label>Stopped</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="alarms_enabled_status_em">
			<label>Disabled</label>
			<label>Enabled</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="ready_to_run_status_em">
			<label>Not Ready To Run</label>
			<label>Ready To Run</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="gen_in_auto_status_em">
			<label>In Auto</label>
			<label>Not In Auto</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="gen_in_manual_status_em">
			<label>In Manual</label>
			<label>Not In Manual</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="gen_in_off_status_em">
			<label>In Off</label>
			<label>Not In Off</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="gen_in_cooldown_status_em">
			<label>In Cooldown</label>
			<label>Not In Cooldown</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="gen_running_status_em">
			<label>Standby</label>
			<label>Running</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="need_service_status_em">
			<label>Normal</label>
			<label>Need Service</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="alarm_status_em">
			<label>Normal</label>
			<label>Alarm</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="active_status_em">
			<label>Inactive</label>
			<label>Active</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="warning_status_em">
			<label>Normal</label>
			<label>Warning</label>
			<label>Unknown</label>
		</enumMap>

		<enumMap ruleid="true_false_em">
			<label>False</label>
			<label>True</label>
			<label>Unknown</label>
		</enumMap>


	</device>
	<protocol>
		<modbus>
			<!-- State registers -->
			<value_ref_id valid="REGISTER_129">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_130">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_131">
				<function>3</function>
				<start_addr>130</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_132">
				<function>3</function>
				<start_addr>131</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_133">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_134">
				<function>3</function>
				<start_addr>133</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_135">
				<function>3</function>
				<start_addr>134</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_136">
				<function>3</function>
				<start_addr>135</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_137">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REGISTER_138">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<!-- Num registers -->
			<value_ref_id valid="OIL_TEMP">
				<function>3</function>
				<start_addr>139</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLANT_TEMP">
				<function>3</function>
				<start_addr>141</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="OIL_PRESSURE">
				<function>3</function>
				<start_addr>143</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="COOLANT_LEVEL">
				<function>3</function>
				<start_addr>145</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USER_CFG_05">
				<function>3</function>
				<start_addr>147</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USER_CFG_06">
				<function>3</function>
				<start_addr>149</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="THROT_POS">
				<function>3</function>
				<start_addr>151</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="O2_SENSOR">
				<function>3</function>
				<start_addr>153</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BAT_CHARGE_CURRENT">
				<function>3</function>
				<start_addr>155</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BATTERY_VOLTS">
				<function>3</function>
				<start_addr>157</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="CURRENT_PHASE_A">
				<function>3</function>
				<start_addr>159</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="CURRENT_PHASE_B">
				<function>3</function>
				<start_addr>161</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="CURRENT_PHASE_C">
				<function>3</function>
				<start_addr>163</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="AVG_CURRENT">
				<function>3</function>
				<start_addr>165</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="VOLTAGE_PHASE_A_B">
				<function>3</function>
				<start_addr>167</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="VOLTAGE_PHASE_B_C">
				<function>3</function>
				<start_addr>169</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="VOLTAGE_PHASE_C_A">
				<function>3</function>
				<start_addr>171</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="AVG_VOLTAGE">
				<function>3</function>
				<start_addr>173</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TOTAL_POWER_KW">
				<function>3</function>
				<start_addr>175</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="TOTAL_PF">
				<function>3</function>
				<start_addr>177</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="GEN_FREQUENCY">
				<function>3</function>
				<start_addr>179</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ENGINE_RPM">
				<function>3</function>
				<start_addr>181</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="ENGINE_HOURS_NOW">
				<function>3</function>
				<start_addr>303</start_addr>
				<quantity>2</quantity>
				<type>uint_32</type>
			</value_ref_id>

			<packet>
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>10</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>139</start_addr>
				<quantity>46</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>303</start_addr>
				<quantity>2</quantity>
			</packet>

			<!--Start of additional sensors -->
			<value_ref_id valid="IN_WARM_UP">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_1_CFG_12">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_113">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_116">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="READY_FOR_LOAD">
				<function>3</function>
				<start_addr>130</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="AF_DUTY_CYCLE">
				<function>3</function>
				<start_addr>183</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="GOV_POS_FAULT">
				<function>3</function>
				<start_addr>133</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_6_LO_WARN">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_2_CFG_19">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_111">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_4_CFG_25">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_6_HI_ALRM">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_5_FAULT">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_2_CFG_17">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_3_CFG_20">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_4_CFG_27">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_115">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_4_CFG_24">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_118">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_3_CFG_23">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_5_LO_ALRM">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_5_HI_WARN">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_1_CFG_15">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_110">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MANUAL_SWITCH">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_6_FAULT">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_2_CFG_16">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_3_CFG_21">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MODEM_DCD">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_5_LO_WARN">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_5_HI_ALRM">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_2_CFG_18">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_1_CFG_14">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="BAT_CHRGR_FAIL">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="GEN_IN_OFF">
				<function>3</function>
				<start_addr>130</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="MODEM_ENABLED">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_114">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_117">
				<function>3</function>
				<start_addr>137</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="EMERGENCY_STOP">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="AUTO_SWITCH">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_112">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_1_CFG_13">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="SHUTDOWN_GENSET">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_4_CFG_26">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="REMOTE_START">
				<function>3</function>
				<start_addr>128</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="ANALOG_6_LO_ALRM">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_106">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="USR_CONFIG_109">
				<function>3</function>
				<start_addr>136</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="ANALOG_6_HI_WARN">
				<function>3</function>
				<start_addr>132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="HUIO_3_CFG_22">
				<function>3</function>
				<start_addr>129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>


			<!--End of additional sensors -->
		</modbus>
	</protocol>
</APC_DDF>
