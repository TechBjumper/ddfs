<?xml version="1.0" encoding="UTF-8"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="emerson_liebert_nxr160"
	ddfname="Emerson LiebertNXr160"
	ddfversion="1"
	canremove="yes">
  <schemaVersion>1.6</schemaVersion>
  <device deviceid="Emerson_LiebertNXr160">
    <setProductData ruleid="vendordata" field="vendor">Emerson</setProductData>
    <setProductData ruleid="modeldata" field="model">Liebert NXr 160</setProductData>
    <setProductData ruleid="typedata" field="type">UPS</setProductData>
    <numSensor ruleid="input_phase_voltage_a">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_PHASE_VOLTAGE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1050</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase voltage A</label>
      <sensorSet>Input Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_phase_voltage_b">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_PHASE_VOLTAGE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1051</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase voltage B</label>
      <sensorSet>Input Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_phase_voltage_c">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_PHASE_VOLTAGE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1052</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase voltage C</label>
      <sensorSet>Input Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_voltage_a">
      <type>voltage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_VOLTAGE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1053</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase voltage A</label>
      <sensorSet>Output Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_voltage_b">
      <type>voltage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_VOLTAGE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1054</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase voltage B</label>
      <sensorSet>Output Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_voltage_c">
      <type>voltage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_VOLTAGE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1055</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase voltage C</label>
      <sensorSet>Output Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_current_a">
      <type>amperage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_CURRENT_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1056</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase current A</label>
      <sensorSet>Output Current</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_current_b">
      <type>amperage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_CURRENT_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1057</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase current B</label>
      <sensorSet>Output Current</sensorSet>
    </numSensor>
    <numSensor ruleid="output_phase_current_c">
      <type>amperage</type>
      <units />
      <sensorId>_OUTPUT_PHASE_CURRENT_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1058</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output phase current C</label>
      <sensorSet>Output Current</sensorSet>
    </numSensor>
    <numSensor ruleid="dc_input_voltage_(battery_1_voltage)">
      <type>voltage</type>
      <units />
      <sensorId>_DC_INPUT_VOLTAGE_(BATTERY_1_VOLTAGE)</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1059</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Dc input voltage (battery 1 voltage)</label>
      <sensorSet>Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="output_frequency_(consistency_in_three_phases)">
      <type>frequency</type>
      <units />
      <sensorId>_OUTPUT_FREQUENCY_(CONSISTENCY_IN_THREE_PHASES)</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1060</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Output frequency (consistency in three phases)</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="input_cable_voltage_ab">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_CABLE_VOLTAGE_AB</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1061</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input cable voltage ab</label>
      <sensorSet>Input Cable Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_cable_voltage_bc">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_CABLE_VOLTAGE_BC</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1062</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input cable voltage bc</label>
      <sensorSet>Input Cable Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_cable_voltage_ca">
      <type>voltage</type>
      <units />
      <sensorId>_INPUT_CABLE_VOLTAGE_CA</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1063</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input cable voltage ca</label>
      <sensorSet>Input Cable Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="input_phase_current_a">
      <type>amperage</type>
      <units />
      <sensorId>_INPUT_PHASE_CURRENT_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1064</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase current A</label>
      <sensorSet>Input Phase Current</sensorSet>
    </numSensor>
    <numSensor ruleid="input_phase_current_b">
      <type>amperage</type>
      <units />
      <sensorId>_INPUT_PHASE_CURRENT_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1065</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase current B</label>
      <sensorSet>Input Phase Current</sensorSet>
    </numSensor>
    <numSensor ruleid="input_phase_current_c">
      <type>amperage</type>
      <units />
      <sensorId>_INPUT_PHASE_CURRENT_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1066</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input phase current C</label>
      <sensorSet>Input Phase Current</sensorSet>
    </numSensor>
    <numSensor ruleid="input_frequency_(consistency_in_three_phases">
      <type>frequency</type>
      <units />
      <sensorId>_INPUT_FREQUENCY_(CONSISTENCY_IN_THREE_PHASES</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1067</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Input frequency (consistency in three phases</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_input_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_A_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1068</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase a input power factor</label>
      <sensorSet>Input Power factor</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_input_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_B_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1069</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase b input power factor</label>
      <sensorSet>Input Power factor</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_input_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_C_INPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1070</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase c input power factor</label>
      <sensorSet>Input Power factor</sensorSet>
    </numSensor>
    <numSensor ruleid="bypass_phase_voltage_a">
      <type>voltage</type>
      <units />
      <sensorId>_BYPASS_PHASE_VOLTAGE_A</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1071</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Bypass phase voltage A</label>
      <sensorSet>Bypass Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="bypass_phase_voltage_b">
      <type>voltage</type>
      <units />
      <sensorId>_BYPASS_PHASE_VOLTAGE_B</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1072</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Bypass phase voltage B</label>
      <sensorSet>Bypass Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="bypass_phase_voltage_c">
      <type>voltage</type>
      <units />
      <sensorId>_BYPASS_PHASE_VOLTAGE_C</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1073</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Bypass phase voltage C</label>
      <sensorSet>Bypass Phase Voltage</sensorSet>
    </numSensor>
    <numSensor ruleid="bypass_frequency">
      <type>frequency</type>
      <units />
      <sensorId>_BYPASS_FREQUENCY</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1074</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Bypass frequency</label>
      <sensorSet>Frequency</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1075</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase A output power factor</label>
      <sensorSet>Output Power Factor</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1076</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase B output power factor</label>
      <sensorSet>Output Power Factor</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_power_factor">
      <type>num/powerfactor</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_POWER_FACTOR</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1077</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase C output power factor</label>
      <sensorSet>Output Power Factor</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_peak_ratio">
      <type>num</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_PEAK_RATIO</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1078</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase A output peak ratio</label>
      <sensorSet>Output Peak Ratio</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_peak_ratio">
      <type>num</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_PEAK_RATIO</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1079</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase B output peak ratio</label>
      <sensorSet>Output Peak Ratio</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_peak_ratio">
      <type>num</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_PEAK_RATIO</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1080</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase C output peak ratio</label>
      <sensorSet>Output Peak Ratio</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1081</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase A output active power</label>
      <sensorSet>Output Active Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1082</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase B output active power</label>
      <sensorSet>Output Active Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_active_power">
      <type>num/powerKW</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_ACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1083</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase C output active power</label>
      <sensorSet>Output Active Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_reactive_power">
      <type>num/powerKVAR</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1084</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase A output reactive power</label>
      <sensorSet>Output Reactive Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_reactive_power">
      <type>num/powerKVAR</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1085</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase B output reactive power</label>
      <sensorSet>Output Reactive Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_reactive_power">
      <type>num/powerKVAR</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_REACTIVE_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1086</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase C output reactive power</label>
      <sensorSet>Output Reactive Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_a_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_PHASE_A_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1087</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase A output apparent power</label>
      <sensorSet>Output Apparent Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_b_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_PHASE_B_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1088</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase B output apparent power</label>
      <sensorSet>Output Apparent Power</sensorSet>
    </numSensor>
    <numSensor ruleid="phase_c_output_apparent_power">
      <type>num/powerKVA</type>
      <units />
      <sensorId>_PHASE_C_OUTPUT_APPARENT_POWER</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1089</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Phase C output apparent power</label>
      <sensorSet>Output Apparent Power</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_backup_time">
      <type>timeinmin</type>
      <units />
      <sensorId>_BATTERY_BACKUP_TIME</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1090</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery backup time</label>
      <sensorSet>Time</sensorSet>
    </numSensor>
    <numSensor ruleid="positive_battery_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_POSITIVE_BATTERY_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1091</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Positive battery voltage</label>
      <sensorSet>Possitive Battery</sensorSet>
    </numSensor>
    <numSensor ruleid="positive_battery_current">
      <type>amperage</type>
      <units />
      <sensorId>_POSITIVE_BATTERY_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1092</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Positive battery current</label>
      <sensorSet>Possitive Battery</sensorSet>
    </numSensor>
    <numSensor ruleid="negative_battery_voltage">
      <type>voltage</type>
      <units />
      <sensorId>_NEGATIVE_BATTERY_VOLTAGE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1093</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Negative battery voltage</label>
      <sensorSet>Negative Battery</sensorSet>
    </numSensor>
    <numSensor ruleid="negative_battery_current">
      <type>amperage</type>
      <units />
      <sensorId>_NEGATIVE_BATTERY_CURRENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1094</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Negative battery current</label>
      <sensorSet>Negative Battery</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_aging_coefficient">
      <type>num</type>
      <units />
      <sensorId>_BATTERY_AGING_COEFFICIENT</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1095</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery aging coefficient</label>
      <sensorSet>Battery</sensorSet>
    </numSensor>
    <numSensor ruleid="battery_temperature">
      <type>temp</type>
      <units />
      <sensorId>_BATTERY_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1096</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Battery temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <numSensor ruleid="environmental_temperature">
      <type>temp</type>
      <units />
      <sensorId>_ENVIRONMENTAL_TEMPERATURE</sensorId>
      <value>
        <mult>
          <op>
            <getOid>Function_3_Reg_1097</getOid>
          </op>
          <op>1</op>
        </mult>
      </value>
      <label>Environmental temperature</label>
      <sensorSet>Temperature</sensorSet>
    </numSensor>
    <oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST" />
    
	<stateSensor ruleid="ups_general_alarm_flag_bit">
      <type>state</type>
      <sensorId>_UPS_GENERAL_ALARM_FLAG_BIT</sensorId>
      <value>
        <mapValue mapid="normal_alarm_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Ups general alarm flag bit</label>
      <enum>normal_alarm_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="modbus_card/dry_contractor_card_communication_failure_flag_bit">
      <type>state</type>
      <sensorId>_MODBUS_CARD/DRY_CONTRACTOR_CARD_COMMUNICATION_FAILURE_FLAG_BIT</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Modbus card/dry contractor card communication failure flag bit</label>
      <enum>normal_failure_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_synchronous/asynchronous">
      <type>state</type>
      <sensorId>_INVERTER_SYNCHRONOUS/ASYNCHRONOUS</sensorId>
      <value>
        <mapValue mapid="sync_async_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter synchronous/asynchronous</label>
      <enum>sync_async_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="mains_voltage">
      <type>state</type>
      <sensorId>_MAINS_VOLTAGE</sensorId>
      <value>
        <mapValue mapid="sync_async_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>4</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Mains voltage</label>
      <enum>sync_async_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_status">
      <type>state</type>
      <sensorId>_RECTIFIER_STATUS</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier status</label>
      <enum>normal_failure_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="inverter_status">
      <type>state</type>
      <sensorId>_INVERTER_STATUS</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>6</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Inverter status</label>
      <enum>normal_failure_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="bypass_conditions_(voltage_or_frequency)">
      <type>state</type>
      <sensorId>_BYPASS_CONDITIONS_(VOLTAGE_OR_FREQUENCY)</sensorId>
      <value>
        <mapValue mapid="normal_excess_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Bypass conditions (voltage or frequency)</label>
      <enum>normal_excess_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_2_converter_over-temperature">
      <type>state</type>
      <sensorId>_BATTERY_2_CONVERTER_OVER-TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="normal_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 2 converter over-temperature</label>
      <enum>normal_overtemp_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_charger_failure">
      <type>state</type>
      <sensorId>_BATTERY_1_CHARGER_FAILURE</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>1</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 charger failure</label>
      <enum>normal_failure_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_2_charger_failure">
      <type>state</type>
      <sensorId>_BATTERY_2_CHARGER_FAILURE</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>2</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 2 charger failure</label>
      <enum>normal_failure_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_temperature_over-high-1">
      <type>state</type>
      <sensorId>_BATTERY_1_TEMPERATURE_OVER-HIGH-1</sensorId>
      <value>
        <mapValue mapid="normal_overhigh_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>7</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 temperature over-high-1</label>
      <enum>normal_overhigh_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_temperature_over-high-2">
      <type>state</type>
      <sensorId>_BATTERY_1_TEMPERATURE_OVER-HIGH-2</sensorId>
      <value>
        <mapValue mapid="normal_overhigh_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 temperature over-high-2</label>
      <enum>normal_overhigh_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_grounding_failure-1">
      <type>state</type>
      <sensorId>_BATTERY_1_GROUNDING_FAILURE-1</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>9</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 grounding failure-1</label>
      <enum>normal_overhigh_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_grounding_failure-2">
      <type>state</type>
      <sensorId>_BATTERY_1_GROUNDING_FAILURE-2</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>10</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 grounding failure-2</label>
      <enum>normal_failure_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="master_channel_frequency_abnormal">
      <type>state</type>
      <sensorId>_MASTER_CHANNEL_FREQUENCY_ABNORMAL</sensorId>
      <value>
        <mapValue mapid="normal_excess_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>11</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Master channel frequency abnormal</label>
      <enum>normal_excess_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="balance_inductor_over-temperature">
      <type>state</type>
      <sensorId>_BALANCE_INDUCTOR_OVER-TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="normal_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>12</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Balance inductor over-temperature</label>
      <enum>normal_overtemp_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="input_inductor_over-temperature">
      <type>state</type>
      <sensorId>_INPUT_INDUCTOR_OVER-TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="normal_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>13</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Input inductor over-temperature</label>
      <enum>normal_overtemp_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="rectifier_over-temperature">
      <type>state</type>
      <sensorId>_RECTIFIER_OVER-TEMPERATURE</sensorId>
      <value>
        <mapValue mapid="normal_overtemp_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>14</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Rectifier over-temperature</label>
      <enum>normal_overtemp_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="balance_circuit_failure">
      <type>state</type>
      <sensorId>_BALANCE_CIRCUIT_FAILURE</sensorId>
      <value>
        <mapValue mapid="normal_failure_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>15</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Balance circuit failure</label>
      <enum>normal_failure_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="integrated_equipment_power-on/off">
      <type>state</type>
      <sensorId>_INTEGRATED_EQUIPMENT_POWER-ON/OFF</sensorId>
      <value>
        <mapValue mapid="power-onoff_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1040</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>1</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Integrated equipment power-on/off</label>
      <enum>power-onoff_em</enum>
      <sensorSet>UPS Status Data</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_1_status">
      <type>state</type>
      <sensorId>_BATTERY_1_STATUS</sensorId>
      <value>
        <mapValue mapid="battery_1_status_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1030</getOid>
                  </op>
                  <op>8</op>
                </right_shift>
              </op>
              <op>7</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 status</label>
      <enum>battery_1_status_em</enum>
      <sensorSet>UPS Alarm Data</sensorSet>
    </stateSensor>
	
    <stateSensor ruleid="battery_1_life">
      <type>state</type>
      <sensorId>_BATTERY_1_LIFE</sensorId>
      <value>
        <mapValue mapid="battery_life_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>3</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 1 life</label>
      <enum>battery_life_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="battery_2_life">
      <type>state</type>
      <sensorId>_BATTERY_2_LIFE</sensorId>
      <value>
        <mapValue mapid="battery_life_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1033</getOid>
                  </op>
                  <op>5</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Battery 2 life</label>
      <enum>battery_life_em</enum>
      <sensorSet>Battery Status</sensorSet>
    </stateSensor>
    <stateSensor ruleid="power_supply_mode">
      <type>state</type>
      <sensorId>_POWER_SUPPLY_MODE</sensorId>
      <value>
        <mapValue mapid="power_supply_vm">
          <formatNumber printffmt="%1.0f">
            <bitwise_and>
              <op>
                <right_shift>
                  <op>
                    <getOid>Function_3_Reg_1040</getOid>
                  </op>
                  <op>0</op>
                </right_shift>
              </op>
              <op>3</op>
            </bitwise_and>
          </formatNumber>
        </mapValue>
      </value>
      <label>Power supply mode</label>
      <enum>power_supply_em</enum>
      <sensorSet>UPS Status Data</sensorSet>
    </stateSensor>
	
		<valueMap ruleid="normal_failure_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="normal_failure_em">
			<label>Normal</label>
			<label>Failure</label>
		</enumMap>
		
		<valueMap ruleid="normal_alarm_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="normal_alarm_em">
			<label>Normal</label>
			<label>Alarm</label>
		</enumMap>
		
		<valueMap ruleid="sync_async_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="sync_async_em">
			<label>Synchronous</label>
			<label>Asynchronous</label>
		</enumMap>
		
		<valueMap ruleid="normal_excess_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="normal_excess_em">
			<label>Normal</label>
			<label>Excessive</label>
		</enumMap>
	
		<valueMap ruleid="power-onoff_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="power-onoff_em">
			<label>Power-off</label>
			<label>Power-on</label>
		</enumMap>
		
		<valueMap ruleid="normal_overtemp_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="normal_overtemp_em">
			<label>Normal</label>
			<label>Over-temperature</label>
		</enumMap>
		
		<valueMap ruleid="normal_overhigh_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="normal_overhigh_em">
			<label>Normal</label>
			<label>Over-high</label>
		</enumMap>
		
		<valueMap ruleid="battery_1_status_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>3</valueIn><valueOut>3</valueOut>
			<valueIn>4</valueIn><valueOut>4</valueOut>
			<valueIn>5</valueIn><valueOut>5</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="battery_1_status_em">
			<label>Normal</label>
			<label>Below the lower limit</label>
			<label>Above the upper limit</label>
			<label>No battery</label>
			<label>Pre-alarm</label>
			<label>Reverse batteries</label>
		</enumMap>
	
		<valueMap ruleid="battery_life_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="battery_life_em">
			<label>Normal</label>
			<label>Battery to be replaced</label>
			<label>Battery life ended</label>
		</enumMap>
		
		<valueMap ruleid="power_supply_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>*</valueIn><valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="power_supply_em">
			<label>UPS Power Supply</label>
			<label>Bypass Power Supply</label>
			<label>No Power Supply</label>
		</enumMap>
		
	
  </device>
  <protocol>
    <modbus>
      
	  <value_ref_id valid="Function_3_Reg_1030">
        <function>3</function>
        <start_addr>1029</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
	  <value_ref_id valid="Function_3_Reg_1033">
        <function>3</function>
        <start_addr>1032</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_1040">
        <function>3</function>
        <start_addr>1039</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      
      <value_ref_id valid="Function_3_Reg_1050">
        <function>3</function>
        <start_addr>1049</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1051">
        <function>3</function>
        <start_addr>1050</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1052">
        <function>3</function>
        <start_addr>1051</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1053">
        <function>3</function>
        <start_addr>1052</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1054">
        <function>3</function>
        <start_addr>1053</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1055">
        <function>3</function>
        <start_addr>1054</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1056">
        <function>3</function>
        <start_addr>1055</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1057">
        <function>3</function>
        <start_addr>1056</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1058">
        <function>3</function>
        <start_addr>1057</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1059">
        <function>3</function>
        <start_addr>1058</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1060">
        <function>3</function>
        <start_addr>1059</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1061">
        <function>3</function>
        <start_addr>1060</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1062">
        <function>3</function>
        <start_addr>1061</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1063">
        <function>3</function>
        <start_addr>1062</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1064">
        <function>3</function>
        <start_addr>1063</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1065">
        <function>3</function>
        <start_addr>1064</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1066">
        <function>3</function>
        <start_addr>1065</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1067">
        <function>3</function>
        <start_addr>1066</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1068">
        <function>3</function>
        <start_addr>1067</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1069">
        <function>3</function>
        <start_addr>1068</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1070">
        <function>3</function>
        <start_addr>1069</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1071">
        <function>3</function>
        <start_addr>1070</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1072">
        <function>3</function>
        <start_addr>1071</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1073">
        <function>3</function>
        <start_addr>1072</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1074">
        <function>3</function>
        <start_addr>1073</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1075">
        <function>3</function>
        <start_addr>1074</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1076">
        <function>3</function>
        <start_addr>1075</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1077">
        <function>3</function>
        <start_addr>1076</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1078">
        <function>3</function>
        <start_addr>1077</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1079">
        <function>3</function>
        <start_addr>1078</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1080">
        <function>3</function>
        <start_addr>1079</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1081">
        <function>3</function>
        <start_addr>1080</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1082">
        <function>3</function>
        <start_addr>1081</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1083">
        <function>3</function>
        <start_addr>1082</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1084">
        <function>3</function>
        <start_addr>1083</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1085">
        <function>3</function>
        <start_addr>1084</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1086">
        <function>3</function>
        <start_addr>1085</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1087">
        <function>3</function>
        <start_addr>1086</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1088">
        <function>3</function>
        <start_addr>1087</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1089">
        <function>3</function>
        <start_addr>1088</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1090">
        <function>3</function>
        <start_addr>1089</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1091">
        <function>3</function>
        <start_addr>1090</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1092">
        <function>3</function>
        <start_addr>1091</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1093">
        <function>3</function>
        <start_addr>1092</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1094">
        <function>3</function>
        <start_addr>1093</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1095">
        <function>3</function>
        <start_addr>1094</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1096">
        <function>3</function>
        <start_addr>1095</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
      <value_ref_id valid="Function_3_Reg_1097">
        <function>3</function>
        <start_addr>1096</start_addr>
        <quantity>1</quantity>
        <type>uint_16</type>
      </value_ref_id>
    </modbus>
  </protocol>
</APC_DDF>
