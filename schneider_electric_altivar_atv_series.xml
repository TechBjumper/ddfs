<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="apc_ddf_1_6.xsl"?>
<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="schneider_electric_altivar_atv_series"
	ddfname="Schneider Electric Altivar ATV series"
	ddfversion="1"
	canremove="yes">
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="schneider_electric_atv32atv61atv71atv212">
		<setProductData ruleid="vendordata" field="vendor">Schneider Electric</setProductData>
		<setProductData ruleid="modeldata" field="model">Altivar ATV series</setProductData>
		<setProductData ruleid="typedata" field="type">Generic Device</setProductData>
		<setDefaultLabel ruleid="labeldata">
			<sysHostname/> - Slave <commSetting field="slaveaddress"/>
		</setDefaultLabel>

		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

		<numSensor ruleid="analog_input_3_physical_value_ai3c">
			<type>num</type>
			<uints>milliamps</uints>
			<sensorId>_ANALOG_INPUT_3_PHYSICAL_VALUE_AI3C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5244</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Analog input 3 physical value-AI3C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_analog_input_1_physical_value_pai1">
			<type>num</type>
			<uints>milliamps</uints>
			<sensorId>_CONTROLLER_ANALOG_INPUT_1_PHYSICAL_VALUE_PAI1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6942</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Controller analog input 1 physical value-PAI1</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_analog_input_2_physical_value_pai2">
			<type>num</type>
			<uints>milliamps</uints>
			<sensorId>_CONTROLLER_ANALOG_INPUT_2_PHYSICAL_VALUE_PAI2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6943</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Controller analog input 2 physical value-PAI2</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_analog_output_1_physical_value_pao1">
			<type>num</type>
			<uints>milliamps</uints>
			<sensorId>_CONTROLLER_ANALOG_OUTPUT_1_PHYSICAL_VALUE_PAO1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6971</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Controller analog output 1 physical value-PAO1</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_analog_output_2_physical_value_pao2">
			<type>num</type>
			<uints>milliamps</uints>
			<sensorId>_CONTROLLER_ANALOG_OUTPUT_2_PHYSICAL_VALUE_PAO2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6972</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Controller analog output 2 physical value-PAO2</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_1_physical_value_ai1c">
			<type>voltage</type>
			<sensorId>_ANALOG_INPUT_1_PHYSICAL_VALUE_AI1C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5242</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Analog input 1 physical value-AI1C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_2_physical_value_ai2c">
			<type>voltage</type>
			<sensorId>_ANALOG_INPUT_2_PHYSICAL_VALUE_AI2C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5243</getOid>
					</op>
					<op>0.001</op>
				</mult>
			</value>
			<label>Analog input 2 physical value-AI2C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="motor_torque_otr">
			<type>pctofcapacity</type>
			<sensorId>_MOTOR_TORQUE_OTR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3205</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Motor torque-OTR</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="torque_setpoint_ltr">
			<type>pctofcapacity</type>
			<sensorId>_TORQUE_SETPOINT_LTR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8505</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Torque setpoint-LTR</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="torque_reference_before_ramp_trr">
			<type>pctofcapacity</type>
			<sensorId>_TORQUE_REFERENCE_BEFORE_RAMP_TRR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_9231</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Torque reference before ramp-TRR</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="first_virtual_ai_value_aiv1">
			<type>pctofcapacity</type>
			<sensorId>_FIRST_VIRTUAL_AI_VALUE_AIV1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5281</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>First virtual AI value-AIV1</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="rated_drive_current_inv">
			<type>amperage</type>
			<sensorId>_RATED_DRIVE_CURRENT_INV</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3017</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Rated drive current-INV</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="motor_current_lcr">
			<type>amperage</type>
			<sensorId>_MOTOR_CURRENT_LCR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3204</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Motor current-LCR</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pid_regulator_limit_output_reference_rpo">
			<type>frequency</type>
			<sensorId>_PID_REGULATOR_LIMIT_OUTPUT_REFERENCE_RPO</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_11983</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>PID regulator limit output reference-RPO</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="ena_average_speed_avs">
			<type>frequency</type>
			<sensorId>_ENA_AVERAGE_SPEED_AVS</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_12102</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>ENA average speed-AVS</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="output_frequency_rfr">
			<type>frequency</type>
			<sensorId>_OUTPUT_FREQUENCY_RFR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3202</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Output frequency-RFR</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="frequency_reference_before_ramp_frh">
			<type>frequency</type>
			<sensorId>_FREQUENCY_REFERENCE_BEFORE_RAMP_FRH</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3203</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Frequency reference before ramp-FRH</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="encoder_frequency_mmf">
			<type>frequency</type>
			<sensorId>_ENCODER_FREQUENCY_MMF</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3219</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Encoder frequency-MMF</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="frequency_setpoint_lfr">
			<type>frequency</type>
			<sensorId>_FREQUENCY_SETPOINT_LFR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8502</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Frequency setpoint-LFR</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="frequency_reference_after_ramp_fro">
			<type>frequency</type>
			<sensorId>_FREQUENCY_REFERENCE_AFTER_RAMP_FRO</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_9021</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Frequency reference after ramp-FRO</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="mains_voltage_uln">
			<type>voltage</type>
			<sensorId>_MAINS_VOLTAGE_ULN</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3207</getOid>
					</op>
					<op>0.1</op>
				</mult>
			</value>
			<label>Mains voltage-ULN</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pid_regulator_discrepancy_rpe">
			<type>num</type>
			<sensorId>_PID_REGULATOR_DISCREPANCY_RPE</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_11980</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>PID regulator discrepancy-RPE</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_1_standardized_value_ai1r">
			<type>num</type>
			<sensorId>_ANALOG_INPUT_1_STANDARDIZED_VALUE_AI1R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5232</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog input 1 standardized value-AI1R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_2_standardized_value_ai2r">
			<type>num</type>
			<sensorId>_ANALOG_INPUT_2_STANDARDIZED_VALUE_AI2R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5233</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog input 2 standardized value-AI2R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_3_standardized_value_ai3r">
			<type>num</type>
			<sensorId>_ANALOG_INPUT_3_STANDARDIZED_VALUE_AI3R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5234</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog input 3 standardized value-AI3R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_4_standardized_value_ai4r">
			<type>num</type>
			<sensorId>_ANALOG_INPUT_4_STANDARDIZED_VALUE_AI4R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5235</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog input 4 standardized value-AI4R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_1_standardized_value_ao1r">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_1_STANDARDIZED_VALUE_AO1R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5261</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 1 standardized value-AO1R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_2_standardized_value_ao2r">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_2_STANDARDIZED_VALUE_AO2R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5262</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 2 standardized value-AO2R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_3_standardized_value_ao3r">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_3_STANDARDIZED_VALUE_AO3R</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5263</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 3 standardized value-AO3R</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="second_virtual_ai_value_aiv2">
			<type>num</type>
			<sensorId>_SECOND_VIRTUAL_AI_VALUE_AIV2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5283</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Second virtual AI value-AIV2</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pid_regulator_feedback_reference_rpf">
			<type>num</type>
			<sensorId>_PID_REGULATOR_FEEDBACK_REFERENCE_RPF</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_11981</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>PID regulator feedback reference-RPF</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pid_reference_after_ramp_rpc">
			<type>num</type>
			<sensorId>_PID_REFERENCE_AFTER_RAMP_RPC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_11982</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>PID reference after ramp-RPC</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="drive_software_version_vdp">
			<type>num</type>
			<sensorId>_DRIVE_SOFTWARE_VERSION_VDP</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3302</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Drive software version-VDP</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_1_and_2)_pan0">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_1_AND_2)_PAN0</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3340</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 1 and 2)-PAN0</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_3_and_4)_pan1">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_3_AND_4)_PAN1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3341</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 3 and 4)-PAN1</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_5_and_6)_pan2">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_5_AND_6)_PAN2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3342</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 5 and 6)-PAN2</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_7_and_8)_pan3">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_7_AND_8)_PAN3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3343</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 7 and 8)-PAN3</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_9_and_10)_pan4">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_9_AND_10)_PAN4</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3344</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 9 and 10)-PAN4</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_11_and_12)_pan5">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_11_AND_12)_PAN5</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3345</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 11 and 12)-PAN5</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_13_and_14)_pan6">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_13_AND_14)_PAN6</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3346</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 13 and 14)-PAN6</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="device_name_(char_15_and_16)_pan7">
			<type>num</type>
			<sensorId>_DEVICE_NAME_(CHAR_15_AND_16)_PAN7</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3347</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Device name (char 15 and 16)-PAN7</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="encoder_counter_value_puc">
			<type>num</type>
			<sensorId>_ENCODER_COUNTER_VALUE_PUC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5611</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Encoder counter value-PUC</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="ethernet_fault_code_fdrd">
			<type>num</type>
			<sensorId>_ETHERNET_FAULT_CODE_FDRD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_64233</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Ethernet fault code-FDRD</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="communication_option_:_ethernet_specific_error_code_err">
			<type>num</type>
			<sensorId>_COMMUNICATION_OPTION_:_ETHERNET_SPECIFIC_ERROR_CODE_ERR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_64270</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Communication option : Ethernet specific error code-ERR</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="profinet:_last_error_code_ipad">
			<type>num</type>
			<sensorId>_PROFINET:_LAST_ERROR_CODE_IPAD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_64280</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Profinet: Last error code-IPAD</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="ethercat_second_address_actual_value_ecaa">
			<type>num</type>
			<sensorId>_ETHERCAT_SECOND_ADDRESS_ACTUAL_VALUE_ECAA</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6692</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>EtherCAT second address actual value-ECAA</label>
			<sensorSet>Status parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_1_and_2)_pav1">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_1_AND_2)_PAV1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6981</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 1 and 2)-PAV1</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_3_and_4)_pav2">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_3_AND_4)_PAV2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6982</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 3 and 4)-PAV2</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_5_and_6)_pav3">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_5_AND_6)_PAV3</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6983</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 5 and 6)-PAV3</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_7_and_8)_pav4">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_7_AND_8)_PAV4</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6984</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 7 and 8)-PAV4</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_9_and_10)_pav5">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_9_AND_10)_PAV5</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6985</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 9 and 10)-PAV5</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_11_and_12)_pav6">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_11_AND_12)_PAV6</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6986</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 11 and 12)-PAV6</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_13_and_14)_pav7">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_13_AND_14)_PAV7</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6987</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 13 and 14)-PAV7</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_name_(char_15_and_16)_pav8">
			<type>num</type>
			<sensorId>_CONTROLLER_NAME_(CHAR_15_AND_16)_PAV8</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_6988</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller name (char 15 and 16)-PAV8</label>
			<sensorSet>Identification parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="network_card_fault_code_cnf">
			<type>num</type>
			<sensorId>_NETWORK_CARD_FAULT_CODE_CNF</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7132</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Network card fault code-CNF</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="controller_inside_card_fault_code_apf">
			<type>num</type>
			<sensorId>_CONTROLLER_INSIDE_CARD_FAULT_CODE_APF</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7133</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Controller Inside card fault code-APF</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="option_card_1_fault_code_ilf1">
			<type>num</type>
			<sensorId>_OPTION_CARD_1_FAULT_CODE_ILF1</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7134</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Option card 1 fault code-ILF1</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="option_card_2_fault_code_ilf2">
			<type>num</type>
			<sensorId>_OPTION_CARD_2_FAULT_CODE_ILF2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7135</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Option card 2 fault code-ILF2</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="option_card_auto_reset_rzop">
			<type>num</type>
			<sensorId>_OPTION_CARD_AUTO_RESET_RZOP</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7140</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Option Card auto reset-RZOP</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="date_day">
			<type>num</type>
			<sensorId>_DATE_DAY</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7391</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Date-DAY</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="time_time">
			<type>num</type>
			<sensorId>_TIME_TIME</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7392</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Time-TIME</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="fault_counter_fnb">
			<type>num</type>
			<sensorId>_FAULT_COUNTER_FNB</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_7393</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Fault counter-FNB</label>
			<sensorSet>Fault parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pid_regulator_setpoint_pisp">
			<type>num</type>
			<sensorId>_PID_REGULATOR_SETPOINT_PISP</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8503</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>PID regulator setpoint-PISP</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="motor_power_opr">
			<type>pctofcapacity</type>
			<sensorId>_MOTOR_POWER_OPR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3211</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Motor power-OPR</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="multiplying_coefficient_mfr">
			<type>pctofcapacity</type>
			<sensorId>_MULTIPLYING_COEFFICIENT_MFR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_11831</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Multiplying coefficient-MFR</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="resistor_thermal_state_thb">
			<type>pctofcapacity</type>
			<sensorId>_RESISTOR_THERMAL_STATE_THB</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_14114</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Resistor thermal state-THB</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="drive_thermal_state_thd">
			<type>pctofcapacity</type>
			<sensorId>_DRIVE_THERMAL_STATE_THD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3209</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Drive thermal state-THD</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="motor_thermal_state_thr">
			<type>pctofcapacity</type>
			<sensorId>_MOTOR_THERMAL_STATE_THR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_9630</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Motor thermal state-THR</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="run_time_(resetable)_pet">
			<type>timeinhrs</type>
			<sensorId>_RUN_TIME_(RESETABLE)_PET</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3236</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Run time (resetable)-PET</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="pulse_input_frequency_fqs">
			<type>frequency</type>
			<sensorId>_PULSE_INPUT_FREQUENCY_FQS</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_14603</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Pulse input frequency-FQS</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="speed_setpoint_lfrd">
			<type>num</type>
			<uints>rpm</uints>
			<sensorId>_SPEED_SETPOINT_LFRD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8602</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Speed setpoint-LFRD</label>
			<sensorSet>Setpoint parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="output_velocity_rfrd">
			<type>num</type>
			<uints>rpm</uints>
			<sensorId>_OUTPUT_VELOCITY_RFRD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8604</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Output velocity-RFRD</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="speed_reference_before_ramp_frhd">
			<type>num</type>
			<uints>rpm</uints>
			<sensorId>_SPEED_REFERENCE_BEFORE_RAMP_FRHD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8605</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Speed reference before ramp-FRHD</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="speed_reference_after_ramp_frod">
			<type>num</type>
			<uints>rpm</uints>
			<sensorId>_SPEED_REFERENCE_AFTER_RAMP_FROD</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_8641</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Speed reference after ramp-FROD</label>
			<sensorSet>Reference parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="igbt_alarm_time_tac">
			<type>timeinsec</type>
			<sensorId>_IGBT_ALARM_TIME_TAC</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3235</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>IGBT alarm time-TAC</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="transistor_alarm_time_counter_at_freq_min_tac2">
			<type>timeinsec</type>
			<sensorId>_TRANSISTOR_ALARM_TIME_COUNTER_AT_FREQ_MIN_TAC2</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3242</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Transistor alarm time counter at freq min-TAC2</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="motor_voltage_uop">
			<type>voltage</type>
			<sensorId>_MOTOR_VOLTAGE_UOP</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3208</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Motor voltage-UOP</label>
			<sensorSet>Actual values parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_input_4_physical_value_ai4c">
			<type>num</type>
			<sensorId>_ANALOG_INPUT_4_PHYSICAL_VALUE_AI4C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5245</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog input 4 physical value-AI4C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_1_physical_value_ao1c">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_1_PHYSICAL_VALUE_AO1C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5271</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 1 physical value-AO1C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_2_physical_value_ao2c">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_2_PHYSICAL_VALUE_AO2C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5272</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 2 physical value-AO2C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="analog_output_3_physical_value_ao3c">
			<type>num</type>
			<sensorId>_ANALOG_OUTPUT_3_PHYSICAL_VALUE_AO3C</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_5273</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Analog output 3 physical value-AO3C</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="energy_consumption_aph">
			<type>num</type>
			<sensorId>_ENERGY_CONSUMPTION_APH</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3230</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Energy consumption-APH</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="total_motor_operating_time_rth">
			<type>num</type>
			<sensorId>_TOTAL_MOTOR_OPERATING_TIME_RTH</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3231</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total motor operating time-RTH</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="total_drive_operating_time_pth">
			<type>num</type>
			<sensorId>_TOTAL_DRIVE_OPERATING_TIME_PTH</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3233</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Total drive operating time-PTH</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="consumption_iphr">
			<type>num</type>
			<sensorId>_CONSUMPTION_IPHR</sensorId>
			<value>
				<mult>
					<op>
						<getOid>Reg_3237</getOid>
					</op>
					<op>1</op>
				</mult>
			</value>
			<label>Consumption-IPHR</label>
			<sensorSet>Measurement parameters</sensorSet>
		</numSensor>

		<stateSensor ruleid="status_of_tune_in_term_of_salliency">
			<type>state</type>
			<sensorId>_STATUS_OF_TUNE_IN_TERM_OF_SALLIENCY</sensorId>
			<value>
				<mapValue mapid="smot_valuemap">
					<getOid>Reg_9645</getOid>
				</mapValue>
			</value>
			<label>Status of tune in term of salliency</label>
			<enum>smot_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="smot_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="smot_enum">
			<label>[No info.] (nO)</label>
			<label>[Low salient] (LLS)</label>
			<label>[Med salient] (MLS)</label>
			<label>[High salient] (HLS)</label>
		</enumMap>

		<stateSensor ruleid="auto_tune_usage">
			<type>state</type>
			<sensorId>_AUTO_TUNE_USAGE</sensorId>
			<value>
				<mapValue mapid="tunu_valuemap">
					<getOid>Reg_9619</getOid>
				</mapValue>
			</value>
			<label>Auto tune usage</label>
			<enum>tunu_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="tunu_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="tunu_enum">
			<label>[No] (nO)</label>
			<label>[Therm mot] (tM)</label>
			<label>[Cold tun] (Ct)</label>
		</enumMap>

		<stateSensor ruleid="auto_tune_selection_result">
			<type>state</type>
			<sensorId>_AUTO_TUNE_SELECTION_RESULT</sensorId>
			<value>
				<mapValue mapid="stun_valuemap">
					<getOid>Reg_9617</getOid>
				</mapValue>
			</value>
			<label>Auto tune selection result</label>
			<enum>stun_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="stun_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="stun_enum">
			<label>[Default] (tAb)</label>
			<label>[Measure] (MEAS)</label>
			<label>[Custom] (CUS)</label>
		</enumMap>
		<stateSensor ruleid="config._active">
			<type>state</type>
			<sensorId>_CONFIG._ACTIVE</sensorId>
			<value>
				<mapValue mapid="cnfs_valuemap">
					<getOid>Reg_8020</getOid>
				</mapValue>
			</value>
			<label>Config. active</label>
			<enum>cnfs_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="cnfs_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="cnfs_enum">
			<label>[In progress] (nO)</label>
			<label>[Config. n�0] (CnF0)</label>
			<label>[Config. n�1] (CnF1)</label>
			<label>[Config. n�2] (CnF2)</label>
		</enumMap>

		<stateSensor ruleid="altivar_fault_code">
			<type>state</type>
			<sensorId>_ALTIVAR_FAULT_CODE</sensorId>
			<value>
				<mapValue mapid="lft_valuemap">
					<getOid>Reg_7121</getOid>
				</mapValue>
			</value>
			<label>Altivar fault code</label>
			<enum>lft_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="lft_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
			<valueIn>24</valueIn>
			<valueOut>24</valueOut>
			<valueIn>25</valueIn>
			<valueOut>25</valueOut>
			<valueIn>26</valueIn>
			<valueOut>26</valueOut>
			<valueIn>27</valueIn>
			<valueOut>27</valueOut>
			<valueIn>28</valueIn>
			<valueOut>28</valueOut>
			<valueIn>29</valueIn>
			<valueOut>29</valueOut>
			<valueIn>30</valueIn>
			<valueOut>30</valueOut>
			<valueIn>31</valueIn>
			<valueOut>31</valueOut>
			<valueIn>32</valueIn>
			<valueOut>32</valueOut>
			<valueIn>33</valueIn>
			<valueOut>33</valueOut>
			<valueIn>34</valueIn>
			<valueOut>34</valueOut>
			<valueIn>35</valueIn>
			<valueOut>35</valueOut>
			<valueIn>36</valueIn>
			<valueOut>36</valueOut>
			<valueIn>37</valueIn>
			<valueOut>37</valueOut>
			<valueIn>38</valueIn>
			<valueOut>38</valueOut>
			<valueIn>39</valueIn>
			<valueOut>39</valueOut>
			<valueIn>40</valueIn>
			<valueOut>40</valueOut>
			<valueIn>41</valueIn>
			<valueOut>41</valueOut>
			<valueIn>42</valueIn>
			<valueOut>42</valueOut>
			<valueIn>43</valueIn>
			<valueOut>43</valueOut>
			<valueIn>44</valueIn>
			<valueOut>44</valueOut>
			<valueIn>45</valueIn>
			<valueOut>45</valueOut>
			<valueIn>46</valueIn>
			<valueOut>46</valueOut>
			<valueIn>47</valueIn>
			<valueOut>47</valueOut>
			<valueIn>48</valueIn>
			<valueOut>48</valueOut>
			<valueIn>49</valueIn>
			<valueOut>49</valueOut>
			<valueIn>50</valueIn>
			<valueOut>50</valueOut>
			<valueIn>51</valueIn>
			<valueOut>51</valueOut>
			<valueIn>52</valueIn>
			<valueOut>52</valueOut>
			<valueIn>53</valueIn>
			<valueOut>53</valueOut>
			<valueIn>54</valueIn>
			<valueOut>54</valueOut>
			<valueIn>55</valueIn>
			<valueOut>55</valueOut>
			<valueIn>56</valueIn>
			<valueOut>56</valueOut>
			<valueIn>57</valueIn>
			<valueOut>57</valueOut>
			<valueIn>58</valueIn>
			<valueOut>58</valueOut>
			<valueIn>59</valueIn>
			<valueOut>59</valueOut>
			<valueIn>60</valueIn>
			<valueOut>60</valueOut>
			<valueIn>61</valueIn>
			<valueOut>61</valueOut>
			<valueIn>62</valueIn>
			<valueOut>62</valueOut>
			<valueIn>63</valueIn>
			<valueOut>63</valueOut>
			<valueIn>64</valueIn>
			<valueOut>64</valueOut>
			<valueIn>65</valueIn>
			<valueOut>65</valueOut>
			<valueIn>66</valueIn>
			<valueOut>66</valueOut>
			<valueIn>67</valueIn>
			<valueOut>67</valueOut>
			<valueIn>68</valueIn>
			<valueOut>68</valueOut>
			<valueIn>69</valueIn>
			<valueOut>69</valueOut>
			<valueIn>70</valueIn>
			<valueOut>70</valueOut>
			<valueIn>71</valueIn>
			<valueOut>71</valueOut>
			<valueIn>72</valueIn>
			<valueOut>72</valueOut>
			<valueIn>73</valueIn>
			<valueOut>73</valueOut>
			<valueIn>74</valueIn>
			<valueOut>74</valueOut>
			<valueIn>75</valueIn>
			<valueOut>75</valueOut>
			<valueIn>76</valueIn>
			<valueOut>76</valueOut>
			<valueIn>77</valueIn>
			<valueOut>77</valueOut>
			<valueIn>78</valueIn>
			<valueOut>78</valueOut>
			<valueIn>79</valueIn>
			<valueOut>79</valueOut>
			<valueIn>80</valueIn>
			<valueOut>80</valueOut>
			<valueIn>81</valueIn>
			<valueOut>81</valueOut>
			<valueIn>82</valueIn>
			<valueOut>82</valueOut>
			<valueIn>83</valueIn>
			<valueOut>83</valueOut>
			<valueIn>84</valueIn>
			<valueOut>84</valueOut>
			<valueIn>85</valueIn>
			<valueOut>85</valueOut>
			<valueIn>86</valueIn>
			<valueOut>86</valueOut>
			<valueIn>87</valueIn>
			<valueOut>87</valueOut>
			<valueIn>88</valueIn>
			<valueOut>88</valueOut>
			<valueIn>89</valueIn>
			<valueOut>89</valueOut>
			<valueIn>90</valueIn>
			<valueOut>90</valueOut>
			<valueIn>91</valueIn>
			<valueOut>91</valueOut>
			<valueIn>92</valueIn>
			<valueOut>92</valueOut>
			<valueIn>93</valueIn>
			<valueOut>93</valueOut>
			<valueIn>94</valueIn>
			<valueOut>94</valueOut>
			<valueIn>95</valueIn>
			<valueOut>95</valueOut>
			<valueIn>96</valueIn>
			<valueOut>96</valueOut>
			<valueIn>97</valueIn>
			<valueOut>97</valueOut>
			<valueIn>98</valueIn>
			<valueOut>98</valueOut>
			<valueIn>99</valueIn>
			<valueOut>99</valueOut>
			<valueIn>100</valueIn>
			<valueOut>100</valueOut>
			<valueIn>101</valueIn>
			<valueOut>101</valueOut>
			<valueIn>102</valueIn>
			<valueOut>102</valueOut>
			<valueIn>103</valueIn>
			<valueOut>103</valueOut>
			<valueIn>104</valueIn>
			<valueOut>104</valueOut>
			<valueIn>105</valueIn>
			<valueOut>105</valueOut>
			<valueIn>106</valueIn>
			<valueOut>106</valueOut>
			<valueIn>107</valueIn>
			<valueOut>107</valueOut>
			<valueIn>108</valueIn>
			<valueOut>108</valueOut>
			<valueIn>109</valueIn>
			<valueOut>109</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="lft_enum">
			<label>[No fault] (nOF)</label>
			<label>[Calibration error] (InF)</label>
			<label>[Control Eeprom] (EEF1)</label>
			<label>[Incorrect config.] (CFF)</label>
			<label>[Invalid config.] (CFI)</label>
			<label>[Modbus com.] (SLF1)</label>
			<label>[int. com.link] (ILF)</label>
			<label>[Com. network] (CnF)</label>
			<label>[External flt-LI/Bit] (EPF1)</label>
			<label>[Overcurrent] (OCF)</label>
			<label>[Precharge] (CrF)</label>
			<label>[Speed fdback loss] (SPF)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Drive overheat] (OHF)</label>
			<label>[Motor overload] (OLF)</label>
			<label>[Overbraking] (ObF)</label>
			<label>[Mains overvoltage] (OSF)</label>
			<label>[1 output phase loss] (OPF1)</label>
			<label>[Input phase loss] (PHF)</label>
			<label>[Undervoltage] (USF)</label>
			<label>[Motor short circuit] (SCF1)</label>
			<label>[Overspeed] (SOF)</label>
			<label>[Auto-tuning] (tnF)</label>
			<label>[Rating error] (InF1)</label>
			<label>[PWR Calib.] (InF2)</label>
			<label>[Int.serial link] (InF3)</label>
			<label>[Int.Mfg area] (InF4)</label>
			<label>[Power Eeprom] (EEF2)</label>
			<label>[Impedant sh. circuit] (SCF2)</label>
			<label>[Ground short circuit] (SCF3)</label>
			<label>[3out ph loss] (OPF2)</label>
			<label>[CAN com.] (COF)</label>
			<label>[Brake control] (bLF)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[External fault com.] (EPF2)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Brake feedback] (brF)</label>
			<label>[PC com.] (SLF2)</label>
			<label>[Enc. coupl.] (ECF)</label>
			<label>[Torque/current lim] (SSF)</label>
			<label>[HMI com.] (SLF3)</label>
			<label>[Power removal] (PrF)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[LI6=PTC probe] (PtFL)</label>
			<label>[PTC fault] (OtFL)</label>
			<label>[Internal- I measure] (InF9)</label>
			<label>[Internal-mains circuit] (InFA)</label>
			<label>[Internal- th. sensor] (InFb)</label>
			<label>[IGBT overheat] (tJF)</label>
			<label>[IGBT short circuit] (SCF4)</label>
			<label>[Motor short circuit] (SCF5)</label>
			<label>[Torque time-out] (SrF)</label>
			<label>[Out. contact. stuck] (FCF1)</label>
			<label>[Out. contact. open.] (FCF2)</label>
			<label>N/A</label>
			<label>[AI2 input] (AI2F)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[input contactor] (LCF)</label>
			<label>N/A</label>
			<label>[Diff. I fault] (dCF)</label>
			<label>[IGBT desaturation] (HdF)</label>
			<label>[Internal-option] (InF6)</label>
			<label>[internal- CPU] (InFE)</label>
			<label>N/A</label>
			<label>[AI3 4-20mA loss] (LFF3)</label>
			<label>N/A</label>
			<label>[Cards pairing] (HCF)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Load fault] (dLF)</label>
			<label>[Bad conf] (CFI2)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Ch.sw. fault] (CSF)</label>
			<label>[Pr.Underload.Flt] (ULF)</label>
			<label>[Proc.Overload Flt] (OLC)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Angle error] (ASF)</label>
			<label>N/A</label>
			<label>[Safety fault] (SAFF)</label>
			<label>[FB fault] (FbE)</label>
			<label>[FB stop flt.] (FbES)</label>
		</enumMap>

		<stateSensor ruleid="ethercat_slave_status">
			<type>state</type>
			<sensorId>_ETHERCAT_SLAVE_STATUS</sensorId>
			<value>
				<mapValue mapid="ecss_valuemap">
					<getOid>Reg_6690</getOid>
				</mapValue>
			</value>
			<label>EtherCat Slave Status</label>
			<enum>ecss_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="ecss_valuemap">
			<valueIn>1</valueIn>
			<valueOut>0</valueOut>
			<valueIn>2</valueIn>
			<valueOut>1</valueOut>
			<valueIn>3</valueIn>
			<valueOut>2</valueOut>
			<valueIn>4</valueIn>
			<valueOut>3</valueOut>
			<valueIn>5</valueIn>
			<valueOut>4</valueOut>
			<valueIn>6</valueIn>
			<valueOut>5</valueOut>
			<valueIn>7</valueIn>
			<valueOut>6</valueOut>
			<valueIn>8</valueIn>
			<valueOut>7</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="ecss_enum">
			<label>[Init] (InIt)</label>
			<label>[PreOp] (PrOP)</label>
			<label>[Boot] (bOOt)</label>
			<label>[SafeOp] (SFOP)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[Op] (OP)</label>
		</enumMap>

		<stateSensor ruleid="drive_state">
			<type>state</type>
			<sensorId>_DRIVE_STATE</sensorId>
			<value>
				<mapValue mapid="hmis_valuemap">
					<getOid>Reg_3240</getOid>
				</mapValue>
			</value>
			<label>Drive state</label>
			<enum>hmis_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="hmis_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
			<valueIn>24</valueIn>
			<valueOut>24</valueOut>
			<valueIn>25</valueIn>
			<valueOut>25</valueOut>
			<valueIn>26</valueIn>
			<valueOut>26</valueOut>
			<valueIn>27</valueIn>
			<valueOut>27</valueOut>
			<valueIn>28</valueIn>
			<valueOut>28</valueOut>
			<valueIn>29</valueIn>
			<valueOut>29</valueOut>
			<valueIn>30</valueIn>
			<valueOut>30</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="hmis_enum">
			<label>[Auto-tuning] (tUn)</label>
			<label>[In DC inject.] (dCb)</label>
			<label>[Ready] (rdY)</label>
			<label>[Freewheel] (nSt)</label>
			<label>[Drv running] (rUn)</label>
			<label>[In accel.] (ACC)</label>
			<label>[In decel.] (dEC)</label>
			<label>[Current lim.] (CLI)</label>
			<label>[Fast stop] (FSt)</label>
			<label>[Mot. fluxing] (FLU)</label>
			<label>N/A</label>
			<label>[no mains V.] (nLP)</label>
			<label>[Active PWR] (PrA)</label>
			<label>[control.stop] (CtL)</label>
			<label>[Dec. adapt.] (Obr)</label>
			<label>[Output cut] (SOC)</label>
			<label>N/A</label>
			<label>[UnderV. al.] (USA)</label>
			<label>[In mfg. test] (tC)</label>
			<label>[in autotest] (St)</label>
			<label>[autotest err] (FA)</label>
			<label>[Autotest OK] (YES)</label>
			<label>[eeprom test] (EP)</label>
			<label>[In fault] (FLt)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[SS1 active] (SS1)</label>
			<label>[SLS active] (SLS)</label>
			<label>[STO active] (StO)</label>
		</enumMap>
		<stateSensor ruleid="drive_line_voltage">
			<type>state</type>
			<sensorId>_DRIVE_LINE_VOLTAGE</sensorId>
			<value>
				<mapValue mapid="vcal_valuemap">
					<getOid>Reg_3012</getOid>
				</mapValue>
			</value>
			<label>Drive line voltage</label>
			<enum>vcal_enum</enum>
			<sensorSet>Identification parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="vcal_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="vcal_enum">
			<label>[No] (nO)</label>
			<label>[100-120(1)] (110M)</label>
			<label>[100-120(3)] (110t)</label>
			<label>[200-240(1)] (M2)</label>
			<label>[200-240(3)] (M3)</label>
			<label>[380-500(1)] (480M)</label>
			<label>[380-500(3)] (n4)</label>
			<label>[525-600(1)] (690M)</label>
			<label>[525-600(3)] (S6)</label>
		</enumMap>

		<stateSensor ruleid="drive_nominal_rating">
			<type>state</type>
			<sensorId>_DRIVE_NOMINAL_RATING</sensorId>
			<value>
				<mapValue mapid="ncv_valuemap">
					<getOid>Reg_3011</getOid>
				</mapValue>
			</value>
			<label>Drive nominal rating</label>
			<enum>ncv_enum</enum>
			<sensorSet>Identification parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="ncv_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="ncv_enum">
			<label>[Unknown rating] (nO)</label>
			<label>[0,12kW] (010)</label>
			<label>[0,18kW / 0.25HP] (018)</label>
			<label>[0,25kW] (025)</label>
			<label>[0,37kW / 0.5HP] (037)</label>
			<label>[0,55kW / 0.75HP] (055)</label>
			<label>[0,75kW / 1HP] (075)</label>
			<label>[5,5kW / 7.5HP] (090)</label>
			<label>[1,1kW / 1.5HP] (U11)</label>
			<label>[1,5kW / 2HP] (U15)</label>
			<label>[1,85kW] (U18)</label>
			<label>[2,2kW / 3HP] (U22)</label>
			<label>[3kW] (U30)</label>
			<label>[4kW / 5HP] (U37)</label>
			<label>[4kW / 5HP] (U40)</label>
			<label>[5,5kW / 7.5HP] (U55)</label>
			<label>[7,5kW / 10HP] (U75)</label>
			<label>[9kW] (U90)</label>
			<label>[11kW / 15HP] (d11)</label>
			<label>[15kW / 20HP] (d15)</label>
			<label>[18,5kW / 25HP] (d18)</label>
			<label>[22kW / 30HP] (d22)</label>
			<label>[30kW / 40HP] (d30)</label>
		</enumMap>
		<stateSensor ruleid="power_identification">
			<type>state</type>
			<sensorId>_POWER_IDENTIFICATION</sensorId>
			<value>
				<mapValue mapid="prt_valuemap">
					<getOid>Reg_3009</getOid>
				</mapValue>
			</value>
			<label>Power Identification</label>
			<enum>prt_enum</enum>
			<sensorSet>Identification parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="prt_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>9</valueIn>
			<valueOut>9</valueOut>
			<valueIn>10</valueIn>
			<valueOut>10</valueOut>
			<valueIn>11</valueIn>
			<valueOut>11</valueOut>
			<valueIn>12</valueIn>
			<valueOut>12</valueOut>
			<valueIn>13</valueIn>
			<valueOut>13</valueOut>
			<valueIn>14</valueIn>
			<valueOut>14</valueOut>
			<valueIn>15</valueIn>
			<valueOut>15</valueOut>
			<valueIn>16</valueIn>
			<valueOut>16</valueOut>
			<valueIn>17</valueIn>
			<valueOut>17</valueOut>
			<valueIn>18</valueIn>
			<valueOut>18</valueOut>
			<valueIn>19</valueIn>
			<valueOut>19</valueOut>
			<valueIn>20</valueIn>
			<valueOut>20</valueOut>
			<valueIn>21</valueIn>
			<valueOut>21</valueOut>
			<valueIn>22</valueIn>
			<valueOut>22</valueOut>
			<valueIn>23</valueIn>
			<valueOut>23</valueOut>
			<valueIn>24</valueIn>
			<valueOut>24</valueOut>
			<valueIn>25</valueIn>
			<valueOut>25</valueOut>
			<valueIn>26</valueIn>
			<valueOut>26</valueOut>
			<valueIn>27</valueIn>
			<valueOut>27</valueOut>
			<valueIn>28</valueIn>
			<valueOut>28</valueOut>
			<valueIn>29</valueIn>
			<valueOut>29</valueOut>
			<valueIn>30</valueIn>
			<valueOut>30</valueOut>
			<valueIn>31</valueIn>
			<valueOut>31</valueOut>
			<valueIn>32</valueIn>
			<valueOut>32</valueOut>
			<valueIn>33</valueIn>
			<valueOut>33</valueOut>
			<valueIn>34</valueIn>
			<valueOut>34</valueOut>
			<valueIn>35</valueIn>
			<valueOut>35</valueOut>
			<valueIn>36</valueIn>
			<valueOut>36</valueOut>
			<valueIn>37</valueIn>
			<valueOut>37</valueOut>
			<valueIn>38</valueIn>
			<valueOut>38</valueOut>
			<valueIn>39</valueIn>
			<valueOut>39</valueOut>
			<valueIn>40</valueIn>
			<valueOut>40</valueOut>
			<valueIn>41</valueIn>
			<valueOut>41</valueOut>
			<valueIn>42</valueIn>
			<valueOut>42</valueOut>
			<valueIn>43</valueIn>
			<valueOut>43</valueOut>
			<valueIn>44</valueIn>
			<valueOut>44</valueOut>
			<valueIn>45</valueIn>
			<valueOut>45</valueOut>
			<valueIn>46</valueIn>
			<valueOut>46</valueOut>
			<valueIn>47</valueIn>
			<valueOut>47</valueOut>
			<valueIn>48</valueIn>
			<valueOut>48</valueOut>
			<valueIn>49</valueIn>
			<valueOut>49</valueOut>
			<valueIn>50</valueIn>
			<valueOut>50</valueOut>
			<valueIn>51</valueIn>
			<valueOut>51</valueOut>
			<valueIn>52</valueIn>
			<valueOut>52</valueOut>
			<valueIn>53</valueIn>
			<valueOut>53</valueOut>
			<valueIn>54</valueIn>
			<valueOut>54</valueOut>
			<valueIn>55</valueIn>
			<valueOut>55</valueOut>
			<valueIn>56</valueIn>
			<valueOut>56</valueOut>
			<valueIn>57</valueIn>
			<valueOut>57</valueOut>
			<valueIn>58</valueIn>
			<valueOut>58</valueOut>
			<valueIn>59</valueIn>
			<valueOut>59</valueOut>
			<valueIn>60</valueIn>
			<valueOut>60</valueOut>
			<valueIn>61</valueIn>
			<valueOut>61</valueOut>
			<valueIn>62</valueIn>
			<valueOut>62</valueOut>
			<valueIn>63</valueIn>
			<valueOut>63</valueOut>
			<valueIn>64</valueIn>
			<valueOut>64</valueOut>
			<valueIn>65</valueIn>
			<valueOut>65</valueOut>
			<valueIn>66</valueIn>
			<valueOut>66</valueOut>
			<valueIn>67</valueIn>
			<valueOut>67</valueOut>
			<valueIn>68</valueIn>
			<valueOut>68</valueOut>
			<valueIn>69</valueIn>
			<valueOut>69</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="prt_enum">
			<label>[Not ident.] (nO)</label>
			<label>[IP20] (1)</label>
			<label>[IP54] (2)</label>
			<label>[IP00] (3)</label>
			<label>N/A</label>
			<label>[IP20] (5)</label>
			<label>[IP54] (6)</label>
			<label>[IP00] (7)</label>
			<label>N/A</label>
			<label>[IP20 1,5kW] (9)</label>
			<label>[IP54 1,5kW] (10)</label>
			<label>[IP00 2HP] (11)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP54 2,2kW] (14)</label>
			<label>[IP00 3HP] (15)</label>
			<label>N/A</label>
			<label>[IP20 55kW] (17)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP20 75kW] (21)</label>
			<label>N/A</label>
			<label>[IP00 100HP] (23)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP20 90kW] (33)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP20 110kW] (37)</label>
			<label>[IP54 110kW] (38)</label>
			<label>[IP00 150HP] (39)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP20 37kW] (65)</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>N/A</label>
			<label>[IP20 45kW] (69)</label>
		</enumMap>
		<stateSensor ruleid="damper_fault_mgt.">
			<type>state</type>
			<sensorId>_DAMPER_FAULT_MGT.</sensorId>
			<value>
				<mapValue mapid="fdl_valuemap">
					<getOid>Reg_14815</getOid>
				</mapValue>
			</value>
			<label>Damper fault mgt.</label>
			<enum>fdl_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<valueMap ruleid="fdl_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>2</valueIn>
			<valueOut>2</valueOut>
			<valueIn>3</valueIn>
			<valueOut>3</valueOut>
			<valueIn>4</valueIn>
			<valueOut>4</valueOut>
			<valueIn>5</valueIn>
			<valueOut>5</valueOut>
			<valueIn>6</valueIn>
			<valueOut>6</valueOut>
			<valueIn>7</valueIn>
			<valueOut>7</valueOut>
			<valueIn>8</valueIn>
			<valueOut>8</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="fdl_enum">
			<label>[Ignore] (nO)</label>
			<label>[Freewheel] (YES)</label>
			<label>[Per STT] (Stt)</label>
			<label>N/A</label>
			<label>[fallback spd] (LFF)</label>
			<label>[Spd maint.] (rLS)</label>
			<label>[Ramp stop] (rMP)</label>
			<label>[Fast stop] (FSt)</label>
			<label>[DC injection] (dCI)</label>
		</enumMap>
		<!-- Code ETI -->
		
		<stateSensor ruleid="access_to_the_eeprom_non-volatile_memory_in_progress">
			<type>state</type>
			<sensorId>_ACCESS_TO_THE_EEPROM_NON-VOLATILE_MEMORY_IN_PROGRESS</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Access to the EEPROM non-volatile memory in progress</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="parameter_consistency_check">
			<type>state</type>
			<sensorId>_PARAMETER_CONSISTENCY_CHECK</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Parameter consistency check</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_drive_is_in_fault_state_but_the_fault_is_no_longer_present_(not_reset)">
			<type>state</type>
			<sensorId>_THE_DRIVE_IS_IN_FAULT_STATE_BUT_THE_FAULT_IS_NO_LONGER_PRESENT_(NOT_RESET)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The drive is in fault state but the fault is no longer present (not reset)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_drive_is_in_speed_mode">
			<type>state</type>
			<sensorId>_THE_DRIVE_IS_IN_SPEED_MODE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The drive is in speed mode</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="dc_injection_braking_(identical_to_lsr4,_bit_11)">
			<type>state</type>
			<sensorId>_DC_INJECTION_BRAKING_(IDENTICAL_TO_LSR4,_BIT_11)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DC injection braking (identical to LSR4, bit 11)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_thermal_state_threshold_reached_for_the_active_motor">
			<type>state</type>
			<sensorId>_MOTOR_THERMAL_STATE_THRESHOLD_REACHED_FOR_THE_ACTIVE_MOTOR</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor thermal state threshold reached for the active motor</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="overbraking_(identical_to_lsr5,_bit_1)">
			<type>state</type>
			<sensorId>_OVERBRAKING_(IDENTICAL_TO_LSR5,_BIT_1)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Overbraking (identical to LSR5, bit 1)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="acceleration_in_progress_(identical_to_lsr4,_bit_13)">
			<type>state</type>
			<sensorId>_ACCELERATION_IN_PROGRESS_(IDENTICAL_TO_LSR4,_BIT_13)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Acceleration in progress (identical to LSR4, bit 13)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="deceleration_in_progress_(identical_to_lsr4,_bit_14)">
			<type>state</type>
			<sensorId>_DECELERATION_IN_PROGRESS_(IDENTICAL_TO_LSR4,_BIT_14)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Deceleration in progress (identical to LSR4, bit 14)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="current_limit_in_progress">
			<type>state</type>
			<sensorId>_CURRENT_LIMIT_IN_PROGRESS</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Current limit in progress</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="fast_stop_in_progress_(identical_to_lsr4,_bit_15)">
			<type>state</type>
			<sensorId>_FAST_STOP_IN_PROGRESS_(IDENTICAL_TO_LSR4,_BIT_15)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Fast stop in progress (identical to LSR4, bit 15)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<!-- Code LRS 1-->

		<stateSensor ruleid="the_drive_is_in_fault_state.">
			<type>state</type>
			<sensorId>_THE_DRIVE_IS_IN_FAULT_STATE.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The drive is in fault state.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_output_contactor_is_controlled">
			<type>state</type>
			<sensorId>_THE_OUTPUT_CONTACTOR_IS_CONTROLLED</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The output contactor is controlled</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="frequency_threshold_(ftd)_reached:_[freq._th._attained]_(fta)">
			<type>state</type>
			<sensorId>_FREQUENCY_THRESHOLD_(FTD)_REACHED:_[FREQ._TH._ATTAINED]_(FTA)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Frequency threshold (ftd) reached: [Freq. Th. attained] (FtA)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="high_speed_(hsp)_reached:_[hsp_attained]_(fla)">
			<type>state</type>
			<sensorId>_HIGH_SPEED_(HSP)_REACHED:_[HSP_ATTAINED]_(FLA)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>High speed (HSP) reached: [HSP attained] (FLA)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="current_threshold_(ctd)_reached:_[current_th._attained]_(cta)">
			<type>state</type>
			<sensorId>_CURRENT_THRESHOLD_(CTD)_REACHED:_[CURRENT_TH._ATTAINED]_(CTA)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Current threshold (Ctd) reached: [Current Th. attained] (CtA)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="frequency_reference_reached:_[frequency_ref._att.]_(sra)">
			<type>state</type>
			<sensorId>_FREQUENCY_REFERENCE_REACHED:_[FREQUENCY_REF._ATT.]_(SRA)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Frequency reference reached: [Frequency ref. att.] (SrA)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_1_thermal_state_threshold_[motor_therm._level]_(ttd)_reached:_[motor_th._state_att.]_(tsa)">
			<type>state</type>
			<sensorId>_MOTOR_1_THERMAL_STATE_THRESHOLD_[MOTOR_THERM._LEVEL]_(TTD)_REACHED:_[MOTOR_TH._STATE_ATT.]_(TSA)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor 1 thermal state threshold [Motor therm. level] (ttd) reached: [Motor th. state att.] (tSA)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="brake_contactor_command_[brake_assignment]_(blc)_active">
			<type>state</type>
			<sensorId>_BRAKE_CONTACTOR_COMMAND_[BRAKE_ASSIGNMENT]_(BLC)_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Brake contactor command [Brake assignment] (bLC) active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="pid_regulator_error_alarm:_[pid_error_al]_(pee)">
			<type>state</type>
			<sensorId>_PID_REGULATOR_ERROR_ALARM:_[PID_ERROR_AL]_(PEE)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>PID regulator error alarm: [PID error al] (PEE)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="pid_regulator_feedback_alarm:_[pid_fdbk_al.]_(pfa)second_frequency_threshold_(ftd)_reached:_[freq._th._2_attained]_(fa2)">
			<type>state</type>
			<sensorId>_PID_REGULATOR_FEEDBACK_ALARM:_[PID_FDBK_AL.]_(PFA)SECOND_FREQUENCY_THRESHOLD_(FTD)_REACHED:_[FREQ._TH._2_ATTAINED]_(FA2)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>PID regulator feedback alarm: [PID fdbk al.] (PFA)Second frequency threshold (ftd) reached: [Freq. Th. 2 attained] (FA2)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="drive_thermal_state_threshold_[drv_therm._state_al]_(tha)_reached:_[th._drv._att.]_(tad)">
			<type>state</type>
			<sensorId>_DRIVE_THERMAL_STATE_THRESHOLD_[DRV_THERM._STATE_AL]_(THA)_REACHED:_[TH._DRV._ATT.]_(TAD)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Drive thermal state threshold [Drv therm. state al] (tHA) reached: [Th. drv. att.] (tAd)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_traverse_control_function_is_active">
			<type>state</type>
			<sensorId>_THE_TRAVERSE_CONTROL_FUNCTION_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The traverse control function is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<!-- Code LRS 2-->

		<stateSensor ruleid="rope_slack_(see_parameter_[rope_slack_config.]_(rsd)).">
			<type>state</type>
			<sensorId>_ROPE_SLACK_(SEE_PARAMETER_[ROPE_SLACK_CONFIG.]_(RSD)).</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3251</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Rope slack (see parameter [Rope slack config.] (rSd)).</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="[high_torque_alarm]_(ttha):_high_torque_threshold_reached_[high_torque_thd.]_(tth).">
			<type>state</type>
			<sensorId>_[HIGH_TORQUE_ALARM]_(TTHA):_HIGH_TORQUE_THRESHOLD_REACHED_[HIGH_TORQUE_THD.]_(TTH).</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3251</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>[High torque alarm] (ttHA): High torque threshold reached [High torque thd.] (ttH).</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="[low_torque_alarm]_(ttla):_low_torque_threshold_reached_[low_torque_thd.]_(ttl).">
			<type>state</type>
			<sensorId>_[LOW_TORQUE_ALARM]_(TTLA):_LOW_TORQUE_THRESHOLD_REACHED_[LOW_TORQUE_THD.]_(TTL).</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3251</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>[Low torque alarm] (ttLA): Low torque threshold reached [Low torque thd.] (ttL).</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="[forwardt]_(mfrd):_motor_direction_forward.">
			<type>state</type>
			<sensorId>_[FORWARDT]_(MFRD):_MOTOR_DIRECTION_FORWARD.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3251</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>[Forwardt] (MFrd): Motor direction Forward.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="[reverse]_(mrrs):_motor_direction_reverse.">
			<type>state</type>
			<sensorId>_[REVERSE]_(MRRS):_MOTOR_DIRECTION_REVERSE.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3251</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>[Reverse] (MrrS): Motor direction Reverse.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<alarmFlags ruleid="code_lrs_2_alarm">
			<value>
				<getOid>Reg_3251</getOid>
			</value>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>Undeload alarm (ULA) present</activeText>
					<inactiveText>Undeload alarm (ULA) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Undeload alarm (ULA) condition exists.</activeText>
					<inactiveText>An Undeload alarm (ULA) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Overload alarm (OLA) present</activeText>
					<inactiveText>Overload alarm (OLA) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Overload alarm (OLA) condition exists.</activeText>
					<inactiveText>An Overload alarm (OLA) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<!-- Code LRS3 -->
		<stateSensor ruleid="reference_channel_lrs3">
			<type>state</type>
			<sensorId>_REFERENCE_CHANNEL_LRS3</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Reference channel LRS3</label>
			<enum>reference_channel_lrs3_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<enumMap ruleid="reference_channel_lrs3_enum">
			<label>1 or 1B (Fr1) or (Fr1b) is active</label>
			<label>2 (Fr2) is active</label>
		</enumMap>
		<stateSensor ruleid="command_channel_lrs_3">
			<type>state</type>
			<sensorId>_COMMAND_CHANNEL_LRS_3</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command channel LRS 3</label>
			<enum>command_channel_lrs_3_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<enumMap ruleid="command_channel_lrs_3_enum">
			<label>1 (Cd1) is active</label>
			<label>2 (Cd2) is active</label>
		</enumMap>
		<stateSensor ruleid="ramp_set_lrs_3">
			<type>state</type>
			<sensorId>_RAMP_SET_LRS_3</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Ramp set LRS 3</label>
			<enum>ramp_set_lrs_3_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<enumMap ruleid="ramp_set_lrs_3_enum">
			<label>1 (ACC) and (dEC)</label>
			<label>2 (AC2) and (dE2)</label>
		</enumMap>
		<stateSensor ruleid="current_limit_lrs3">
			<type>state</type>
			<sensorId>_CURRENT_LIMIT_LRS3</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Current limit LRS3</label>
			<enum>current_limit_lrs3_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<enumMap ruleid="current_limit_lrs3_enum">
			<label>1 (CLI) is active</label>
			<label>2 (CL2) is active</label>
		</enumMap>
		<stateSensor ruleid="the_output_torque_is_lrs3">
			<type>state</type>
			<sensorId>_THE_OUTPUT_TORQUE_IS_LRS3</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The output torque is LRS3</label>
			<enum>the_output_torque_is_lrs3_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<enumMap ruleid="the_output_torque_is_lrs3_enum">
			<label>is positive (forward)</label>
			<label>is negative (reverse)</label>
		</enumMap>
		<stateSensor ruleid="motor_2_thermal_state_threshold_[motor2_therm._level]_(ttd2)_reached:_[th.mot2_att]_(ts2)">
			<type>state</type>
			<sensorId>_MOTOR_2_THERMAL_STATE_THRESHOLD_[MOTOR2_THERM._LEVEL]_(TTD2)_REACHED:_[TH.MOT2_ATT]_(TS2)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor 2 thermal state threshold [Motor2 therm. level] (ttd2) reached: [Th.mot2 att] (tS2)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_3_thermal_state_threshold_[motor3_therm._level]_(ttd3)_reached:_[th.mot3_att]_(ts3)">
			<type>state</type>
			<sensorId>_MOTOR_3_THERMAL_STATE_THRESHOLD_[MOTOR3_THERM._LEVEL]_(TTD3)_REACHED:_[TH.MOT3_ATT]_(TS3)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor 3 thermal state threshold [Motor3 therm. level] (ttd3) reached: [Th.mot3 att] (tS3)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="24_vdc_external_power_supply_present">
			<type>state</type>
			<sensorId>_24_VDC_EXTERNAL_POWER_SUPPLY_PRESENT</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>24 VDC external power supply present</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="stop_on_low_speed_time_limit_function_[low_speed_time_out]_(tls)">
			<type>state</type>
			<sensorId>_STOP_ON_LOW_SPEED_TIME_LIMIT_FUNCTION_[LOW_SPEED_TIME_OUT]_(TLS)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3252</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Stop on low speed time limit function [Low speed time out] (tLS)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<!-- Code LRS 4 -->

		<stateSensor ruleid="configuration_0_is_active">
			<type>state</type>
			<sensorId>_CONFIGURATION_0_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Configuration 0 is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="configuration_1_is_active_[cnfg.1_act.]_(cnf1)">
			<type>state</type>
			<sensorId>_CONFIGURATION_1_IS_ACTIVE_[CNFG.1_ACT.]_(CNF1)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Configuration 1 is active [Cnfg.1 act.] (CnF1)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="configuration_2_is_active_[cnfg.2_act.]_(cnf2)">
			<type>state</type>
			<sensorId>_CONFIGURATION_2_IS_ACTIVE_[CNFG.2_ACT.]_(CNF2)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Configuration 2 is active [Cnfg.2 act.] (CnF2)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="parameter_set_1_is_active:_[set_1_active]_(cfp1)">
			<type>state</type>
			<sensorId>_PARAMETER_SET_1_IS_ACTIVE:_[SET_1_ACTIVE]_(CFP1)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Parameter set 1 is active: [Set 1 active] (CFP1)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="parameter_set_2_is_active:_[set_2_active]_(cfp2)">
			<type>state</type>
			<sensorId>_PARAMETER_SET_2_IS_ACTIVE:_[SET_2_ACTIVE]_(CFP2)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Parameter set 2 is active: [Set 2 active] (CFP2)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="parameter_set_3_is_active:_[set_3_active]_(cfp3)">
			<type>state</type>
			<sensorId>_PARAMETER_SET_3_IS_ACTIVE:_[SET_3_ACTIVE]_(CFP3)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Parameter set 3 is active: [Set 3 active] (CFP3)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="power_section_line_supply_absent">
			<type>state</type>
			<sensorId>_POWER_SECTION_LINE_SUPPLY_ABSENT</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Power section line supply absent</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="motor_fluxing_in_progress:_[in_motor_fluxing]_(flx)">
			<type>state</type>
			<sensorId>_MOTOR_FLUXING_IN_PROGRESS:_[IN_MOTOR_FLUXING]_(FLX)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Motor fluxing in progress: [In motor fluxing] (FLX)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_motor_is_fluxed">
			<type>state</type>
			<sensorId>_THE_MOTOR_IS_FLUXED</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The motor is fluxed</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="dc_injection_braking_(identical_to_eti,_bit_5)">
			<type>state</type>
			<sensorId>_DC_INJECTION_BRAKING_(IDENTICAL_TO_ETI,_BIT_5)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>11</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>DC injection braking (identical to ETI, bit 5)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="current_limiting_in_progress">
			<type>state</type>
			<sensorId>_CURRENT_LIMITING_IN_PROGRESS</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>12</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Current limiting in progress</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="acceleration_in_progress_(identical_to_eti,_bit_9)">
			<type>state</type>
			<sensorId>_ACCELERATION_IN_PROGRESS_(IDENTICAL_TO_ETI,_BIT_9)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Acceleration in progress (identical to ETI, bit 9)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="deceleration_in_progress_(identical_to_eti,_bit_10)">
			<type>state</type>
			<sensorId>_DECELERATION_IN_PROGRESS_(IDENTICAL_TO_ETI,_BIT_10)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Deceleration in progress (identical to ETI, bit 10)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="fast_stop_in_progress:_[fast_stop_in_prog.]_(fst)_(identical_to_eti,_bit_12)">
			<type>state</type>
			<sensorId>_FAST_STOP_IN_PROGRESS:_[FAST_STOP_IN_PROG.]_(FST)_(IDENTICAL_TO_ETI,_BIT_12)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3253</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Fast stop in progress: [Fast stop in prog.] (FSt) (identical to ETI, bit 12)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<!--Code LRS 5 -->
		<alarmFlags ruleid="code_lrs_5_alarm">
			<value>
				<getOid>Reg_3254</getOid>
			</value>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>[Freq. meter Alarm] (FqLA): Measured speed threshold reached: [Pulse warning thd.] (FqL). present</activeText>
					<inactiveText>[Freq. meter Alarm] (FqLA): Measured speed threshold reached: [Pulse warning thd.] (FqL). Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An [Freq. meter Alarm] (FqLA): Measured speed threshold reached: [Pulse warning thd.] (FqL). condition exists.</activeText>
					<inactiveText>An [Freq. meter Alarm] (FqLA): Measured speed threshold reached: [Pulse warning thd.] (FqL). condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>

			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>[Dynamic load alarm] (dLdA): Detection dynamic load alarm (see [DYNAMIC LOAD DETECT.] (dLd-)). present</activeText>
					<inactiveText>[Dynamic load alarm] (dLdA): Detection dynamic load alarm (see [DYNAMIC LOAD DETECT.] (dLd-)). Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An [Dynamic load alarm] (dLdA): Detection dynamic load alarm (see [DYNAMIC LOAD DETECT.] (dLd-)). condition exists.</activeText>
					<inactiveText>An [Dynamic load alarm] (dLdA): Detection dynamic load alarm (see [DYNAMIC LOAD DETECT.] (dLd-)). condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<stateSensor ruleid="drive_dc_bus_loading:_[dc_bus_loading]_(dbl)">
			<type>state</type>
			<sensorId>_DRIVE_DC_BUS_LOADING:_[DC_BUS_LOADING]_(DBL)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Drive DC bus loading: [DC bus loading] (dbL)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="drive_braking_[in_braking]_(brs)">
			<type>state</type>
			<sensorId>_DRIVE_BRAKING_[IN_BRAKING]_(BRS)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Drive braking [In braking] (brS)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_power_removal_function_is_active">
			<type>state</type>
			<sensorId>_THE_POWER_REMOVAL_FUNCTION_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The Power removal function is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="automatic_restart_attempts_in_progress:_[auto_restart]_(auto)">
			<type>state</type>
			<sensorId>_AUTOMATIC_RESTART_ATTEMPTS_IN_PROGRESS:_[AUTO_RESTART]_(AUTO)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Automatic restart attempts in progress: [Auto restart] (AUtO)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="auto-tuning_in_progress:_[auto-tuning]_(tun)">
			<type>state</type>
			<sensorId>_AUTO-TUNING_IN_PROGRESS:_[AUTO-TUNING]_(TUN)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Auto-tuning in progress: [Auto-tuning] (tUn)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="controlled_stop_in_progress_following_loss_of_power_section_line_supply_(ctl)">
			<type>state</type>
			<sensorId>_CONTROLLED_STOP_IN_PROGRESS_FOLLOWING_LOSS_OF_POWER_SECTION_LINE_SUPPLY_(CTL)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Controlled stop in progress following loss of power section line supply (CTL)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_drive_cannot_follow_the_configured_deceleration_ramp,_deceleration_automatically_adapted_(obr)">
			<type>state</type>
			<sensorId>_THE_DRIVE_CANNOT_FOLLOW_THE_CONFIGURED_DECELERATION_RAMP,_DECELERATION_AUTOMATICALLY_ADAPTED_(OBR)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The drive cannot follow the configured deceleration ramp, deceleration automatically adapted (OBR)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="controlled_output_cut_in_progress_(soc)">
			<type>state</type>
			<sensorId>_CONTROLLED_OUTPUT_CUT_IN_PROGRESS_(SOC)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Controlled output cut in progress (SOC)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_line_contactor_is_active">
			<type>state</type>
			<sensorId>_THE_LINE_CONTACTOR_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The line contactor is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="autotune_complete_(tud)">
			<type>state</type>
			<sensorId>_AUTOTUNE_COMPLETE_(TUD)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>10</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Autotune complete (TUD)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="current_present_in_the_motor_(mcp)">
			<type>state</type>
			<sensorId>_CURRENT_PRESENT_IN_THE_MOTOR_(MCP)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>13</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Current present in the motor (MCP)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="if_the_limit_switch_management_[limit_switches]_function_is_activated._the_[stop_fw_limit_sw.]_or_[stop_rv_limit_sw.]_stops_are_reached.">
			<type>state</type>
			<sensorId>_IF_THE_LIMIT_SWITCH_MANAGEMENT_[LIMIT_SWITCHES]_FUNCTION_IS_ACTIVATED._THE_[STOP_FW_LIMIT_SW.]_OR_[STOP_RV_LIMIT_SW.]_STOPS_ARE_REACHED.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3254</getOid>
									</op>
									<op>14</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>If the limit switch management [LIMIT SWITCHES] function is activated. The [Stop FW limit sw.] or [Stop RV limit sw.] stops are reached.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<!--Code LRS 6-->

		<alarmFlags ruleid="code_lrs_6_alarm">
			<value>
				<getOid>Reg_3255</getOid>
			</value>
			<alarmFlagsTest mask="1" match="1">
				<name>
					<activeText>Alarm group 1 is active </activeText>
					<inactiveText>Alarm group 1 is active </inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Alarm group 1 is active condition exists.</activeText>
					<inactiveText>An Alarm group 1 is active condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="2" match="2">
				<name>
					<activeText>Alarm group 2 is active </activeText>
					<inactiveText>Alarm group 2 is active </inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Alarm group 2 is active condition exists.</activeText>
					<inactiveText>An Alarm group 2 is active condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="4" match="4">
				<name>
					<activeText>Alarm group 3 is active </activeText>
					<inactiveText>Alarm group 3 is active </inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Alarm group 3 is active condition exists.</activeText>
					<inactiveText>An Alarm group 3 is active condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="20" match="20">
				<name>
					<activeText>LI6 PTC probe alarm: [LI6 =PTC alarm] (PtC3) present</activeText>
					<inactiveText>LI6 PTC probe alarm: [LI6 =PTC alarm] (PtC3) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An LI6 PTC probe alarm: [LI6 =PTC alarm] (PtC3) condition exists.</activeText>
					<inactiveText>An LI6 PTC probe alarm: [LI6 =PTC alarm] (PtC3) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="80" match="80">
				<name>
					<activeText>External fault [External fault alarm] (EtF) present</activeText>
					<inactiveText>External fault [External fault alarm] (EtF) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An External fault [External fault alarm] (EtF) condition exists.</activeText>
					<inactiveText>An External fault [External fault alarm] (EtF) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="100" match="100">
				<name>
					<activeText>Undervoltage alarm [Undervoltage] (USA) present</activeText>
					<inactiveText>Undervoltage alarm [Undervoltage] (USA) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Undervoltage alarm [Undervoltage] (USA) condition exists.</activeText>
					<inactiveText>An Undervoltage alarm [Undervoltage] (USA) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="200" match="200">
				<name>
					<activeText>Undervoltage prevention Alarm present</activeText>
					<inactiveText>Undervoltage prevention Alarm Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Undervoltage prevention Alarm condition exists.</activeText>
					<inactiveText>An Undervoltage prevention Alarm condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>Drive overheat alarm (tHA) present</activeText>
					<inactiveText>Drive overheat alarm (tHA) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Drive overheat alarm (tHA) condition exists.</activeText>
					<inactiveText>An Drive overheat alarm (tHA) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="8000" match="8000">
				<name>
					<activeText>Current or torque limit alarm after time-out [Trq/I limit. time out] (StO) present</activeText>
					<inactiveText>Current or torque limit alarm after time-out [Trq/I limit. time out] (StO) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Current or torque limit alarm after time-out [Trq/I limit. time out] (StO) condition exists.</activeText>
					<inactiveText>An Current or torque limit alarm after time-out [Trq/I limit. time out] (StO) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>

		<!--Code LRS 7-->

		<alarmFlags ruleid="code_lrs_7_alarm">
			<value>
				<getOid>Reg_3256</getOid>
			</value>
			<alarmFlagsTest mask="40" match="40">
				<name>
					<activeText>Master-slave synchronization ("traverse control" function) present</activeText>
					<inactiveText>Master-slave synchronization ("traverse control" function) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An Master-slave synchronization ("traverse control" function) condition exists.</activeText>
					<inactiveText>An Master-slave synchronization ("traverse control" function) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
			<alarmFlagsTest mask="800" match="800">
				<name>
					<activeText>4-20 mA alarm on analog input AI3: [AI3 4-20 mA loss] (LFF3) present</activeText>
					<inactiveText>4-20 mA alarm on analog input AI3: [AI3 4-20 mA loss] (LFF3) Cleared</inactiveText>
				</name>
				<severity>warning</severity>
				<category>System</category>
				<description>
					<activeText>An 4-20 mA alarm on analog input AI3: [AI3 4-20 mA loss] (LFF3) condition exists.</activeText>
					<inactiveText>An 4-20 mA alarm on analog input AI3: [AI3 4-20 mA loss] (LFF3) condition no longer exists.</inactiveText>
				</description>
			</alarmFlagsTest>
		</alarmFlags>
		<stateSensor ruleid="reference_channel_1_or_1b_(fr1)_or_(fr1b)_is_active">
			<type>state</type>
			<sensorId>_REFERENCE_CHANNEL_1_OR_1B_(FR1)_OR_(FR1B)_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Reference channel 1 or 1B (Fr1) or (Fr1b) is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="reference_channel_2_(fr2)_is_active">
			<type>state</type>
			<sensorId>_REFERENCE_CHANNEL_2_(FR2)_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Reference channel 2 (Fr2) is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_channel_1_(cd1)_is_active">
			<type>state</type>
			<sensorId>_COMMAND_CHANNEL_1_(CD1)_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command channel 1 (Cd1) is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="command_channel_2_(cd2)_is_active">
			<type>state</type>
			<sensorId>_COMMAND_CHANNEL_2_(CD2)_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Command channel 2 (Cd2) is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="reference_channel_1b_(fr1b)_is_active">
			<type>state</type>
			<sensorId>_REFERENCE_CHANNEL_1B_(FR1B)_IS_ACTIVE</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Reference channel 1B (Fr1b) is active</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="spool_end_(traverse_control_function)">
			<type>state</type>
			<sensorId>_SPOOL_END_(TRAVERSE_CONTROL_FUNCTION)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>5</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Spool end (traverse control function)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="master-slave_synchronization_(traverse_control_function)">
			<type>state</type>
			<sensorId>_MASTER-SLAVE_SYNCHRONIZATION_(TRAVERSE_CONTROL_FUNCTION)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3256</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Master-slave synchronization (traverse control function)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<!-- Code LRS8 -->
		<stateSensor ruleid="force_local_mode_activated_(flo)">
			<type>state</type>
			<sensorId>_FORCE_LOCAL_MODE_ACTIVATED_(FLO)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3257</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>force local mode activated (FLO)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="drive_ready(rdy)">
			<type>state</type>
			<sensorId>_DRIVE_READY(RDY)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3257</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Drive ready(rdY)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<!-- Code IL1R -->

		<!-- Code OL1R-->
		<!-- Code PIL1-->
		<!-- Code POL1-->
		<!-- Code CIC-->
		<stateSensor ruleid="change_of_rating.">
			<type>state</type>
			<sensorId>_CHANGE_OF_RATING.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_7130</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Change of rating.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_network_card_has_been_removed.">
			<type>state</type>
			<sensorId>_THE_NETWORK_CARD_HAS_BEEN_REMOVED.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_7130</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The network card has been removed.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="saving_to_the_eeprom_non-volatile_memory_is_inconsistent_with_power_on.">
			<type>state</type>
			<sensorId>_SAVING_TO_THE_EEPROM_NON-VOLATILE_MEMORY_IS_INCONSISTENT_WITH_POWER_ON.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_7130</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>Saving to the EEPROM non-volatile memory is inconsistent with power on.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="the_network_card_has_been_changed.">
			<type>state</type>
			<sensorId>_THE_NETWORK_CARD_HAS_BEEN_CHANGED.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_7130</getOid>
									</op>
									<op>4</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>The network card has been changed.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Fault parameters</sensorSet>
		</stateSensor>
		<!-- Code CRC-->
		<stateSensor ruleid="crc_the_terminal_board_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_THE_TERMINAL_BOARD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The terminal board is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_the_local_keypad_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_THE_LOCAL_KEYPAD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The local keypad is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_the_remote_keypad_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_THE_REMOTE_KEYPAD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The remote keypad is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_modbus_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_MODBUS_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC Modbus is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_canopen_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_CANOPEN_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC CANopen is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_the_terminals_are_the_active_channel_in_the_+/-_speed_reference.">
			<type>state</type>
			<sensorId>_CRC_THE_TERMINALS_ARE_THE_ACTIVE_CHANNEL_IN_THE_+/-_SPEED_REFERENCE.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The terminals are the active channel in the +/- speed reference.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_the_remote_keypad_is_the_active_channel_(up-down_speed)">
			<type>state</type>
			<sensorId>_CRC_THE_REMOTE_KEYPAD_IS_THE_ACTIVE_CHANNEL_(UP-DOWN_SPEED)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The remote keypad is the active channel (up-down speed)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_the_network_card_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_THE_NETWORK_CARD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC The network card is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="crc_somove_software_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CRC_SOMOVE_SOFTWARE_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8441</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CRC SoMove software is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<!-- Code CCC-->
		<stateSensor ruleid="ccc_the_terminal_board_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_THE_TERMINAL_BOARD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>0</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The terminal board is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_the_local_keypad_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_THE_LOCAL_KEYPAD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>1</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The local keypad is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_the_remote_keypad_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_THE_REMOTE_KEYPAD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The remote keypad is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_modbus_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_MODBUS_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>3</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC Modbus is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_canopen_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_CANOPEN_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC CANopen is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_the_terminals_are_the_active_channel_in_the_+/-_speed_reference.">
			<type>state</type>
			<sensorId>_CCC_THE_TERMINALS_ARE_THE_ACTIVE_CHANNEL_IN_THE_+/-_SPEED_REFERENCE.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>7</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The terminals are the active channel in the +/- speed reference.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_the_remote_keypad_is_the_active_channel_(up-down_speed)">
			<type>state</type>
			<sensorId>_CCC_THE_REMOTE_KEYPAD_IS_THE_ACTIVE_CHANNEL_(UP-DOWN_SPEED)</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>8</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The remote keypad is the active channel (up-down speed)</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_the_network_card_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_THE_NETWORK_CARD_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>9</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC The network card is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="ccc_somove_software_is_the_active_channel.">
			<type>state</type>
			<sensorId>_CCC_SOMOVE_SOFTWARE_IS_THE_ACTIVE_CHANNEL.</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_8442</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>CCC SoMove software is the active channel.</label>
			<enum>yes_no_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<!-- Code ETA-->


		<stateSensor ruleid="drive_state_eti">
			<type>state</type>
			<sensorId>_DRIVE_STATE_ETI</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>6</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>drive state - ETI</label>
			<enum>drive_state_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>
		<stateSensor ruleid="operation_before_the_ramp">
			<type>state</type>
			<sensorId>_OPERATION_BEFORE_THE_RAMP</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3206</getOid>
									</op>
									<op>15</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>operation before the ramp</label>
			<enum>operation_before_the_ramp_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<enumMap ruleid="operation_before_the_ramp_enum">
			<label>Forward operation applied before the ramp</label>
			<label>Reverse operation applied before the ramp</label>
		</enumMap>

		<enumMap ruleid="drive_state_enum">
			<label>Drive in steady state</label>
			<label>Drive in transient state</label>
		</enumMap>

		<stateSensor ruleid="drive_state_lrs1">
			<type>state</type>
			<sensorId>_DRIVE_STATE_LRS1</sensorId>
			<value>
				<mapValue mapid="two_state_valuemap">
					<formatNumber printffmt="%1.0f">
						<bitwise_and>
							<op>
								<right_shift>
									<op>
										<getOid>Reg_3250</getOid>
									</op>
									<op>2</op>
								</right_shift>
							</op>
							<op>1</op>
						</bitwise_and>
					</formatNumber>
				</mapValue>
			</value>
			<label>drive state LRS1</label>
			<enum>drive_state_lrs1_enum</enum>
			<sensorSet>Status parameters</sensorSet>
		</stateSensor>

		<enumMap ruleid="drive_state_lrs1_enum">
			<label>The drive is locked, the motor is not powered</label>
			<label>The drive is unlocked, power can be supplied to the motor (RUN state)</label>
		</enumMap>

		<valueMap ruleid="two_state_valuemap">
			<valueIn>0</valueIn>
			<valueOut>0</valueOut>
			<valueIn>1</valueIn>
			<valueOut>1</valueOut>
			<valueIn>*</valueIn>
			<valueOut>0</valueOut>
		</valueMap>
		<enumMap ruleid="yes_no_enum">
			<label>No</label>
			<label>Yes</label>
		</enumMap>

		<!-- I/O Parameter-->
		<numSensor ruleid="value_of_li1">
			<type>num</type>
			<sensorId>_VALUE_OF_LI1</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI1</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_li2">
			<type>num</type>
			<sensorId>_VALUE_OF_LI2</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI2</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_li3">
			<type>num</type>
			<sensorId>_VALUE_OF_LI3</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI3</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_li4">
			<type>num</type>
			<sensorId>_VALUE_OF_LI4</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI4</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_li5">
			<type>num</type>
			<sensorId>_VALUE_OF_LI5</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI5</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_li6">
			<type>num</type>
			<sensorId>_VALUE_OF_LI6</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5202</getOid>
								</op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LI6</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_r1">
			<type>num</type>
			<sensorId>_VALUE_OF_R1</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5212</getOid>
								</op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of R1</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="value_of_r2">
			<type>num</type>
			<sensorId>_VALUE_OF_R2</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5212</getOid>
								</op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of R2</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>

		<numSensor ruleid="value_of_lo1">
			<type>num</type>
			<sensorId>_VALUE_OF_LO1</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_5212</getOid>
								</op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>Value of LO1</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li51_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI51_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI51 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li52_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI52_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>1</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI52 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li53_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI53_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>2</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI53 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li54_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI54_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>3</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI54 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li55_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI55_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>4</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI55 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li56_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI56_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>5</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI56 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li57_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI57_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>6</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI57 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li58_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI58_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>7</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI58 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li59_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI59_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI59 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="li60_logic_input_physical_image">
			<type>num</type>
			<sensorId>_LI60_LOGIC_INPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6901</getOid>
								</op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LI60 logic input physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo51_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO51_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>8</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO51 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo52_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO52_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>9</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO52 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo53_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO53_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>10</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO53 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo54_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO54_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>11</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO54 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo55_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO55_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>12</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO55 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
		<numSensor ruleid="lo56_logic_output_physical_image">
			<type>num</type>
			<sensorId>_LO56_LOGIC_OUTPUT_PHYSICAL_IMAGE</sensorId>
			<value>
				<formatNumber printffmt="%1.0f">
					<bitwise_and>
						<op>
							<right_shift>
								<op>
									<getOid>Reg_6911</getOid>
								</op>
								<op>13</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
				</formatNumber>
			</value>
			<label>LO56 logic output physical image</label>
			<sensorSet>I/O parameters</sensorSet>
		</numSensor>
	</device>
	<protocol>
		<modbus>
			<value_ref_id valid="Reg_5244">
				<function>3</function>
				<start_addr>5243</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6942">
				<function>3</function>
				<start_addr>6941</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6943">
				<function>3</function>
				<start_addr>6942</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6971">
				<function>3</function>
				<start_addr>6970</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6972">
				<function>3</function>
				<start_addr>6971</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5242">
				<function>3</function>
				<start_addr>5241</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5243">
				<function>3</function>
				<start_addr>5242</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3205">
				<function>3</function>
				<start_addr>3204</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8505">
				<function>3</function>
				<start_addr>8504</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9231">
				<function>3</function>
				<start_addr>9230</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5281">
				<function>3</function>
				<start_addr>5280</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3017">
				<function>3</function>
				<start_addr>3016</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3204">
				<function>3</function>
				<start_addr>3203</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_11983">
				<function>3</function>
				<start_addr>11982</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_12102">
				<function>3</function>
				<start_addr>12101</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3202">
				<function>3</function>
				<start_addr>3201</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3203">
				<function>3</function>
				<start_addr>3202</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3219">
				<function>3</function>
				<start_addr>3218</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8502">
				<function>3</function>
				<start_addr>8501</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9021">
				<function>3</function>
				<start_addr>9020</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3207">
				<function>3</function>
				<start_addr>3206</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_11980">
				<function>3</function>
				<start_addr>11979</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5232">
				<function>3</function>
				<start_addr>5231</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5233">
				<function>3</function>
				<start_addr>5232</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5234">
				<function>3</function>
				<start_addr>5233</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5235">
				<function>3</function>
				<start_addr>5234</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5261">
				<function>3</function>
				<start_addr>5260</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5262">
				<function>3</function>
				<start_addr>5261</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5263">
				<function>3</function>
				<start_addr>5262</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5283">
				<function>3</function>
				<start_addr>5282</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_11981">
				<function>3</function>
				<start_addr>11980</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_11982">
				<function>3</function>
				<start_addr>11981</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3302">
				<function>3</function>
				<start_addr>3301</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3340">
				<function>3</function>
				<start_addr>3339</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3341">
				<function>3</function>
				<start_addr>3340</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3342">
				<function>3</function>
				<start_addr>3341</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3343">
				<function>3</function>
				<start_addr>3342</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3344">
				<function>3</function>
				<start_addr>3343</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3345">
				<function>3</function>
				<start_addr>3344</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3346">
				<function>3</function>
				<start_addr>3345</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3347">
				<function>3</function>
				<start_addr>3346</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5611">
				<function>3</function>
				<start_addr>5610</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_64233">
				<function>3</function>
				<start_addr>64232</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_64270">
				<function>3</function>
				<start_addr>64269</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_64280">
				<function>3</function>
				<start_addr>64279</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6692">
				<function>3</function>
				<start_addr>6691</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6981">
				<function>3</function>
				<start_addr>6980</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6982">
				<function>3</function>
				<start_addr>6981</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6983">
				<function>3</function>
				<start_addr>6982</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6984">
				<function>3</function>
				<start_addr>6983</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6985">
				<function>3</function>
				<start_addr>6984</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6986">
				<function>3</function>
				<start_addr>6985</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6987">
				<function>3</function>
				<start_addr>6986</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6988">
				<function>3</function>
				<start_addr>6987</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7132">
				<function>3</function>
				<start_addr>7131</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7133">
				<function>3</function>
				<start_addr>7132</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7134">
				<function>3</function>
				<start_addr>7133</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7135">
				<function>3</function>
				<start_addr>7134</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7140">
				<function>3</function>
				<start_addr>7139</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7391">
				<function>3</function>
				<start_addr>7390</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7392">
				<function>3</function>
				<start_addr>7391</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7393">
				<function>3</function>
				<start_addr>7392</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8503">
				<function>3</function>
				<start_addr>8502</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3211">
				<function>3</function>
				<start_addr>3210</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_11831">
				<function>3</function>
				<start_addr>11830</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_14114">
				<function>3</function>
				<start_addr>14113</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3209">
				<function>3</function>
				<start_addr>3208</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9630">
				<function>3</function>
				<start_addr>9629</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3236">
				<function>3</function>
				<start_addr>3235</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_14603">
				<function>3</function>
				<start_addr>14602</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8602">
				<function>3</function>
				<start_addr>8601</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8604">
				<function>3</function>
				<start_addr>8603</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8605">
				<function>3</function>
				<start_addr>8604</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8641">
				<function>3</function>
				<start_addr>8640</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3235">
				<function>3</function>
				<start_addr>3234</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3242">
				<function>3</function>
				<start_addr>3241</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3208">
				<function>3</function>
				<start_addr>3207</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5245">
				<function>3</function>
				<start_addr>5244</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5271">
				<function>3</function>
				<start_addr>5270</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5272">
				<function>3</function>
				<start_addr>5271</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5273">
				<function>3</function>
				<start_addr>5272</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3230">
				<function>3</function>
				<start_addr>3229</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3231">
				<function>3</function>
				<start_addr>3230</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3233">
				<function>3</function>
				<start_addr>3232</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3237">
				<function>3</function>
				<start_addr>3236</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9619">
				<function>3</function>
				<start_addr>9618</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9645">
				<function>3</function>
				<start_addr>9644</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_9617">
				<function>3</function>
				<start_addr>9616</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8020">
				<function>3</function>
				<start_addr>8019</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7121">
				<function>3</function>
				<start_addr>7120</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6690">
				<function>3</function>
				<start_addr>6689</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3240">
				<function>3</function>
				<start_addr>3239</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3012">
				<function>3</function>
				<start_addr>3011</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3011">
				<function>3</function>
				<start_addr>3010</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3009">
				<function>3</function>
				<start_addr>3008</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_14815">
				<function>3</function>
				<start_addr>14814</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3206">
				<function>3</function>
				<start_addr>3205</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3250">
				<function>3</function>
				<start_addr>3249</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3251">
				<function>3</function>
				<start_addr>3250</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3252">
				<function>3</function>
				<start_addr>3251</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3253">
				<function>3</function>
				<start_addr>3252</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3254">
				<function>3</function>
				<start_addr>3253</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3256">
				<function>3</function>
				<start_addr>3255</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_3257">
				<function>3</function>
				<start_addr>3256</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_7130">
				<function>3</function>
				<start_addr>7129</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8441">
				<function>3</function>
				<start_addr>8440</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_8442">
				<function>3</function>
				<start_addr>8441</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="Reg_3255">
				<function>3</function>
				<start_addr>3254</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5202">
				<function>3</function>
				<start_addr>5201</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_5212">
				<function>3</function>
				<start_addr>5211</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6901">
				<function>3</function>
				<start_addr>6900</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="Reg_6911">
				<function>3</function>
				<start_addr>6910</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

		</modbus>
	</protocol>
</APC_DDF>
