<APC_DDF
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
	ddfid="liebert_160k_ups"
	ddfname="Liebert 160K UPS"
	ddfversion="2"
	canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>
	<device deviceid="liebert_160k_ups">

		<setProductData ruleid="vendordata" field="vendor">Liebert</setProductData>
		<setProductData ruleid="modeldata" field="model">160K</setProductData>
		<setProductData ruleid="typedata" field="type">UPS</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>
		
        <numSensor ruleid="INPUT_VOLTAGE_-_PHASE_1_SENSOR">
            <type>voltage</type>
            <sensorId>input_voltage_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Voltage - Phase 1</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_VOLTAGE_-_PHASE_2_SENSOR">
            <type>voltage</type>
            <sensorId>input_voltage_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Voltage - Phase 2</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_VOLTAGE_-_PHASE_3_SENSOR">
            <type>voltage</type>
            <sensorId>input_voltage_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Voltage - Phase 3</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_-_PHASE_1_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage - Phase 1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_-_PHASE_2_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage - Phase 2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_VOLTAGE_-_PHASE_3_SENSOR">
            <type>voltage</type>
            <sensorId>output_voltage_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Voltage - Phase 3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_-_PHASE_1_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Current - Phase 1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_-_PHASE_2_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Current - Phase 2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_CURRENT_-_PHASE_3_SENSOR">
            <type>amperage</type>
            <sensorId>output_current_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputcurrentphase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Current - Phase 3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_VOLTAGE_SENSOR">
            <type>voltage</type>
            <sensorId>battery_voltage</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batteryvoltage</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Voltage</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_CURRENT_-_PHASE_1_SENSOR">
            <type>amperage</type>
            <sensorId>input_current_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputcurrentphase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Current - Phase 1</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_CURRENT_-_PHASE_2_SENSOR">
            <type>amperage</type>
            <sensorId>input_current_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputcurrentphase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Current - Phase 2</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="INPUT_CURRENT_-_PHASE_3_SENSOR">
            <type>amperage</type>
            <sensorId>input_current_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>inputcurrentphase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Input Current - Phase 3</label>
            <sensorSet>Input</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_VOLTAGE_-_PHASE_1_SENSOR">
            <type>amperage</type>
            <sensorId>bypass_voltage_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypassvoltagephase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Voltage - Phase 1</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_VOLTAGE_-_PHASE_2_SENSOR">
            <type>amperage</type>
            <sensorId>bypass_voltage_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypassvoltagephase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Voltage - Phase 2</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BYPASS_VOLTAGE_-_PHASE_3_SENSOR">
            <type>amperage</type>
            <sensorId>bypass_voltage_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>bypassvoltagephase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Bypass Voltage - Phase 3</label>
            <sensorSet>Bypass</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_CURRENT_SENSOR">
            <type>amperage</type>
            <sensorId>battery_current</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterycurrent</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Current</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_-_PHASE_1_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_power_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power - Phase 1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_-_PHASE_2_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_power_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power - Phase 2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_-_PHASE_3_SENSOR">
            <type>num/powerKW</type>
            <sensorId>output_power_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowerphase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power - Phase 3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_VA_-_PHASE_1_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_va_-_phase_1</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowervaphase1</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power VA - Phase 1</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_VA_-_PHASE_2_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_va_-_phase_2</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowervaphase2</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power VA - Phase 2</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="OUTPUT_POWER_VA_-_PHASE_3_SENSOR">
            <type>num/powerKVA</type>
            <sensorId>output_power_va_-_phase_3</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>outputpowervaphase3</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Output Power VA - Phase 3</label>
            <sensorSet>Output</sensorSet>
        </numSensor>
        <numSensor ruleid="BATTERY_TIME_REMAINING_SENSOR">
            <type>timeinmin</type>
            <sensorId>battery_time_remaining</sensorId>
            <value>
                <mult>
                    <op>
                        <getOid>batterytimeremaining</getOid>
                    </op>
                    <op>1.0</op>
                </mult>
            </value>
            <label>Battery Time Remaining</label>
            <sensorSet>Battery</sensorSet>
        </numSensor>


		<!-- SPECIAL CASE STATE SENSORS -->

		<valueMap ruleid="battery_total_voltage_status_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>1</valueIn><valueOut>1</valueOut>
			<valueIn>2</valueIn><valueOut>2</valueOut>
			<valueIn>240</valueIn><valueOut>3</valueOut>
			<valueIn>225</valueIn><valueOut>4</valueOut>
			<valueIn>226</valueIn><valueOut>5</valueOut>
			<valueIn>*</valueIn><valueOut>6</valueOut>
		</valueMap>
		<enumMap ruleid="battery_total_voltage_status_em">
			<label>Normal</label>
			<label>Low (Off)</label>
			<label>High (Voltage High)</label>
			<label>No Battery</label>
			<label>Alarm</label>
			<label>Reverse Battery</label>
			<label>Unknown</label>
		</enumMap>

		<valueMap ruleid="battery_aging_status_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>240</valueIn><valueOut>1</valueOut>
			<valueIn>241</valueIn><valueOut>2</valueOut>
			<valueIn>*</valueIn><valueOut>3</valueOut>
		</valueMap>
		<enumMap ruleid="normal_battery_em">
			<label>Normal</label>
			<label>Battery Maintain</label>
			<label>Battery Out of Life</label>
			<label>Unknown</label>
		</enumMap>

		<valueMap ruleid="user_error_1_vm">
			<valueIn>224</valueIn><valueOut>0</valueOut>
			<valueIn>225</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>2</valueOut>
		</valueMap>
		<enumMap ruleid="user_error_1_em">
			<label>Off</label>
			<label>On</label>
			<label>Unknown</label>
		</enumMap>

		<valueMap ruleid="e0h_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>224</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>2</valueOut>
		</valueMap>


		
        <stateSensor ruleid="USER_ERRORS_1_SENSOR">
            <type>state</type>
            <sensorId>user_errors_1</sensorId>
            <value>
                <mapValue mapid="user_error_1_vm">
                            <getOid>usererrors1</getOid>
                </mapValue>
            </value>
            <label>User Errors 1</label>
            <sensorSet>Status</sensorSet>
            <enum>user_error_1_em</enum>
        </stateSensor>
        <stateSensor ruleid="BATTERY_TOTAL_VOLTAGE_STATUS_SENSOR">
            <type>state</type>
            <sensorId>battery_total_voltage_status</sensorId>
            <value>
                <mapValue mapid="battery_total_voltage_status_vm">
                            <getOid>batterytotalvoltagestatus</getOid>
                </mapValue>
            </value>
            <label>Battery Total Voltage Status</label>
            <sensorSet>Status</sensorSet>
            <enum>battery_total_voltage_status_em</enum>
        </stateSensor>
        <stateSensor ruleid="BATTERY_AGING_STATUS_SENSOR">
            <type>state</type>
            <sensorId>battery_aging_status</sensorId>
            <value>
                <mapValue mapid="battery_aging_status_vm">
                            <getOid>batteryagingstatus</getOid>
                </mapValue>
            </value>
            <label>Battery Aging Status</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_battery_em</enum>
        </stateSensor>
		<!-- END OF SPECIAL CASE STATE SENSORS -->



		<!-- NORMAL CASE STATE SENSORS -->
		<valueMap ruleid="map_to_enum_vm">
			<valueIn>0</valueIn><valueOut>0</valueOut>
			<valueIn>240</valueIn><valueOut>1</valueOut>
			<valueIn>224</valueIn><valueOut>1</valueOut>
			<valueIn>*</valueIn><valueOut>2</valueOut>
		</valueMap>
		<enumMap ruleid="normal_error_em">
			<label>Normal</label>
			<label>Error</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_failure_em">
			<label>Normal</label>
			<label>Failure</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_alarm_em">
			<label>Normal</label>
			<label>Alarm</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_open_em">
			<label>Normal</label>
			<label>Open</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_high_em">
			<label>Normal</label>
			<label>High</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_over_em">
			<label>Normal</label>
			<label>Over</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_over_temp_em">
			<label>Normal</label>
			<label>Over Temp</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_over_current_em">
			<label>Normal</label>
			<label>Over Current</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_over_load_em">
			<label>Normal</label>
			<label>Over Load</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_out_of_power_em">
			<label>Normal</label>
			<label>Out of Power</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="normal_urgent_turn_off_em">
			<label>Normal</label>
			<label>Urgent Turn Off</label>
			<label>Unknown</label>
		</enumMap>
		<enumMap ruleid="online_offline_em">
			<label>On-Line</label>
			<label>Off-Line</label>
			<label>Unknown</label>
		</enumMap>

        <stateSensor ruleid="MAIN_VOLTAGE_ERROR_SENSOR">
            <type>state</type>
            <sensorId>main_voltage_error</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>mainvoltageerror</getOid>
                </mapValue>
            </value>
            <label>Main Voltage Error</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_error_em</enum>
        </stateSensor>
        <stateSensor ruleid="RECTIFIER_BLOCK_SENSOR">
            <type>state</type>
            <sensorId>rectifier_block</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>rectifierblock</getOid>
                </mapValue>
            </value>
            <label>Rectifier Block</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_OUTPUT_VOLTAGE_ERROR_SENSOR">
            <type>state</type>
            <sensorId>inverter_output_voltage_error</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inverteroutputvoltageerror</getOid>
                </mapValue>
            </value>
            <label>Inverter Output Voltage Error</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_error_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_(VOLTAGE_OR_FREQUENCY)_SENSOR">
            <type>state</type>
            <sensorId>bypass_(voltage_or_frequency)</sensorId>
            <value>
                <mapValue mapid="e0h_vm">
                            <getOid>bypassvoltageorfrequency</getOid>
                </mapValue>
            </value>
            <label>Bypass (Voltage or Frequency)</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_em</enum>
        </stateSensor>
        <stateSensor ruleid="MAIN_FREQUENCY_ERROR_SENSOR">
            <type>state</type>
            <sensorId>main_frequency_error</sensorId>
            <value>
                <mapValue mapid="e0h_vm">
                            <getOid>mainfrequencyerror</getOid>
                </mapValue>
            </value>
            <label>Main Frequency Error</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_em</enum>
        </stateSensor>
        <stateSensor ruleid="MAIN_FUSE_OPEN_SENSOR">
            <type>state</type>
            <sensorId>main_fuse_open</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>mainfuseopen</getOid>
                </mapValue>
            </value>
            <label>Main Fuse Open</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_open_em</enum>
        </stateSensor>
        <stateSensor ruleid="REVERSE_MAIN_PHASE_SENSOR">
            <type>state</type>
            <sensorId>reverse_main_phase</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>reversemainphase</getOid>
                </mapValue>
            </value>
            <label>Reverse Main Phase</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="MAIN_LOST_PHASE_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>main_lost_phase_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>mainlostphasefailure</getOid>
                </mapValue>
            </value>
            <label>Main Lost Phase Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="ACCESSORY_POWER1_OUT_OF_POWER_SENSOR">
            <type>state</type>
            <sensorId>accessory_power1_out_of_power</sensorId>
            <value>
				<mapValue mapid="map_to_enum_vm">
					    	<getOid>accessorypower1outofpower</getOid>
                 </mapValue>
			</value>
            <label>Accessory Power1 Out of Power</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_out_of_power_em</enum>
        </stateSensor>
        <stateSensor ruleid="ACCESSORY_POWER2_OUT_OF_POWER_SENSOR">
            <type>state</type>
            <sensorId>accessory_power2_out_of_power</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                           <getOid>accessorypower2outofpower</getOid>
                 </mapValue>
            </value>
            <label>Accessory Power2 Out of Power</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_out_of_power_em</enum>
        </stateSensor>
        <stateSensor ruleid="RECTIFIER_CURRENT-LIMITING_SENSOR">
            <type>state</type>
            <sensorId>rectifier_current-limiting</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>rectifiercurrentlimiting</getOid>
                </mapValue>
            </value>
            <label>Rectifier Current-Limiting</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="RECTIFIER_OVER_TEMP_SENSOR">
            <type>state</type>
            <sensorId>rectifier_over_temp</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>rectifierovertemp</getOid>
                </mapValue>
            </value>
            <label>Rectifier Over Temp</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_temp_em</enum>
        </stateSensor>
        <stateSensor ruleid="INPUT_FILTER_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>input_filter_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inputfilterfailure</getOid>
                </mapValue>
            </value>
            <label>Input Filter Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_temp_em</enum>
        </stateSensor>
        <stateSensor ruleid="FILTER_OVER_CURRENT_SENSOR">
            <type>state</type>
            <sensorId>filter_over_current</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>filterovercurrent</getOid>
                </mapValue>
            </value>
            <label>Filter Over Current</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_current_em</enum>
        </stateSensor>
        <stateSensor ruleid="FILTER_CONTACTOR_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>filter_contactor_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>filtercontactorfailure</getOid>
                </mapValue>
            </value>
            <label>Filter Contactor Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="RECTIFIER_DRIVE-CABLE_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>rectifier_drive-cable_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>rectifierdrivecablefailure</getOid>
                </mapValue>
            </value>
            <label>Rectifier Drive-Cable Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="RECTIFICATION_COMMUNICATION_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>rectification_communication_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>rectificationcommunicationfailure</getOid>
                </mapValue>
            </value>
            <label>Rectification Communication Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_OVER_TEMP_SENSOR">
            <type>state</type>
            <sensorId>inverter_over_temp</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inverterovertemp</getOid>
                </mapValue>
            </value>
            <label>Inverter Over Temp</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_temp_em</enum>
        </stateSensor>
        <stateSensor ruleid="FAN_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>fan_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>fanfailure</getOid>
                </mapValue>
            </value>
            <label>Fan Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_THYRISTOR_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>inverter_thyristor_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inverterthyristorfailure</getOid>
                </mapValue>
            </value>
            <label>Inverter Thyristor Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_THYRISTOR_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>bypass_thyristor_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypassthyristorfailure</getOid>
                </mapValue>
            </value>
            <label>Bypass Thyristor Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="USER_ERRORS_2_SENSOR">
            <type>state</type>
            <sensorId>user_errors_2</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>usererrors2</getOid>
                </mapValue>
            </value>
            <label>User Errors 2</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="SINGLE_OUTPUT_OVER-LOAD_SENSOR">
            <type>state</type>
            <sensorId>single_output_over-load</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>singleoutputoverload</getOid>
                </mapValue>
            </value>
            <label>Single Output Over-Load</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_load_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_SYSTEM_OVER-LOAD_SENSOR">
            <type>state</type>
            <sensorId>parallel_system_over-load</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelsystemoverload</getOid>
                </mapValue>
            </value>
            <label>Parallel System Over-Load</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_load_em</enum>
        </stateSensor>
        <stateSensor ruleid="SINGLEOVER_LOADOVER_TIME_SENSOR">
            <type>state</type>
            <sensorId>singleover_loadover_time</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>singleoverloadovertime</getOid>
                </mapValue>
            </value>
            <label>Singleover Loadover Time</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_load_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_ERROR_TURN_OFF_SENSOR">
            <type>state</type>
            <sensorId>bypass_error_turn_off</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypasserrorturnoff</getOid>
                </mapValue>
            </value>
            <label>Bypass Error Turn Off</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_error_em</enum>
        </stateSensor>
        <stateSensor ruleid="AC_OUTPUT_OVER_VOLTAGE_SENSOR">
            <type>state</type>
            <sensorId>ac_output_over_voltage</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>acoutputovervoltage</getOid>
                </mapValue>
            </value>
            <label>AC Output Over Voltage</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_OVER_CURRENT_SENSOR">
            <type>state</type>
            <sensorId>inverter_over_current</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inverterovercurrent</getOid>
                </mapValue>
            </value>
            <label>Inverter Over Current</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_PHASE_REVERSE_SENSOR">
            <type>state</type>
            <sensorId>bypass_phase_reverse</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypassphasereverse</getOid>
                </mapValue>
            </value>
            <label>Bypass Phase Reverse</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="OVER_LOAD_TURN_TO_BYPASS_SENSOR">
            <type>state</type>
            <sensorId>over_load_turn_to_bypass</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>overloadturntobypass</getOid>
                </mapValue>
            </value>
            <label>Over Load Turn to Bypass</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="LIMITED_BYPASS_TIMES_SENSOR">
            <type>state</type>
            <sensorId>limited_bypass_times</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>limitedbypasstimes</getOid>
                </mapValue>
            </value>
            <label>Limited Bypass Times</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_FLOW_EQUILIZED_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>parallel_flow_equilized_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelflowequilizedfailure</getOid>
                </mapValue>
            </value>
            <label>Parallel Flow Equilized Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="MOTHER_CABLE_ERROR_TURN_OFF_SENSOR">
            <type>state</type>
            <sensorId>mother_cable_error_turn_off</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>mothercableerrorturnoff</getOid>
                </mapValue>
            </value>
            <label>Mother Cable Error Turn Off</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="NEIGHBOR_DEVICE_NEED_TO_BYPASS_SENSOR">
            <type>state</type>
            <sensorId>neighbor_device_need_to_bypass</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>neighbordeviceneedtobypass</getOid>
                </mapValue>
            </value>
            <label>Neighbor Device Need to Bypass</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_BOARD_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>parallel_board_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelboardfailure</getOid>
                </mapValue>
            </value>
            <label>Parallel Board Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_CABLE_CONNECTION_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>parallel_cable_connection_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelcableconnectionfailure</getOid>
                </mapValue>
            </value>
            <label>Parallel Cable Connection Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_COMMUNICATION_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>parallel_communication_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelcommunicationfailure</getOid>
                </mapValue>
            </value>
            <label>Parallel Communication Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_OVER_CURRENT_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>bypass_over_current_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypassovercurrentfailure</getOid>
                </mapValue>
            </value>
            <label>Bypass Over Current Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_INDUCTANCE_OVER_TEMP_SENSOR">
            <type>state</type>
            <sensorId>bypass_inductance_over_temp</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypassinductanceovertemp</getOid>
                </mapValue>
            </value>
            <label>Bypass Inductance Over Temp</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_temp_em</enum>
        </stateSensor>
        <stateSensor ruleid="STATIC_SWITCHOVER_TEMP_SENSOR">
            <type>state</type>
            <sensorId>static_switchover_temp</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>staticswitchovertemp</getOid>
                </mapValue>
            </value>
            <label>Static Switchover Temp</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_over_temp_em</enum>
        </stateSensor>
        <stateSensor ruleid="BYPASS_FEEDBACK_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>bypass_feedback_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>bypassfeedbackfailure</getOid>
                </mapValue>
            </value>
            <label>Bypass Feedback Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_DRIVE_CABLE_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>inverter_drive_cable_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>inverterdrivecablefailure</getOid>
                </mapValue>
            </value>
            <label>Inverter Drive Cable Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="INVERTER_COMMUNICATION_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>inverter_communication_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>invertercommunicationfailure</getOid>
                </mapValue>
            </value>
            <label>Inverter Communication Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="PARALLEL_SYSTEM_BATTERY_ALARM_FAILURE_SENSOR">
            <type>state</type>
            <sensorId>parallel_system_battery_alarm_failure</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>parallelsystembatteryalarmfailure</getOid>
                </mapValue>
            </value>
            <label>Parallel System Battery Alarm Failure</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_failure_em</enum>
        </stateSensor>
        <stateSensor ruleid="URGENT_TURN_OFF_SENSOR">
            <type>state</type>
            <sensorId>urgent_turn_off</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>urgentturnoff</getOid>
                </mapValue>
            </value>
            <label>Urgent Turn Off</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_urgent_turn_off_em</enum>
        </stateSensor>
        <stateSensor ruleid="EVIRONMENT_TEMP_HIGH_SENSOR">
            <type>state</type>
            <sensorId>evironment_temp_high</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>evironmenttemphigh</getOid>
                </mapValue>
            </value>
            <label>Evironment Temp High</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_alarm_em</enum>
        </stateSensor>
        <stateSensor ruleid="BATTERY_TEMP_HIGH_SENSOR">
            <type>state</type>
            <sensorId>battery_temp_high</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>batterytemphigh</getOid>
                </mapValue>
            </value>
            <label>Battery Temp High</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_high_em</enum>
        </stateSensor>
        <stateSensor ruleid="BATTERY_FUSE_OPEN_SENSOR">
            <type>state</type>
            <sensorId>battery_fuse_open</sensorId>
            <value>
                <mapValue mapid="map_to_enum_vm">
                            <getOid>batteryfuseopen</getOid>
                </mapValue>
            </value>
            <label>Battery Fuse Open</label>
            <sensorSet>Status</sensorSet>
            <enum>normal_open_em</enum>
        </stateSensor> 
        <stateSensor ruleid="COMMUNICATION_STATUS_SENSOR">
            <type>state</type>
            <sensorId>communication_status</sensorId>
            <value>
            	<bitwise_and>
						<op>
							<right_shift>
								<op><getOid>statusregister0</getOid></op>
								<op>0</op>
							</right_shift>
						</op>
						<op>1</op>
					</bitwise_and>
            </value>
            <label>Communication Status</label>
            <sensorSet>Status</sensorSet>
            <enum>online_offline_em</enum>
        </stateSensor> 
    </device>
    <protocol>
        <modbus>
            <value_ref_id valid="inputvoltagephase1">
                <function>3</function>
                <start_addr>0</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inputvoltagephase2">
                <function>3</function>
                <start_addr>2</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inputvoltagephase3">
                <function>3</function>
                <start_addr>4</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase1">
                <function>3</function>
                <start_addr>6</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase2">
                <function>3</function>
                <start_addr>8</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputvoltagephase3">
                <function>3</function>
                <start_addr>10</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase1">
                <function>3</function>
                <start_addr>12</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase2">
                <function>3</function>
                <start_addr>14</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputcurrentphase3">
                <function>3</function>
                <start_addr>16</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batteryvoltage">
                <function>3</function>
                <start_addr>18</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inputcurrentphase1">
                <function>3</function>
                <start_addr>20</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inputcurrentphase2">
                <function>3</function>
                <start_addr>22</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="inputcurrentphase3">
                <function>3</function>
                <start_addr>24</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypassvoltagephase1">
                <function>3</function>
                <start_addr>26</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypassvoltagephase2">
                <function>3</function>
                <start_addr>28</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="bypassvoltagephase3">
                <function>3</function>
                <start_addr>30</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterycurrent">
                <function>3</function>
                <start_addr>32</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase1">
                <function>3</function>
                <start_addr>34</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase2">
                <function>3</function>
                <start_addr>36</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowerphase3">
                <function>3</function>
                <start_addr>38</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowervaphase1">
                <function>3</function>
                <start_addr>40</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowervaphase2">
                <function>3</function>
                <start_addr>42</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="outputpowervaphase3">
                <function>3</function>
                <start_addr>44</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
            <value_ref_id valid="batterytimeremaining">
                <function>3</function>
                <start_addr>46</start_addr>
                <quantity>2</quantity>
                <type>float</type>
            </value_ref_id>
       		<value_ref_id valid="usererrors1">
                <function>3</function>
                <start_addr>48</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="mainvoltageerror">
                <function>3</function>
                <start_addr>49</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="rectifierblock">
                <function>3</function>
                <start_addr>50</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inverteroutputvoltageerror">
                <function>3</function>
                <start_addr>51</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassvoltageorfrequency">
                <function>3</function>
                <start_addr>52</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batterytotalvoltagestatus">
                <function>3</function>
                <start_addr>53</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="mainfrequencyerror">
                <function>3</function>
                <start_addr>54</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="mainfuseopen">
                <function>3</function>
                <start_addr>55</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="reversemainphase">
                <function>3</function>
                <start_addr>56</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="mainlostphasefailure">
                <function>3</function>
                <start_addr>57</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="accessorypower1outofpower">
                <function>3</function>
                <start_addr>58</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="accessorypower2outofpower">
                <function>3</function>
                <start_addr>59</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="rectifiercurrentlimiting">
                <function>3</function>
                <start_addr>60</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="rectifierovertemp">
                <function>3</function>
                <start_addr>61</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inputfilterfailure">
                <function>3</function>
                <start_addr>62</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="filterovercurrent">
                <function>3</function>
                <start_addr>63</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="filtercontactorfailure">
                <function>3</function>
                <start_addr>64</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="rectifierdrivecablefailure">
                <function>3</function>
                <start_addr>65</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="rectificationcommunicationfailure">
                <function>3</function>
                <start_addr>66</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inverterovertemp">
                <function>3</function>
                <start_addr>67</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="fanfailure">
                <function>3</function>
                <start_addr>68</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inverterthyristorfailure">
                <function>3</function>
                <start_addr>69</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassthyristorfailure">
                <function>3</function>
                <start_addr>70</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="usererrors2">
                <function>3</function>
                <start_addr>71</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="singleoutputoverload">
                <function>3</function>
                <start_addr>72</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelsystemoverload">
                <function>3</function>
                <start_addr>73</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="singleoverloadovertime">
                <function>3</function>
                <start_addr>74</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypasserrorturnoff">
                <function>3</function>
                <start_addr>75</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="acoutputovervoltage">
                <function>3</function>
                <start_addr>76</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inverterovercurrent">
                <function>3</function>
                <start_addr>77</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassphasereverse">
                <function>3</function>
                <start_addr>78</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="overloadturntobypass">
                <function>3</function>
                <start_addr>79</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="limitedbypasstimes">
                <function>3</function>
                <start_addr>80</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelflowequilizedfailure">
                <function>3</function>
                <start_addr>81</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="mothercableerrorturnoff">
                <function>3</function>
                <start_addr>82</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="neighbordeviceneedtobypass">
                <function>3</function>
                <start_addr>83</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelboardfailure">
                <function>3</function>
                <start_addr>84</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelcableconnectionfailure">
                <function>3</function>
                <start_addr>85</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelcommunicationfailure">
                <function>3</function>
                <start_addr>86</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassovercurrentfailure">
                <function>3</function>
                <start_addr>87</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassinductanceovertemp">
                <function>3</function>
                <start_addr>88</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="staticswitchovertemp">
                <function>3</function>
                <start_addr>89</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="bypassfeedbackfailure">
                <function>3</function>
                <start_addr>90</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="inverterdrivecablefailure">
                <function>3</function>
                <start_addr>91</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="invertercommunicationfailure">
                <function>3</function>
                <start_addr>92</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="parallelsystembatteryalarmfailure">
                <function>3</function>
                <start_addr>93</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="urgentturnoff">
                <function>3</function>
                <start_addr>94</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="evironmenttemphigh">
                <function>3</function>
                <start_addr>95</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batteryagingstatus">
                <function>3</function>
                <start_addr>96</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batterytemphigh">
                <function>3</function>
                <start_addr>97</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="batteryfuseopen">
                <function>3</function>
                <start_addr>98</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
            <value_ref_id valid="statusregister0">
                <function>3</function>
                <start_addr>1000</start_addr>
                <quantity>1</quantity>
                <type>uint_16</type>
            </value_ref_id>
		</modbus>
	</protocol>
</APC_DDF>