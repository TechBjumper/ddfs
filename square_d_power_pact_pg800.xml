<?xml version="1.0"?>
<!-- Test Modbus related information -->
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
		 ddfid="square_d_power_pact_pg800" ddfname="Square D Power Pact PG800 Circuit Breaker" ddfversion="1" canremove="yes">
		 
	<schemaVersion>1.6</schemaVersion>

	<device deviceid="compact_nsx_breaker">
		<oidMustExist ruleid="modbusdevicetest" oid="MODBUS_OID_MUST_EXIST"/>

		<setProductData ruleid="vendordata" field="vendor">Square D</setProductData>
		<setProductData ruleid="modeldata" field="model">Power Pact PG800</setProductData>
		<setProductData ruleid="typedata" field="type">Modbus Device</setProductData>
		<setDefaultLabel ruleid="labeldata"><sysHostname/> - Slave <commSetting field="slaveaddress"/></setDefaultLabel>
		
 		<valueMap ruleid="3phase_p2p-vm">
			<valueIn>0</valueIn><valueOut>AB</valueOut>
			<valueIn>1</valueIn><valueOut>BC</valueOut>
			<valueIn>2</valueIn><valueOut>CA</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>
		
 		<valueMap ruleid="3phase_p2n-vm">
			<valueIn>0</valueIn><valueOut>AN</valueOut>
			<valueIn>1</valueIn><valueOut>BN</valueOut>
			<valueIn>2</valueIn><valueOut>CN</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>

 		<valueMap ruleid="3phase_and_neutral-vm">
			<valueIn>0</valueIn><valueOut>Phase A</valueOut>
			<valueIn>1</valueIn><valueOut>Phase B</valueOut>
			<valueIn>2</valueIn><valueOut>Phase C</valueOut>
			<valueIn>3</valueIn><valueOut>Neutral</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>

 		<valueMap ruleid="3phase_and_total-vm">
			<valueIn>0</valueIn><valueOut>Phase A</valueOut>
			<valueIn>1</valueIn><valueOut>Phase B</valueOut>
			<valueIn>2</valueIn><valueOut>Phase C</valueOut>
			<valueIn>3</valueIn><valueOut>Total</valueOut>
			<valueIn>*</valueIn><valueOut>?</valueOut>
		</valueMap>
        
		<valueMap ruleid="zero_one_status-vm">
			<valueIn>0</valueIn>  <valueOut>0</valueOut>
			<valueIn>*</valueIn>  <valueOut>1</valueOut>
		</valueMap>

		<enumMap ruleid="normal_alarm-em">
			<label>Normal</label>
			<label>Alarm</label>
		</enumMap>

		<enumMap ruleid="trip_status-em">
			<label>No Trip</label>
			<label>Trip Active</label>
		</enumMap>

		<enumMap ruleid="trip_cause-em">
			<label>No Trip</label>
			<label>Trip Occurred and Not Acknowledged</label>
		</enumMap>

		<enumMap ruleid="open_closed-em">
			<label>Open</label>
			<label>Closed</label>
		</enumMap>

		<enumMap ruleid="unknown_known-em">
			<label>Unknown</label>
			<label>Known</label>
		</enumMap>

		<valueMap ruleid="3way_status-vm">
			<valueIn>0</valueIn>  <valueOut>0</valueOut>
			<valueIn>1</valueIn>  <valueOut>1</valueOut>
			<valueIn>2</valueIn>  <valueOut>2</valueOut>
			<valueIn>*</valueIn>  <valueOut>3</valueOut>
		</valueMap>
 
		<enumMap ruleid="3way_status-em">
			<label>Off</label>
			<label>On</label>
			<label>Inhibit</label>
			<label>Unknown</label>
		</enumMap>
 
		<valueMap ruleid="2way_status-vm">
			<valueIn>0</valueIn>  <valueOut>0</valueOut>
			<valueIn>1</valueIn>  <valueOut>1</valueOut>
			<valueIn>*</valueIn>  <valueOut>2</valueOut>
		</valueMap>
 
		<enumMap ruleid="2way_status-em">
			<label>Off</label>
			<label>On</label>
			<label>Unknown</label>
		</enumMap>
      
		<numSensor ruleid="rms_voltage_p2p" index="register1000-1002">
			<type>voltage</type>
			<sensorId>RMS_VOLTAGE_P2P_<mapValue mapid="3phase_p2p-vm"><rowNumber/></mapValue></sensorId>
			<value>
				<getRowOid>register1000-1002</getRowOid>
			</value>
			<valueInc>1</valueInc>
			<label>RMS Phase-to-Phase Voltage <mapValue mapid="3phase_p2p-vm"><rowNumber/></mapValue></label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
	
		<numSensor ruleid="rms_voltage_p2n" index="register1003-1005">
			<type>voltage</type>
			<sensorId>RMS_VOLTAGE_P2N_<mapValue mapid="3phase_p2n-vm"><rowNumber/></mapValue></sensorId>
			<value>
				<getRowOid>register1003-1005</getRowOid>
			</value>
			<valueInc>1</valueInc>
			<label>RMS Phase-to-Neutral Voltage <mapValue mapid="3phase_p2n-vm"><rowNumber/></mapValue></label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
	
		<numSensor ruleid="rms_current_" index="register1016-1019">
			<type>amperage</type>
			<sensorId>RMS_CURRENT_<mapValue mapid="3phase_and_neutral-vm"><rowNumber/></mapValue></sensorId>
			<value>
				<getRowOid>register1016-1019</getRowOid>
			</value>
			<valueInc>1</valueInc>
			<label>RMS Current on <mapValue mapid="3phase_and_neutral-vm"><rowNumber/></mapValue></label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
	
		<numSensor ruleid="active_power_" index="register1034-1037">
			<type>num/powerKW</type>
			<sensorId>ACTIVE_POWER_<mapValue mapid="3phase_and_total-vm"><rowNumber/></mapValue></sensorId>
			<value>
                <mult>
                    <op><getRowOid>register1034-1037</getRowOid></op>
                    <op>0.1</op>
                </mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Active Power <mapValue mapid="3phase_and_total-vm"><rowNumber/></mapValue></label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
	
		<numSensor ruleid="apparent_power_" index="register1042-1045">
			<type>num/powerKVA</type>
			<sensorId>APPARENT_POWER_<mapValue mapid="3phase_and_total-vm"><rowNumber/></mapValue></sensorId>
			<value>
                <mult>
                    <op><getRowOid>register1042-1045</getRowOid></op>
                    <op>0.1</op>
                </mult>
			</value>
			<valueInc>0.1</valueInc>
			<label>Apparent Power <mapValue mapid="3phase_and_total-vm"><rowNumber/></mapValue></label>
			<sensorSet>Measurements</sensorSet>
		</numSensor>
		
		<stateSensor ruleid="long_time_protection_prealarm">
			<type>state</type>
			<sensorId>LONG_TIME_PROTECTION_PREALARM</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register5704</getOid></op>
									<op>10</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Alarm Status - Long Time Protection Prealarm</label>
			<enum>normal_alarm-em</enum>
			<sensorSet>Alarm Status</sensorSet>
		</stateSensor>
 		
		<stateSensor ruleid="earth_leakage_protection_ldeltan_prealarm">
			<type>state</type>
			<sensorId>EARTH_LEAKAGE_PROTECTION_LDELTAN_PREALARM</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register5704</getOid></op>
									<op>11</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Alarm Status - Earth Leakage Protection l-delta-n Prealarm</label>
			<enum>normal_alarm-em</enum>
			<sensorSet>Alarm Status</sensorSet>
		</stateSensor>
 		
		<stateSensor ruleid="ground_fault_protection_prealarm">
			<type>state</type>
			<sensorId>GROUND_FAULT_PROTECTION_PREALARM</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register5704</getOid></op>
									<op>12</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Alarm Status - Ground Fault Protection Prealarm</label>
			<enum>normal_alarm-em</enum>
			<sensorSet>Alarm Status</sensorSet>
		</stateSensor>
 		
		<stateSensor ruleid="long_time_protection_param_status">
			<type>state</type>
			<sensorId>LONG_TIME_PROTECTION_PARAM_STATUS</sensorId>
			<value>
				<mapValue mapid="3way_status-vm">
                   <getOid>register8754</getOid>
				</mapValue>
			</value>
			<label>Long Time Protection Parameters - Status</label>
			<enum>3way_status-em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
  		
		<stateSensor ruleid="short_time_protection_param_status">
			<type>state</type>
			<sensorId>SHORT_TIME_PROTECTION_PARAM_STATUS</sensorId>
			<value>
				<mapValue mapid="3way_status-vm">
                   <getOid>register8764</getOid>
				</mapValue>
			</value>
			<label>Short Time Protection Parameters - Status</label>
			<enum>3way_status-em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
   		
		<stateSensor ruleid="instantaneous_protection_param_status">
			<type>state</type>
			<sensorId>INSTANTANEOUS_PROTECTION_PARAM_STATUS</sensorId>
			<value>
				<mapValue mapid="3way_status-vm">
                   <getOid>register8774</getOid>
				</mapValue>
			</value>
			<label>Instantaneous Protection Parameters - Status</label>
			<enum>3way_status-em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
    		
		<stateSensor ruleid="ground_fault_protection_param_status">
			<type>state</type>
			<sensorId>GROUND_FAULT_PROTECTION_PARAM_STATUS</sensorId>
			<value>
				<mapValue mapid="2way_status-vm">
                   <getOid>register8784</getOid>
				</mapValue>
			</value>
			<label>Ground Fault Protection Parameters - Status</label>
			<enum>2way_status-em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
   		
		<stateSensor ruleid="earth_leakage_protection_param_status">
			<type>state</type>
			<sensorId>EARTH_LEAKAGE_PROTECTION_PARAM_STATUS</sensorId>
			<value>
				<mapValue mapid="3way_status-vm">
                   <getOid>register8794</getOid>
				</mapValue>
			</value>
			<label>Earth Leakage Protection Parameters - Status</label>
			<enum>3way_status-em</enum>
			<sensorSet>Status</sensorSet>
		</stateSensor>
  		
		<stateSensor ruleid="status_of_output1">
			<type>state</type>
			<sensorId>STATUS_OF_OUTPUT1</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register8857</getOid></op>
									<op>0</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>SDx Module Status - Status of Output 1</label>
			<enum>open_closed-em</enum>
			<sensorSet>SDx Module Status</sensorSet>
		</stateSensor>
   		
		<stateSensor ruleid="status_of_output2">
			<type>state</type>
			<sensorId>STATUS_OF_OUTPUT2</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register8857</getOid></op>
									<op>1</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>SDx Module Status - Status of Output 2</label>
			<enum>open_closed-em</enum>
			<sensorSet>SDx Module Status</sensorSet>
		</stateSensor>
   		
		<stateSensor ruleid="validity_of_output1">
			<type>state</type>
			<sensorId>VALIDITY_OF_OUTPUT1</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register8857</getOid></op>
									<op>8</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>SDx Module Status - Validity of Output 1</label>
			<enum>unknown_known-em</enum>
			<sensorSet>SDx Module Status</sensorSet>
		</stateSensor>
    		
		<stateSensor ruleid="validity_of_output2">
			<type>state</type>
			<sensorId>VALIDITY_OF_OUTPUT2</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register8857</getOid></op>
									<op>9</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>SDx Module Status - Validity of Output 2</label>
			<enum>unknown_known-em</enum>
			<sensorSet>SDx Module Status</sensorSet>
		</stateSensor>
      		
		<stateSensor ruleid="long_time_protection_trip_status">
			<type>state</type>
			<sensorId>LONG_TIME_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>0</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Long Time Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
       		
		<stateSensor ruleid="short_time_protection_trip_status">
			<type>state</type>
			<sensorId>SHORT_TIME_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>1</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Short Time Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="instantaneous_protection_trip_status">
			<type>state</type>
			<sensorId>INSTANTANEOUS_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>2</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Instantaneous Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
      		
		<stateSensor ruleid="ground_fault_protection_trip_status">
			<type>state</type>
			<sensorId>GROUND_FAULT_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>3</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Ground Fault Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="integrated_instant_protection_trip_status">
			<type>state</type>
			<sensorId>INTEGRATED_INSTANT_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>5</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Integrated Instantaneous Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="stop_trip_unit_internal_fail_trip_status">
			<type>state</type>
			<sensorId>STOP_TRIP_UNIT_INTERNAL_FAIL_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>6</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - STOP (Trip Unit Internal Failure)</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="unbalance_motor_protect_trip_status">
			<type>state</type>
			<sensorId>UNBALANCE_MOTOR_PROTECT_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>8</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Unbalance Motor Protect</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="jam_motor_protect_trip_status">
			<type>state</type>
			<sensorId>JAM_MOTOR_PROTECT_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>9</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Jam Motor Protect</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="underload_motor_protect_trip_status">
			<type>state</type>
			<sensorId>UNDERLOAD_MOTOR_PROTECT_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>10</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Underload Motor Protect</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="longstart_motor_protect_trip_status">
			<type>state</type>
			<sensorId>LONGSTART_MOTOR_PROTECT_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>11</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Longstart Motor Protect</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
       		
		<stateSensor ruleid="reflex_tripping_protection_trip_status">
			<type>state</type>
			<sensorId>REFLEX_TRIPPING_PROTECTION_TRIP_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register10000</getOid></op>
									<op>12</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Status - Reflex Tripping Protection</label>
			<enum>trip_status-em</enum>
			<sensorSet>Trip Status</sensorSet>
		</stateSensor>
       		
		<stateSensor ruleid="of_status_circuit_breaker_status">
			<type>state</type>
			<sensorId>OF_STATUS_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>0</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - OF Status</label>
			<enum>open_closed-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
       		
		<enumMap ruleid="sd_trip_status-em">
			<label>No Trip</label>
			<label>Tripped on Electrical Default or Shunt Trip</label>
		</enumMap>

		<stateSensor ruleid="sd_trip_circuit_breaker_status">
			<type>state</type>
			<sensorId>SD_TRIP_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>1</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - SD Trip Indication</label>
			<enum>sd_trip_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
       		
		<enumMap ruleid="sde_fault_trip_status-em">
			<label>No Trip</label>
			<label>Tripped on Electrical Default</label>
		</enumMap>

		<stateSensor ruleid="sde_fault_trip_circuit_breaker_status">
			<type>state</type>
			<sensorId>SDE_FAULT_TRIP_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>2</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - SDE Fault Trip Indication</label>
			<enum>sde_fault_trip_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
      		
		<enumMap ruleid="ch_charged_status-em">
			<label>Spring Discharged</label>
			<label>Spring Loaded</label>
		</enumMap>

		<stateSensor ruleid="ch_charged_circuit_breaker_status">
			<type>state</type>
			<sensorId>CH_CHARGED_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>3</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - CH Charged</label>
			<enum>ch_charged_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
     		
		<enumMap ruleid="close_status-em">
			<label>Not Ready to Close</label>
			<label>Ready to Close</label>
		</enumMap>

		<stateSensor ruleid="pf_ready_to_close_circuit_breaker_status">
			<type>state</type>
			<sensorId>PF_READY_TO_CLOSE_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>5</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - PF Ready to Close</label>
			<enum>close_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
     		
		<enumMap ruleid="device_diff_status-em">
			<label>PowerPact</label>
			<label>MasterPact</label>
		</enumMap>

		<stateSensor ruleid="device_diff_circuit_breaker_status">
			<type>state</type>
			<sensorId>DEVICE_DIFF_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>6</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - Device</label>
			<enum>device_diff_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
    		
		<enumMap ruleid="data_avail_status-em">
			<label>Data Available</label>
			<label>Status Not Available</label>
		</enumMap>

		<stateSensor ruleid="data_avail_circuit_breaker_status">
			<type>state</type>
			<sensorId>DATA_AVAIL_CIRCUIT_BREAKER_STATUS</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12001</getOid></op>
									<op>15</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Circuit Breaker Status - Data Availabilitys</label>
			<enum>data_avail_status-em</enum>
			<sensorSet>Circuit Breaker Status</sensorSet>
		</stateSensor>
     		
		<stateSensor ruleid="long_time_protection_trip_cause">
			<type>state</type>
			<sensorId>LONG_TIME_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>0</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Long Time Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
       		
		<stateSensor ruleid="short_time_protection_trip_cause">
			<type>state</type>
			<sensorId>SHORT_TIME_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>1</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Short Time Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="instantaneous_protection_trip_cause">
			<type>state</type>
			<sensorId>INSTANTANEOUS_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>2</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Instantaneous Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
      		
		<stateSensor ruleid="ground_fault_protection_trip_cause">
			<type>state</type>
			<sensorId>GROUND_FAULT_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>3</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Ground Fault Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="integrated_instant_protection_trip_cause">
			<type>state</type>
			<sensorId>INTEGRATED_INSTANT_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>5</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Integrated Instantaneous Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="stop_internal_fail_trip_cause">
			<type>state</type>
			<sensorId>STOP_INTERNAL_FAIL_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>6</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Internal Failure (STOP)</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="unbalance_motor_protect_trip_cause">
			<type>state</type>
			<sensorId>UNBALANCE_MOTOR_PROTECT_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>10</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Unbalance Motor Protect</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="jam_motor_protect_trip_cause">
			<type>state</type>
			<sensorId>JAM_MOTOR_PROTECT_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>11</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Jam Motor Protect</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="underload_motor_protect_trip_cause">
			<type>state</type>
			<sensorId>UNDERLOAD_MOTOR_PROTECT_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>12</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Underload Motor Protect</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
        		
		<stateSensor ruleid="longstart_motor_protect_trip_cause">
			<type>state</type>
			<sensorId>LONGSTART_MOTOR_PROTECT_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>13</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Longstart Motor Protect</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
       		
		<stateSensor ruleid="reflex_tripping_protection_trip_cause">
			<type>state</type>
			<sensorId>REFLEX_TRIPPING_PROTECTION_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>14</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Reflex Tripping Protection</label>
			<enum>trip_cause-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
   		
		<enumMap ruleid="bits_valid-em">
			<label>Valid</label>
			<label>Not Valid</label>
		</enumMap>

		<stateSensor ruleid="validity_trip_cause">
			<type>state</type>
			<sensorId>VALIDITY_TRIP_CAUSE</sensorId>
			<value>
				<mapValue mapid="zero_one_status-vm">
                   <formatNumber>
                        <bitwise_and>
                            <op>
								<right_shift>
									<op><getOid>register12004</getOid></op>
									<op>15</op>
								</right_shift>
                            </op>
                            <op>1</op>
                        </bitwise_and>
                    </formatNumber>
				</mapValue>
			</value>
			<label>Trip Cause - Bits Valid</label>
			<enum>bits_valid-em</enum>
			<sensorSet>Trip Cause</sensorSet>
		</stateSensor>
				
	</device>

	<protocol>
		<modbus>
			<table_ref_id indexid="register1000-1002">
				<entry num="0">register1000</entry>
				<entry num="1">register1001</entry>
				<entry num="2">register1002</entry>
			</table_ref_id>
			<value_ref_id valid="register1000">
				<function>3</function>
				<start_addr>999</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1001">
				<function>3</function>
				<start_addr>1000</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1002">
				<function>3</function>
				<start_addr>1001</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<table_ref_id indexid="register1003-1005">
				<entry num="0">register1003</entry>
				<entry num="1">register1004</entry>
				<entry num="2">register1005</entry>
			</table_ref_id>
			<value_ref_id valid="register1003">
				<function>3</function>
				<start_addr>1002</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1004">
				<function>3</function>
				<start_addr>1003</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1005">
				<function>3</function>
				<start_addr>1004</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<table_ref_id indexid="register1016-1019">
				<entry num="0">register1016</entry>
				<entry num="1">register1017</entry>
				<entry num="2">register1018</entry>
				<entry num="3">register1019</entry>
			</table_ref_id>
			<value_ref_id valid="register1016">
				<function>3</function>
				<start_addr>1015</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1017">
				<function>3</function>
				<start_addr>1016</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1018">
				<function>3</function>
				<start_addr>1017</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>
			<value_ref_id valid="register1019">
				<function>3</function>
				<start_addr>1018</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<table_ref_id indexid="register1034-1037">
				<entry num="0">register1034</entry>
				<entry num="1">register1035</entry>
				<entry num="2">register1036</entry>
				<entry num="3">register1037</entry>
			</table_ref_id>
			<value_ref_id valid="register1034">
				<function>3</function>
				<start_addr>1033</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1035">
				<function>3</function>
				<start_addr>1034</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1036">
				<function>3</function>
				<start_addr>1035</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1037">
				<function>3</function>
				<start_addr>1036</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
    
			<table_ref_id indexid="register1042-1045">
				<entry num="0">register1042</entry>
				<entry num="1">register1043</entry>
				<entry num="2">register1044</entry>
				<entry num="3">register1045</entry>
			</table_ref_id>
			<value_ref_id valid="register1042">
				<function>3</function>
				<start_addr>1041</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1043">
				<function>3</function>
				<start_addr>1042</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1044">
				<function>3</function>
				<start_addr>1043</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>
			<value_ref_id valid="register1045">
				<function>3</function>
				<start_addr>1044</start_addr>
				<quantity>1</quantity>
				<type>int_16</type>
			</value_ref_id>

			<value_ref_id valid="register5704">
				<function>3</function>
				<start_addr>5703</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8754">
				<function>3</function>
				<start_addr>8753</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8764">
				<function>3</function>
				<start_addr>8763</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8774">
				<function>3</function>
				<start_addr>8773</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8784">
				<function>3</function>
				<start_addr>8783</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8794">
				<function>3</function>
				<start_addr>8793</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register8857">
				<function>3</function>
				<start_addr>8856</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register10000">
				<function>3</function>
				<start_addr>9999</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register12001">
				<function>3</function>
				<start_addr>12000</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			<value_ref_id valid="register12004">
				<function>3</function>
				<start_addr>12003</start_addr>
				<quantity>1</quantity>
				<type>uint_16</type>
			</value_ref_id>

			
			<packet>
				<function>3</function>
				<start_addr>999</start_addr>
				<quantity>6</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>1015</start_addr>
				<quantity>4</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>1033</start_addr>
				<quantity>4</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>1041</start_addr>
				<quantity>4</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>5703</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8753</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8763</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8773</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8783</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8793</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>8856</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>9999</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>12000</start_addr>
				<quantity>1</quantity>
			</packet>
			<packet>
				<function>3</function>
				<start_addr>12003</start_addr>
				<quantity>1</quantity>
			</packet>

        </modbus>
	</protocol>
</APC_DDF>
